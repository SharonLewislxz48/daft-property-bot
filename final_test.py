#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å–ø–∞–ª–µ–Ω
"""

import asyncio
from parser.daft_parser import DaftParser
from parser.models import SearchFilters

async def final_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    
    parser = DaftParser()
    
    print("üîç –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å–ø–∞–ª–µ–Ω")
    print("="*80)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters = SearchFilters(
        city="Dublin",
        max_price=10000,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç
        min_bedrooms=0    # –ë–µ–∑ –º–∏–Ω–∏–º—É–º–∞
    )
    
    properties = await parser.search_properties(filters)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –†–ï–ê–õ–¨–ù–´–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    print()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∞–ª–µ–Ω
    bedroom_stats = {}
    for prop in properties:
        bedrooms = prop.bedrooms
        if bedrooms not in bedroom_stats:
            bedroom_stats[bedrooms] = []
        bedroom_stats[bedrooms].append(prop)
    
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ü–ê–õ–¨–ù–Ø–ú:")
    print("-" * 40)
    
    for bedrooms in sorted(bedroom_stats.keys()):
        count = len(bedroom_stats[bedrooms])
        print(f"üõèÔ∏è {bedrooms} —Å–ø–∞–ª–µ–Ω: {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        examples = bedroom_stats[bedrooms][:3]  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
        for prop in examples:
            print(f"   ‚Ä¢ {prop.title[:50]}... - ‚Ç¨{prop.price:,}")
        if len(bedroom_stats[bedrooms]) > 3:
            print(f"   ... –∏ –µ—â—ë {len(bedroom_stats[bedrooms]) - 3}")
        print()
    
    print("üéØ –ü–†–û–í–ï–†–Ø–ï–ú –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –° 3+ –°–ü–ê–õ–¨–ù–Ø–ú–ò:")
    print("-" * 50)
    
    three_plus_bedrooms = [prop for prop in properties if prop.bedrooms >= 3]
    
    if three_plus_bedrooms:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(three_plus_bedrooms)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏:")
        for i, prop in enumerate(three_plus_bedrooms, 1):
            print(f"{i}. üè† {prop.title}")
            print(f"   üí∞ ‚Ç¨{prop.price:,}/month")
            print(f"   üõèÔ∏è {prop.bedrooms} —Å–ø–∞–ª–µ–Ω")
            print(f"   üìç {prop.address}")
            print(f"   üîó {prop.url}")
            print()
    else:
        print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("üí∞ –ê–ù–ê–õ–ò–ó –¶–ï–ù –î–õ–Ø –†–ê–ó–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô:")
    print("-" * 50)
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = [
        (1, "1 —Å–ø–∞–ª—å–Ω—è"),
        (2, "2 —Å–ø–∞–ª—å–Ω–∏"), 
        (3, "3+ —Å–ø–∞–ª—å–Ω–∏")
    ]
    
    for min_beds, category_name in categories:
        if min_beds == 3:
            category_props = [p for p in properties if p.bedrooms >= min_beds]
        else:
            category_props = [p for p in properties if p.bedrooms == min_beds]
        
        if category_props:
            prices = [p.price for p in category_props]
            min_price = min(prices)
            max_price = max(prices)
            avg_price = sum(prices) // len(prices)
            
            print(f"üí∞ {category_name}: {len(category_props)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            print(f"   –¶–µ–Ω—ã: ‚Ç¨{min_price:,} - ‚Ç¨{max_price:,} (—Å—Ä–µ–¥–Ω–µ–µ ‚Ç¨{avg_price:,})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ‚Ç¨2,500
            affordable = [p for p in category_props if p.price <= 2500]
            if affordable:
                print(f"   üü¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ ‚Ç¨2,500: {len(affordable)}")
            else:
                print(f"   üî¥ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ ‚Ç¨2,500: 0")
        else:
            print(f"üí∞ {category_name}: 0 –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        print()
    
    await parser.close()
    
    print("‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("="*50)
    print("‚Ä¢ –ü–∞—Ä—Å–µ—Ä —Å–ø–∞–ª–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–û")
    print("‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –†–ï–ê–õ–¨–ù–´–ï (–±–µ–∑ —Ñ–∞–ª—å—à–∏–≤—ã—Ö)")
    print("‚Ä¢ –¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è daft.ie —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è —Ç–æ—á–Ω–æ")
    print("‚Ä¢ –§–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    if three_plus_bedrooms:
        affordable_3plus = [p for p in three_plus_bedrooms if p.price <= 2500]
        if affordable_3plus:
            print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {len(affordable_3plus)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö 3+ —Å–ø–∞–ª—å–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ ‚Ç¨2,500")
        else:
            print("‚Ä¢ 3+ —Å–ø–∞–ª—å–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—Å—Ç—å, –Ω–æ –≤—Å–µ –¥–æ—Ä–æ–∂–µ ‚Ç¨2,500")
    else:
        print("‚Ä¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏")

if __name__ == "__main__":
    asyncio.run(final_test())
