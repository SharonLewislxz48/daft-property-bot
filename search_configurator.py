#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
"""

import asyncio
import json
from pathlib import Path
from production_parser import ProductionDaftParser

class SearchConfigurator:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    def __init__(self):
        self.parser = ProductionDaftParser()
        self.config_file = "search_config.json"
    
    def get_user_preferences(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üè† –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–ò–°–ö–ê –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò")
        print("=" * 50)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
        while True:
            try:
                min_bedrooms = input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω (0-10, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): ").strip()
                if not min_bedrooms:
                    min_bedrooms = 3
                else:
                    min_bedrooms = int(min_bedrooms)
                    if min_bedrooms < 0 or min_bedrooms > 10:
                        raise ValueError
                break
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10")
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        while True:
            try:
                max_price = input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ –º–µ—Å—è—Ü (‚Ç¨, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2500): ").strip()
                if not max_price:
                    max_price = 2500
                else:
                    max_price = int(max_price)
                    if max_price < 500 or max_price > 10000:
                        raise ValueError
                break
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç ‚Ç¨500 –¥–æ ‚Ç¨10000")
        
        # –õ–æ–∫–∞—Ü–∏—è
        print("\nüìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:")
        print("1. dublin-city (Dublin City)")
        print("2. dublin (Dublin –æ–±—â–∞—è)")
        print("3. cork (Cork)")
        print("4. galway (Galway)")
        print("5. waterford (Waterford)")
        print("6. limerick (Limerick)")
        
        location_map = {
            '1': 'dublin-city',
            '2': 'dublin',
            '3': 'cork',
            '4': 'galway',
            '5': 'waterford',
            '6': 'limerick'
        }
        
        while True:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (1-6, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
            if not choice:
                choice = '1'
            if choice in location_map:
                location = location_map[choice]
                break
            print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        while True:
            try:
                limit = input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ").strip()
                if not limit:
                    limit = 20
                else:
                    limit = int(limit)
                    if limit < 1 or limit > 100:
                        raise ValueError
                break
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
        
        return {
            'min_bedrooms': min_bedrooms,
            'max_price': max_price,
            'location': location,
            'limit': limit
        }
    
    def save_config(self, config):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if Path(self.config_file).exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None
    
    def display_config(self, config):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüéØ –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–ò–°–ö–ê:")
        print(f"   –ú–∏–Ω–∏–º—É–º —Å–ø–∞–ª–µ–Ω: {config['min_bedrooms']}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ‚Ç¨{config['max_price']}")
        print(f"   –õ–æ–∫–∞—Ü–∏—è: {config['location']}")
        print(f"   –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {config['limit']}")
        print()
    
    async def run_search(self, config):
        """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–ò–°–ö–ê...")
        print("=" * 50)
        
        results = await self.parser.search_properties(**config)
        
        if results:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            print("\nüìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
            for i, prop in enumerate(results[:5], 1):
                title = prop.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:60]
                price = prop.get('price', 0)
                bedrooms = prop.get('bedrooms', '?')
                print(f"{i}. {title} - ‚Ç¨{price}, {bedrooms} —Å–ø–∞–ª–µ–Ω")
            
            if len(results) > 5:
                print(f"   ... –∏ –µ—â–µ {len(results) - 5} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        else:
            print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        
        return results

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    configurator = SearchConfigurator()
    
    print("üè† –ö–û–ù–§–ò–ì–£–†–ê–¢–û–† –ü–û–ò–°–ö–ê –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    existing_config = configurator.load_config()
    
    if existing_config:
        print("üìÅ –ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        configurator.display_config(existing_config)
        
        use_existing = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
        if use_existing in ['', 'y', 'yes', '–¥–∞']:
            config = existing_config
        else:
            config = configurator.get_user_preferences()
            configurator.save_config(config)
    else:
        config = configurator.get_user_preferences()
        configurator.save_config(config)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    configurator.display_config(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    results = await configurator.run_search(config)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
    if results:
        send_to_telegram = input("\nüì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ").strip().lower()
        if send_to_telegram in ['y', 'yes', '–¥–∞']:
            try:
                from telegram_sender import PropertySender
                sender = PropertySender()
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                import datetime
                filename = f"results/daft_results_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                Path("results").mkdir(exist_ok=True)
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(results, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                await sender.run()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

if __name__ == "__main__":
    asyncio.run(main())
