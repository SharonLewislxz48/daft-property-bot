#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä daft.ie —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JSON –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
import re
import logging
from typing import List, Dict, Any, Optional
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DaftJSONParser:
    """–ü–∞—Ä—Å–µ—Ä JSON –¥–∞–Ω–Ω—ã—Ö —Å daft.ie"""
    
    def __init__(self):
        self.base_url = "https://www.daft.ie"
    
    def extract_json_data(self, html_content: str) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML"""
        try:
            # –ò—â–µ–º JSON –≤ <script id="__NEXT_DATA__">
            pattern = r'<script[^>]*id="__NEXT_DATA__"[^>]*>(.*?)</script>'
            match = re.search(pattern, html_content, re.DOTALL)
            
            if match:
                json_str = match.group(1)
                return json.loads(json_str)
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ JSON –¥–∞–Ω–Ω—ã—Ö
            pattern2 = r'"props":\s*{.*?"searchApi":\s*({.*?})\s*,'
            match2 = re.search(pattern2, html_content, re.DOTALL)
            
            if match2:
                logger.info("–ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π JSON")
                return json.loads(match2.group(1))
                
            logger.warning("JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
            
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON: {e}")
            return None
    
    def parse_listing(self, listing_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ JSON"""
        try:
            listing = listing_data.get('listing', {})
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            property_id = str(listing.get('id', ''))
            title = listing.get('title', '')
            price_text = listing.get('price', '')
            bedrooms_text = listing.get('numBedrooms', '')
            property_type = listing.get('propertyType', 'apartment')
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã
            price = self._parse_price(price_text)
            if not price:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –∏–∑: {price_text}")
                return None
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω
            bedrooms = self._parse_bedrooms(bedrooms_text)
            
            # URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            seo_path = listing.get('seoFriendlyPath', '')
            if seo_path:
                property_url = urljoin(self.base_url, seo_path)
            else:
                property_url = f"{self.base_url}/for-rent/{property_id}"
            
            # –ê–¥—Ä–µ—Å
            address = title  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_url = None
            media = listing.get('media', {})
            if media and 'images' in media and media['images']:
                first_image = media['images'][0]
                image_url = first_image.get('size720x480') or first_image.get('size72x52')
            
            # –†–∞–π–æ–Ω (–∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∞–¥—Ä–µ—Å–∞)
            area = self._extract_area_from_address(address)
            
            return {
                'id': property_id,
                'title': title[:200],
                'address': address[:200],
                'price': price,
                'bedrooms': bedrooms,
                'bathrooms': None,  # –í JSON –Ω–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
                'property_type': property_type.lower(),
                'url': property_url,
                'image_url': image_url,
                'area': area,
                'raw_price': price_text,
                'raw_bedrooms': bedrooms_text
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return None
    
    def _parse_price(self, price_text: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º "From " –∏ –∏—â–µ–º —á–∏—Å–ª–æ
            clean_text = price_text.replace("From ", "").replace("‚Ç¨", "").replace(",", "")
            
            # –ò—â–µ–º —á–∏—Å–ª–æ
            price_match = re.search(r'(\d+)', clean_text)
            if price_match:
                price = int(price_match.group(1))
                if 500 <= price <= 10000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                    return price
                    
        except (ValueError, AttributeError):
            pass
        
        return None
    
    def _parse_bedrooms(self, bedrooms_text: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω"""
        try:
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
            bed_match = re.search(r'(\d+)', bedrooms_text)
            if bed_match:
                bedrooms = int(bed_match.group(1))
                if 0 <= bedrooms <= 10:
                    return bedrooms
                    
        except (ValueError, AttributeError):
            pass
        
        return 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–ø–∞–ª—å–Ω—è
    
    def _extract_area_from_address(self, address: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞"""
        try:
            # –ò—â–µ–º Dublin X
            dublin_match = re.search(r'Dublin\s+(\d+[WwEe]?)', address)
            if dublin_match:
                return f"Dublin {dublin_match.group(1)}"
            
            # Co. Dublin
            if "Co. Dublin" in address:
                return "Co. Dublin"
                
        except Exception:
            pass
        return None
    
    def parse_search_results(self, html_content: str, min_bedrooms: int = 3, max_price: int = 2500) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        properties = []
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
            json_data = self.extract_json_data(html_content)
            if not json_data:
                logger.error("JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return properties
            
            # –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ JSON
            search_api = json_data.get('props', {}).get('pageProps', {}).get('searchApi', {})
            listings = search_api.get('listings', [])
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ JSON: {len(listings)}")
            
            for listing_data in listings:
                property_data = self.parse_listing(listing_data)
                if property_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    if (property_data['price'] <= max_price and 
                        property_data['bedrooms'] >= min_bedrooms):
                        properties.append(property_data)
                        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {property_data['title']} - ‚Ç¨{property_data['price']} - {property_data['bedrooms']} bed")
                    else:
                        logger.debug(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {property_data['title']} - ‚Ç¨{property_data['price']} - {property_data['bedrooms']} bed")
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(properties)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ {len(listings)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        
        return properties

async def test_json_parser():
    """–¢–µ—Å—Ç JSON –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –ø–∞—Ä—Å–µ—Ä–∞ daft.ie\n")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π HTML
    try:
        with open('/tmp/daft_response.html', 'r', encoding='utf-8') as f:
            html_content = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª /tmp/daft_response.html –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ url_test.py")
        return
    
    parser = DaftJSONParser()
    
    # –¢–µ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: 3+ —Å–ø–∞–ª–µ–Ω, –¥–æ ‚Ç¨2500
    properties = parser.parse_search_results(html_content, min_bedrooms=3, max_price=2500)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(properties)}")
    
    if properties:
        print(f"\nüìã –ü–µ—Ä–≤—ã–µ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
        for i, prop in enumerate(properties[:5], 1):
            print(f"  {i}. {prop['title']}")
            print(f"     üí∞ ‚Ç¨{prop['price']}/–º–µ—Å—è—Ü")
            print(f"     üõèÔ∏è {prop['bedrooms']} —Å–ø–∞–ª–µ–Ω")
            print(f"     üìç {prop['address']}")
            print(f"     üîó {prop['url']}")
            if prop['area']:
                print(f"     üìç –†–∞–π–æ–Ω: {prop['area']}")
            print()
    else:
        print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    json_data = parser.extract_json_data(html_content)
    if json_data:
        search_api = json_data.get('props', {}).get('pageProps', {}).get('searchApi', {})
        total_results = search_api.get('paging', {}).get('totalResults', 0)
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ: {total_results}")
        print(f"  –ù–∞–π–¥–µ–Ω–æ –≤ JSON: {len(search_api.get('listings', []))}")
        print(f"  –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º: {len(properties)}")

if __name__ == "__main__":
    asyncio.run(test_json_parser())
