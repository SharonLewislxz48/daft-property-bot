#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ
"""
import asyncio
import sys
sys.path.append('/home/barss/PycharmProjects/daftparser')

from parser.daft_parser import DaftParser
from parser.demo_parser import DemoParser
from parser.models import SearchFilters

async def check_data_sources():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Daft.ie Bot")
    print("=" * 50)
    
    filters = SearchFilters(
        city="Dublin",
        max_price=3000,
        min_bedrooms=2,
        areas=[]
    )
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –û–°–ù–û–í–ù–û–ô –ø–∞—Ä—Å–µ—Ä (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å daft.ie):")
    try:
        parser = DaftParser()
        properties = await parser.search_properties(filters)
        if properties:
            print(f"   ‚úÖ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: –Ω–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            print("   üìã –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
            prop = properties[0]
            print(f"      ‚Ä¢ {prop.title}")
            print(f"      ‚Ä¢ {prop.address}")
            print(f"      ‚Ä¢ {prop.format_price()}")
            print(f"      ‚Ä¢ URL: {prop.url}")
        else:
            print("   ‚ö†Ô∏è –û–°–ù–û–í–ù–û–ô –ü–ê–†–°–ï–†: –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)")
    except Exception as e:
        print(f"   ‚ùå –û–°–ù–û–í–ù–û–ô –ü–ê–†–°–ï–† –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        if "403" in str(e) or "blocked" in str(e).lower():
            print("   üõ°Ô∏è –ü—Ä–∏—á–∏–Ω–∞: –°–∞–π—Ç daft.ie –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ-–ø–∞—Ä—Å–µ—Ä (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –î–ï–ú–û-–ø–∞—Ä—Å–µ—Ä (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ):")
    try:
        demo_parser = DemoParser()
        demo_properties = await demo_parser.search_properties(filters)
        if demo_properties:
            print(f"   ‚úÖ –î–ï–ú–û –î–ê–ù–ù–´–ï: –Ω–∞–π–¥–µ–Ω–æ {len(demo_properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            print("   üìã –ü—Ä–∏–º–µ—Ä—ã –¥–µ–º–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
            for i, prop in enumerate(demo_properties[:3], 1):
                print(f"      {i}. {prop.title}")
                print(f"         ‚Ä¢ {prop.address}")
                print(f"         ‚Ä¢ {prop.format_price()}")
                print(f"         ‚Ä¢ URL: {prop.url}")
        else:
            print("   ‚ùå –î–ï–ú–û –ü–ê–†–°–ï–†: –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        print(f"   ‚ùå –î–ï–ú–û –ü–ê–†–°–ï–† –æ—à–∏–±–∫–∞: {e}")
    
    # 3. –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    print("\n3Ô∏è‚É£ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:")
    print("   üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("   ‚Ä¢ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å daft.ie")
    print("   ‚Ä¢ –ï—Å–ª–∏ —Å–∞–π—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –î–ï–ú–û –¥–∞–Ω–Ω—ã–µ")
    print("   ‚Ä¢ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print("\n4Ô∏è‚É£ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
    try:
        parser = DaftParser()
        real_props = await parser.search_properties(filters)
        if real_props:
            print("   üåê –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø: –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å daft.ie")
        else:
            print("   üé≠ –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø: –î–ï–ú–û –¥–∞–Ω–Ω—ã–µ (—Å–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)")
    except:
        print("   üé≠ –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø: –î–ï–ú–û –¥–∞–Ω–Ω—ã–µ (—Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

if __name__ == "__main__":
    asyncio.run(check_data_sources())
