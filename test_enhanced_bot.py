#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
"""

import asyncio
import logging
from datetime import datetime

from database.enhanced_database import EnhancedDatabase
from production_parser import ProductionDaftParser
from config.regions import DUBLIN_REGIONS, DEFAULT_SETTINGS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db = EnhancedDatabase("data/test_enhanced_bot.db")
    await db.init_database()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = 12345
    user = await db.get_or_create_user(user_id, "test_user", "Test", "User")
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await db.get_user_settings(user_id)
    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await db.update_user_settings(
        user_id, 
        regions=["dublin-city", "dublin-6"],
        min_bedrooms=2,
        max_price=3000
    )
    
    updated_settings = await db.get_user_settings(user_id)
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {updated_settings}")
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return db

async def test_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    parser = ProductionDaftParser()
    
    try:
        results = await parser.search_properties(
            min_bedrooms=3,
            max_price=2500,
            location="dublin-city",
            limit=5
        )
        
        print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        if results:
            print(f"   –ü—Ä–∏–º–µ—Ä: {results[0]['title']} - ‚Ç¨{results[0]['price']}")
        
        return results
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return []

async def test_new_properties_detection(db, test_properties):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    print("üîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    
    user_id = 12345
    search_params = {
        "regions": ["dublin-city"],
        "min_bedrooms": 3,
        "max_price": 2500
    }
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–æ–≤—ã–º–∏
    new_properties_1 = await db.get_new_properties(user_id, test_properties, search_params)
    print(f"‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {len(new_properties_1)} –Ω–æ–≤—ã—Ö –∏–∑ {len(test_properties)}")
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ - –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
    new_properties_2 = await db.get_new_properties(user_id, test_properties, search_params)
    print(f"‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫: {len(new_properties_2)} –Ω–æ–≤—ã—Ö (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0)")
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
    urls = [prop['url'] for prop in test_properties]
    await db.mark_properties_as_sent(user_id, urls)
    print("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ")

async def test_statistics(db):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    user_id = 12345
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    await db.log_monitoring_session(
        user_id=user_id,
        search_params={"regions": ["dublin-city"], "min_bedrooms": 3, "max_price": 2500},
        properties_found=10,
        new_properties=3,
        execution_time=15.5,
        status="success"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_user_statistics(user_id, days=7)
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

async def test_regions_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    print("üîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤...")
    
    print(f"‚úÖ –†–µ–≥–∏–æ–Ω–æ–≤ –î—É–±–ª–∏–Ω–∞: {len(DUBLIN_REGIONS)}")
    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_SETTINGS}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤
    test_regions = ["dublin-city", "dublin-6", "rathmines", "clondalkin"]
    for region in test_regions:
        if region in DUBLIN_REGIONS:
            print(f"‚úÖ {region}: {DUBLIN_REGIONS[region]}")
        else:
            print(f"‚ùå {region}: –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def run_full_test():
    """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    
    start_time = datetime.now()
    
    try:
        # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await test_regions_config()
        print()
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = await test_database()
        print()
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        test_properties = await test_parser()
        print()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if test_properties:
            await test_new_properties_detection(db, test_properties)
            print()
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await test_statistics(db)
        print()
        
        duration = (datetime.now() - start_time).total_seconds()
        
        print("=" * 60)
        print(f"‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        print("üéâ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(run_full_test())
