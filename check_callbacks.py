#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

def check_handlers():
    print("üîç –ü–†–û–í–ï–†–ö–ê CALLBACK-–û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    print("="*50)
    
    # –í—Å–µ callback_data –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    expected_callbacks = [
        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        "settings", "statistics", "start_monitoring", "stop_monitoring", 
        "single_search", "help", "main_menu",
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        "manage_regions", "set_bedrooms", "set_max_price", "set_interval",
        "show_settings",
        
        # –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
        "category_dublin_areas", "category_main_cities", 
        "category_republic_counties", "category_northern_counties",
        "category_popular", "search_region",
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        "add_region", "remove_region", "show_regions", "list_all_regions",
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        "select_combo_dublin_central", "select_combo_dublin_south",
        "select_combo_dublin_north", "select_combo_dublin_west",
        "select_combo_major_cities", "select_combo_student_areas",
        
        # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        "select_region_", "remove_region_", "bedrooms_", "price_", "interval_",
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        "region_page_", "category_page_",
        
        # –ü—Ä–æ—á–∏–µ
        "custom_price", "stats_"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º enhanced_main.py –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    try:
        with open('enhanced_main.py', 'r', encoding='utf-8') as f:
            main_content = f.read()
        
        registered_handlers = []
        missing_handlers = []
        
        for callback in expected_callbacks:
            # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if callback.endswith('_'):
                # –ü–∞—Ç—Ç–µ—Ä–Ω —Ç–∏–ø–∞ "startswith"
                if f'F.data.startswith("{callback}")' in main_content:
                    registered_handlers.append(callback)
                else:
                    missing_handlers.append(callback + "*")
            else:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if f'F.data == "{callback}"' in main_content:
                    registered_handlers.append(callback)
                else:
                    missing_handlers.append(callback)
        
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(registered_handlers)}")
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(missing_handlers)}")
        
        if missing_handlers:
            print("\n‚ö†Ô∏è –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:")
            for handler in missing_handlers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {handler}")
            if len(missing_handlers) > 10:
                print(f"   ... –∏ –µ—â–µ {len(missing_handlers) - 10}")
        
        return len(missing_handlers) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def check_keyboard_callbacks():
    print("\nüéπ –ü–†–û–í–ï–†–ö–ê –ö–õ–ê–í–ò–ê–¢–£–†")
    print("="*30)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        import sys
        sys.path.append('.')
        from bot.enhanced_keyboards import (
            get_main_menu_keyboard, get_settings_menu_keyboard, get_regions_menu_keyboard,
            get_region_categories_keyboard, get_popular_combinations_keyboard,
            get_category_regions_keyboard
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º callback_data
        keyboards = [
            ("main_menu", get_main_menu_keyboard()),
            ("settings_menu", get_settings_menu_keyboard()),
            ("regions_menu", get_regions_menu_keyboard()),
            ("region_categories", get_region_categories_keyboard()),
            ("popular_combinations", get_popular_combinations_keyboard()),
            ("category_dublin", get_category_regions_keyboard("dublin_areas")),
            ("category_cities", get_category_regions_keyboard("main_cities")),
        ]
        
        all_callbacks = set()
        
        for name, keyboard in keyboards:
            callbacks = []
            if hasattr(keyboard, 'inline_keyboard'):
                for row in keyboard.inline_keyboard:
                    for button in row:
                        if hasattr(button, 'callback_data') and button.callback_data:
                            callbacks.append(button.callback_data)
                            all_callbacks.add(button.callback_data)
            
            print(f"  {name}: {len(callbacks)} –∫–Ω–æ–ø–æ–∫")
        
        print(f"\nüìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö callback_data: {len(all_callbacks)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã callback_data:")
        for callback in sorted(list(all_callbacks))[:10]:
            print(f"   ‚Ä¢ {callback}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    handlers_ok = check_handlers()
    keyboards_ok = check_keyboard_callbacks()
    
    print("\n" + "="*50)
    if handlers_ok and keyboards_ok:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
    else:
        print("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ - –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")

if __name__ == "__main__":
    main()
