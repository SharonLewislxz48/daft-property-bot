#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è cookies Daft.ie –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Google OAuth –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
"""

import sqlite3
import json
import os
import shutil
from pathlib import Path
import platform

def extract_chrome_cookies():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ cookies –∏–∑ Chrome/Chromium"""
    system = platform.system()
    
    if system == "Linux":
        chrome_paths = [
            Path.home() / ".config/google-chrome/Default/Cookies",
            Path.home() / ".config/chromium/Default/Cookies",
            Path.home() / "snap/chromium/common/chromium/Default/Cookies",
            Path.home() / ".config/google-chrome-beta/Default/Cookies"
        ]
    elif system == "Darwin":  # macOS
        chrome_paths = [
            Path.home() / "Library/Application Support/Google/Chrome/Default/Cookies",
            Path.home() / "Library/Application Support/Chromium/Default/Cookies"
        ]
    elif system == "Windows":
        chrome_paths = [
            Path.home() / "AppData/Local/Google/Chrome/User Data/Default/Cookies",
            Path.home() / "AppData/Local/Chromium/User Data/Default/Cookies"
        ]
    else:
        print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}")
        return None
    
    for chrome_path in chrome_paths:
        if chrome_path.exists():
            try:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {chrome_path}")
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª cookies
                temp_cookies = "/tmp/temp_cookies.db"
                shutil.copy2(chrome_path, temp_cookies)
                
                conn = sqlite3.connect(temp_cookies)
                cursor = conn.cursor()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º cookies –¥–ª—è daft.ie
                cursor.execute("""
                    SELECT name, value, domain, path, expires_utc, is_secure, is_httponly
                    FROM cookies 
                    WHERE host_key LIKE '%daft.ie%'
                    ORDER BY creation_utc DESC
                """)
                
                rows = cursor.fetchall()
                conn.close()
                os.remove(temp_cookies)
                
                if rows:
                    cookies = []
                    for row in rows:
                        cookie = {
                            'name': row[0],
                            'value': row[1],
                            'domain': row[2] if row[2].startswith('.') else f".{row[2]}",
                            'path': row[3],
                            'expires': row[4] if row[4] > 0 else -1,
                            'secure': bool(row[5]),
                            'httpOnly': bool(row[6])
                        }
                        cookies.append(cookie)
                    
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cookies)} cookies –∏–∑ {chrome_path}")
                    return cookies
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {chrome_path}: {e}")
                continue
    
    return None

def extract_firefox_cookies():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ cookies –∏–∑ Firefox"""
    try:
        system = platform.system()
        
        if system == "Linux":
            firefox_dir = Path.home() / ".mozilla/firefox"
        elif system == "Darwin":
            firefox_dir = Path.home() / "Library/Application Support/Firefox/Profiles"
        elif system == "Windows":
            firefox_dir = Path.home() / "AppData/Roaming/Mozilla/Firefox/Profiles"
        else:
            return None
        
        if not firefox_dir.exists():
            return None
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        profiles = list(firefox_dir.glob("*.default*"))
        if not profiles:
            profiles = list(firefox_dir.glob("*"))
        
        for profile in profiles:
            cookies_db = profile / "cookies.sqlite"
            if cookies_db.exists():
                try:
                    temp_cookies = "/tmp/temp_firefox_cookies.db"
                    shutil.copy2(cookies_db, temp_cookies)
                    
                    conn = sqlite3.connect(temp_cookies)
                    cursor = conn.cursor()
                    
                    cursor.execute("""
                        SELECT name, value, host, path, expiry, isSecure, isHttpOnly
                        FROM moz_cookies 
                        WHERE host LIKE '%daft.ie%'
                        ORDER BY creationTime DESC
                    """)
                    
                    rows = cursor.fetchall()
                    conn.close()
                    os.remove(temp_cookies)
                    
                    if rows:
                        cookies = []
                        for row in rows:
                            cookie = {
                                'name': row[0],
                                'value': row[1],
                                'domain': row[2] if row[2].startswith('.') else f".{row[2]}",
                                'path': row[3],
                                'expires': row[4] if row[4] else -1,
                                'secure': bool(row[5]),
                                'httpOnly': bool(row[6])
                            }
                            cookies.append(cookie)
                        
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cookies)} cookies –∏–∑ Firefox")
                        return cookies
                
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Firefox cookies: {e}")
                    continue
        
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Firefox cookies: {e}")
        return None

def save_cookies_for_automation(cookies):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    if not cookies:
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–Ω—è—Ç–Ω–æ–º Playwright
    output_file = "daft_cookies.json"
    
    try:
        with open(output_file, 'w') as f:
            json.dump(cookies, f, indent=2)
        
        print(f"üíæ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        print(f"üìä –í—Å–µ–≥–æ cookies: {len(cookies)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ cookies
        auth_cookies = [c for c in cookies if 'auth' in c['name'].lower() or 'session' in c['name'].lower() or 'token' in c['name'].lower()]
        if auth_cookies:
            print("üîë –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ cookies –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
            for cookie in auth_cookies[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {cookie['name']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üç™ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ cookies Daft.ie –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞")
    print("=" * 50)
    
    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Daft.ie –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ Google")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    print("4. –ó–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã...")
    
    # –ü—Ä–æ–±—É–µ–º Chrome/Chromium
    print("\nüîç –ü–æ–∏—Å–∫ cookies –≤ Chrome/Chromium...")
    cookies = extract_chrome_cookies()
    
    if not cookies:
        print("\nüîç –ü–æ–∏—Å–∫ cookies –≤ Firefox...")
        cookies = extract_firefox_cookies()
    
    if cookies:
        success = save_cookies_for_automation(cookies)
        if success:
            print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é:")
            print("python3 telegram_daft_automation.py")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å cookies")
    else:
        print("\n‚ùå Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç Daft.ie")
        print("- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä")
        print("- Cookies –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã")
        print("\n–†–µ—à–µ–Ω–∏–µ:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä")
        print("2. –í–æ–π–¥–∏—Ç–µ –Ω–∞ daft.ie —á–µ—Ä–µ–∑ Google")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    main()
