#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç URL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ daft.ie
"""

import asyncio
import re
from urllib.parse import urlencode

def build_search_url(city, max_price, min_bedrooms, page=1):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –∫–∞–∫ –≤ production_parser.py"""
    base_url = "https://www.daft.ie"
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞
    city_normalized = city.lower().replace(" ", "-")
    if "dublin" in city_normalized:
        location = "dublin-city"
    else:
        location = city_normalized
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    if page > 1:
        search_url = f"{base_url}/property-for-rent/{location}/houses?rentalPrice_to={max_price}&numBeds_from={min_bedrooms}&page={page}"
    else:
        search_url = f"{base_url}/property-for-rent/{location}/houses?rentalPrice_to={max_price}&numBeds_from={min_bedrooms}"
    
    return search_url

async def test_manual_request():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å aiohttp"""
    import aiohttp
    
    url = build_search_url("dublin", 2500, 3, 1)
    print(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {url}")
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
    }
    
    async with aiohttp.ClientSession(headers=headers) as session:
        try:
            async with session.get(url, timeout=30) as response:
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    html = await response.text()
                    print(f"‚úÖ HTML –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    rent_links = re.findall(r'href="[^"]*for-rent[^"]*"', html)
                    print(f"üè† –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É: {len(rent_links)}")
                    
                    # –ò—â–µ–º —Ü–µ–Ω—ã
                    prices = re.findall(r'‚Ç¨[\d,]+', html)
                    print(f"üí∞ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω: {len(prices)}")
                    
                    # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
                    bedrooms = re.findall(r'\d+\s*bed', html, re.IGNORECASE)
                    print(f"üõèÔ∏è –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–ø–∞–ª–µ–Ω: {len(bedrooms)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã daft.ie
                    if "daft.ie" in html:
                        print("‚úÖ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ daft.ie")
                    else:
                        print("‚ùå –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É daft.ie")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    with open('/tmp/daft_response.html', 'w', encoding='utf-8') as f:
                        f.write(html)
                    print("üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/daft_response.html")
                    
                    return len(rent_links) > 0
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False

def test_url_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL...\n")
    
    test_cases = [
        ("dublin", 2500, 3, 1),
        ("dublin", 2500, 3, 2),
        ("cork", 1500, 2, 1),
    ]
    
    for city, price, beds, page in test_cases:
        url = build_search_url(city, price, beds, page)
        print(f"üìç {city}, ‚Ç¨{price}, {beds}+ —Å–ø–∞–ª–µ–Ω, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:")
        print(f"   {url}\n")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ daft.ie\n")
    
    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL
    test_url_generation()
    
    # –¢–µ—Å—Ç 2: –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    success = await test_manual_request()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω - –Ω–∞–π–¥–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω - –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTML –≤ /tmp/daft_response.html")
    print("2. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ daft.ie –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã")

if __name__ == "__main__":
    asyncio.run(main())
