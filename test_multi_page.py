#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from production_parser import ProductionDaftParser

async def test_multi_page_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
    parser = ProductionDaftParser()
    
    print("=== –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü ===")
    
    # –¢–µ—Å—Ç 1: –û–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    print("\nüß™ –¢–µ—Å—Ç 1: –û–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ª–∏–º–∏—Ç 20)")
    results_1_page = await parser.search_properties(
        min_bedrooms=3,
        max_price=2500,
        location="dublin-city",
        limit=20,
        max_pages=1
    )
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(results_1_page)}")
    
    # –¢–µ—Å—Ç 2: –¢—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("\nüß™ –¢–µ—Å—Ç 2: –¢—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ª–∏–º–∏—Ç 60)")
    results_3_pages = await parser.search_properties(
        min_bedrooms=3,
        max_price=2500,
        location="dublin-city",
        limit=60,
        max_pages=3
    )
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å 3 —Å—Ç—Ä–∞–Ω–∏—Ü: {len(results_3_pages)}")
    
    print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
    print(f"   1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {len(results_1_page)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print(f"   3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(results_3_pages)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print(f"   –ü—Ä–∏—Ä–æ—Å—Ç: +{len(results_3_pages) - len(results_1_page)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    if len(results_3_pages) > len(results_1_page):
        print("üéâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

if __name__ == "__main__":
    asyncio.run(test_multi_page_parser())
