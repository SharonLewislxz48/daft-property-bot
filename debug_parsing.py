#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
"""

import asyncio
import aiohttp
from bs4 import BeautifulSoup

async def test_parsing_issue():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    
    # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
    url = "https://www.daft.ie/for-rent/apartment-2-bed-oneill-court-main-street-belmayne-dublin-13/5987931"
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:")
    print(f"üîó {url}")
    print("üìù –û–∂–∏–¥–∞–µ–º: 2 —Å–ø–∞–ª—å–Ω–∏ (–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è '2 Bed')")
    print("‚ùå –ü–∞—Ä—Å–µ—Ä –ø–æ–∫–∞–∑–∞–ª: 1 —Å–ø–∞–ª—å–Ω—è")
    print("="*80)
    
    async with aiohttp.ClientSession(headers=headers) as session:
        try:
            async with session.get(url) as response:
                if response.status == 200:
                    content = await response.text()
                    soup = BeautifulSoup(content, 'html.parser')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    title_elem = soup.find('title')
                    title = title_elem.get_text().strip() if title_elem else "No title"
                    print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–∏–Ω–≥
                    bedrooms = test_bedroom_parsing(title, content)
                    print(f"üõèÔ∏è –ù–∞—à –ø–∞—Ä—Å–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏–ª: {bedrooms} —Å–ø–∞–ª–µ–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º meta description
                    meta_desc = soup.find('meta', attrs={'name': 'description'})
                    if meta_desc:
                        meta_content = meta_desc.get('content', '')
                        print(f"üìã Meta description: {meta_content}")
                        meta_bedrooms = test_bedroom_parsing_title_only(meta_content)
                        print(f"üõèÔ∏è –°–ø–∞–ª—å–Ω–∏ –∏–∑ meta: {meta_bedrooms}")
                        
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {response.status}")
                    
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def test_bedroom_parsing(title: str, page_text: str) -> int:
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    bedroom_count = test_bedroom_parsing_title_only(title)
    if bedroom_count is not None:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: {bedroom_count}")
        return bedroom_count
    
    # –ü–æ—Ç–æ–º meta
    import re
    meta_patterns = [
        r'<meta[^>]*(?:name="description"|property="og:description")[^>]*content="([^"]*)"',
        r'<meta[^>]*content="([^"]*)"[^>]*(?:name="description"|property="og:description")'
    ]
    
    for pattern in meta_patterns:
        matches = re.findall(pattern, page_text, re.IGNORECASE)
        for meta_content in matches:
            bedroom_count = test_bedroom_parsing_title_only(meta_content)
            if bedroom_count is not None:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ meta: {bedroom_count}")
                return bedroom_count
    
    print(f"   ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1")
    return 1

def test_bedroom_parsing_title_only(title: str) -> int:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    import re
    
    if not title:
        return None
        
    title_lower = title.lower()
    print(f"   üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: '{title_lower}'")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Studio
    if 'studio' in title_lower or 'bedsit' in title_lower:
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: Studio (0 —Å–ø–∞–ª–µ–Ω)")
        return 0
    
    # –ù–∞—à–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
    title_patterns = [
        (r'(\d+)\s+double\s+bedroom', "Double Bedroom"),
        (r'(\d+)\s+single\s+bedroom', "Single Bedroom"),
        (r'(\d+)\s+twin\s+bedroom', "Twin Bedroom"),
        (r'(\d+)\s+bedroom(?!s)', "Bedroom (singular)"),
        (r'(\d+)\s+bed\s+(?:apartment|house|flat|property)', "Bed + type"),
        (r'(\d+)-bed\s+(?:apartment|house|flat|property)', "X-bed + type"),
        (r'(\d+)\s+bed\s+house', "Bed House"),
        (r'(\d+)\s+bed(?:\s|$|,)', "Bed (end or space)"),  # –ù–û–í–´–ô –ü–ê–¢–¢–ï–†–ù
        (r'(\d+)-bedroom', "X-bedroom"),
    ]
    
    for pattern, description in title_patterns:
        matches = re.findall(pattern, title_lower)
        if matches:
            try:
                bedroom_count = int(matches[0])
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {description} = {bedroom_count}")
                if 0 <= bedroom_count <= 10:
                    return bedroom_count
            except ValueError:
                continue
    
    print("   ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return None

if __name__ == "__main__":
    asyncio.run(test_parsing_issue())
