#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/barss/PycharmProjects/daftparser')

from parser.daft_parser import DaftParser
from parser.models import SearchFilters

async def test_updated_parser():
    print('üèÜ –¢–µ—Å—Ç–∏—Ä—É–µ–º –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –ø–∞—Ä—Å–µ—Ä —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏...')
    print('üö´ –ù–ï–¢ —Ñ–∞–ª—å—à–∏–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    print('‚úÖ –¢–û–õ–¨–ö–û –Ω–∞—Å—Ç–æ—è—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å daft.ie')
    print('=' * 70)
    
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    import logging
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞—ë–º SearchFilters
    filters = SearchFilters(
        city='Dublin',
        max_price=2500,
        min_bedrooms=3,
        areas=None  # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    )
    
    async with DaftParser() as parser:
        try:
            print(f"üîç Searching with filters: city={filters.city}, max_price={filters.max_price}, min_bedrooms={filters.min_bedrooms}")
            
            properties = await parser.search_properties(filters)
            
            print(f"üìä Parser returned {len(properties)} properties")
            
            if properties:
                print(f'üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {len(properties)} –†–ï–ê–õ–¨–ù–´–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π:')
                print()
                
                for i, prop in enumerate(properties, 1):
                    print(f'{i}. üè† {prop.title}')
                    print(f'   üí∞ ‚Ç¨{prop.price:,}/month')
                    print(f'   üìç {prop.address}')
                    print(f'   üõèÔ∏è {prop.bedrooms} —Å–ø–∞–ª–µ–Ω, {prop.bathrooms} –≤–∞–Ω–Ω–∞—è')
                    print(f'   üîó {prop.url}')
                    print()
                
                return True, properties
            else:
                print('‚ùå –†–ï–ê–õ–¨–ù–´–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
                print('üîç –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç...')
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–ø—Ä—è–º—É—é
                content = await parser.get_listings_page(filters.city)
                if content:
                    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Å—ã–ª–∫–∏
                    links = parser.extract_property_links(content)
                    print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
                    
                    if links:
                        print("üìã –ü–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏:")
                        for i, link in enumerate(links[:3], 1):
                            print(f"  {i}. {link}")
                    
                return False, []
                
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            import traceback
            traceback.print_exc()
            return False, []

if __name__ == "__main__":
    success, properties = asyncio.run(test_updated_parser())
    
    if success:
        print(f"\nüèÜ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –ü–ê–†–°–ï–† –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"‚úÖ {len(properties)} –Ω–∞—Å—Ç–æ—è—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏!")
        print("üîó –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã daft.ie")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
