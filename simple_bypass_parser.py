#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ —Ä–æ—Ç–∞—Ü–∏—é User-Agent –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
"""

import asyncio
import aiohttp
import random
import time
import json
import re
from typing import List, Dict

class SimpleBypassParser:
    def __init__(self):
        self.base_url = "https://www.daft.ie"
        self.user_agents = [
            # Desktop browsers
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0",
            
            # Mobile browsers
            "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (Android 13; Mobile; rv:109.0) Gecko/121.0 Firefox/121.0",
            "Mozilla/5.0 (Linux; Android 13; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
        ]
        
        self.referers = [
            "https://www.google.com/",
            "https://www.google.ie/",
            "https://duckduckgo.com/",
            "https://www.bing.com/",
            "https://www.daft.ie/",
        ]

    def get_random_headers(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        return {
            "User-Agent": random.choice(self.user_agents),
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.9,en-IE;q=0.8",
            "Accept-Encoding": "gzip, deflate, br",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "cross-site",
            "Sec-Fetch-User": "?1",
            "Cache-Control": "max-age=0",
            "Referer": random.choice(self.referers),
            "DNT": "1",
            "Sec-GPC": "1",
        }

    async def test_access(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ daft.ie"""
        for attempt in range(3):
            try:
                headers = self.get_random_headers()
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if attempt > 0:
                    delay = random.uniform(2, 5)
                    print(f"‚è≥ –ñ–¥–µ–º {delay:.1f} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                
                timeout = aiohttp.ClientTimeout(total=15)
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø...")
                    print(f"User-Agent: {headers['User-Agent'][:50]}...")
                    
                    async with session.get(
                        f"{self.base_url}/",
                        headers=headers,
                        allow_redirects=True
                    ) as response:
                        print(f"üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status}")
                        
                        if response.status == 200:
                            print("‚úÖ –î–æ—Å—Ç—É–ø –∫ daft.ie –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                            return True
                        elif response.status == 403:
                            print("‚ùå –í—Å–µ –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (403)")
                        elif response.status == 429:
                            print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429)")
                            await asyncio.sleep(10)
                        else:
                            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")
                            
            except asyncio.TimeoutError:
                print("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return False

    async def search_properties(self, bedrooms: int = 2, max_price: int = 2500, location: str = "dublin-city") -> List[Dict]:
        """–ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not await self.test_access():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ daft.ie")
            return []
        
        search_url = f"{self.base_url}/property-for-rent/{location}?numBeds={bedrooms}&maxPrice={max_price}"
        
        for attempt in range(3):
            try:
                headers = self.get_random_headers()
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if attempt > 0:
                    delay = random.uniform(3, 7)
                    print(f"‚è≥ –ñ–¥–µ–º {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    await asyncio.sleep(delay)
                
                timeout = aiohttp.ClientTimeout(total=30)
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    print(f"üîç –ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3)...")
                    print(f"üåê URL: {search_url}")
                    
                    async with session.get(
                        search_url,
                        headers=headers,
                        allow_redirects=True
                    ) as response:
                        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                        
                        if response.status == 200:
                            html = await response.text()
                            properties = self._extract_properties(html)
                            
                            if properties:
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä–µ–∫—Ç–æ–≤!")
                                return properties
                            else:
                                print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–æ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                                
                        elif response.status == 403:
                            print("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (403)")
                        elif response.status == 429:
                            print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É")
                            await asyncio.sleep(20)
                        else:
                            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")
                            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return []

    def _extract_properties(self, html: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏–∑ HTML"""
        properties = []
        
        try:
            # –ò—â–µ–º JSON –¥–∞–Ω–Ω—ã–µ
            json_match = re.search(r'<script[^>]*id="__NEXT_DATA__"[^>]*>(.*?)</script>', html, re.DOTALL)
            if json_match:
                json_data = json.loads(json_match.group(1))
                properties = self._extract_from_json(json_data)
                
                if properties:
                    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(properties)} –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ JSON")
                    return properties
            
            print("‚ö†Ô∏è JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return properties

    def _extract_from_json(self, json_data: dict) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON"""
        properties = []
        
        try:
            props_data = json_data.get('props', {}).get('pageProps', {})
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            listings = (
                props_data.get('listings', []) or
                props_data.get('searchResults', {}).get('listings', []) or
                props_data.get('properties', []) or
                props_data.get('results', [])
            )
            
            for item in listings:
                prop = {
                    'title': item.get('title', item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')),
                    'price': item.get('price', item.get('monthlyPrice', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')),
                    'location': item.get('location', item.get('address', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')),
                    'bedrooms': item.get('bedrooms', item.get('numBedrooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
                    'url': f"https://www.daft.ie{item.get('seoPath', '')}" if item.get('seoPath') else None
                }
                properties.append(prop)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
        
        return properties

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—Ö–æ–¥–∞"""
    parser = SimpleBypassParser()
    
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if await parser.test_access():
        print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...")
        properties = await parser.search_properties()
        
        if properties:
            print(f"\nüéâ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä–µ–∫—Ç–æ–≤:")
            print("=" * 50)
            
            for i, prop in enumerate(properties[:5], 1):
                print(f"\n{i}. {prop['title']}")
                print(f"   üí∞ –¶–µ–Ω–∞: {prop['price']}")
                print(f"   üìç –ê–¥—Ä–µ—Å: {prop['location']}")
                print(f"   üõèÔ∏è –°–ø–∞–ª—å–Ω–∏: {prop['bedrooms']}")
                if prop['url']:
                    print(f"   üîó URL: {prop['url']}")
        else:
            print("\n‚ùå –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É")

if __name__ == "__main__":
    asyncio.run(main())
