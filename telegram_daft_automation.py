#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Daft.ie –∏–∑ Telegram
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Playwright –¥–ª—è –≤–µ–±-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ pyautogui –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
"""

import asyncio
import re
import time
import json
import os
from typing import Optional, Dict, Any
from dataclasses import dataclass
from urllib.parse import urlparse, parse_qs

import pyautogui
import pyperclip
from playwright.async_api import async_playwright, Page, Browser
import tkinter as tk
from tkinter import messagebox, simpledialog
from PIL import Image, ImageTk
import requests
from io import BytesIO

@dataclass
class PropertyListing:
    """–î–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    title: str
    address: str
    price: str
    bedrooms: str
    url: str
    user: str

class DaftAutomation:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Daft.ie"""
    
    def __init__(self):
        self.browser: Optional[Browser] = None
        self.page: Optional[Page] = None
        self.playwright = None
        self.credentials_file = "daft_credentials.json"
        self.cookies_file = "daft_cookies.json"
        
    async def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.playwright = await async_playwright().start()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã Google
        self.browser = await self.playwright.chromium.launch(
            headless=False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
            args=[
                '--no-sandbox',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled',
                '--disable-extensions-except',
                '--disable-extensions',
                '--no-first-run',
                '--disable-default-apps',
                '--disable-features=TranslateUI',
                '--disable-ipc-flooding-protection',
                '--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            ]
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        context = await self.browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            locale='en-US',
            timezone_id='Europe/Dublin'
        )
        
        # –£–¥–∞–ª—è–µ–º webdriver property –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        await context.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
            
            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º plugins
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });
            
            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º languages
            Object.defineProperty(navigator, 'languages', {
                get: () => ['en-US', 'en'],
            });
        """)
        
        self.page = await context.new_page()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
        await self.load_cookies()
        
    async def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.browser:
            await self.browser.close()
        if self.playwright:
            await self.playwright.stop()
    
    async def load_cookies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö cookies"""
        if os.path.exists(self.cookies_file):
            try:
                with open(self.cookies_file, 'r') as f:
                    cookies = json.load(f)
                await self.page.context.add_cookies(cookies)
                print("‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
    
    async def save_cookies(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies"""
        try:
            cookies = await self.page.context.cookies()
            with open(self.cookies_file, 'w') as f:
                json.dump(cookies, f)
            print("‚úÖ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
    
    def load_credentials(self) -> Optional[Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if os.path.exists(self.credentials_file):
            try:
                with open(self.credentials_file, 'r') as f:
                    return json.load(f)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ credentials: {e}")
        return None
    
    def save_credentials(self, email: str, password: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            credentials = {"email": email, "password": password}
            with open(self.credentials_file, 'w') as f:
                json.dump(credentials, f)
            print("‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è credentials: {e}")
    
    async def login_to_daft(self) -> bool:
        """–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Daft.ie"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            await self.page.goto('https://www.daft.ie/login')
            await self.page.wait_for_load_state('networkidle')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã –ª–∏ —É–∂–µ
            if await self.page.locator('[data-testid="user-menu"]').count() > 0:
                print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            google_button_selectors = [
                'button:has-text("Google")',
                'button:has-text("Continue with Google")',
                '[data-testid="google-login"]',
                'button[class*="google"]',
                '.google-signin-button'
            ]
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
            google_button = None
            for selector in google_button_selectors:
                if await self.page.locator(selector).count() > 0:
                    google_button = self.page.locator(selector).first
                    break
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ Google, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
            if google_button:
                auth_method = messagebox.askyesnocancel(
                    "–ú–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    "–ù–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google.\n\n"
                    "–î–∞ - –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google\n"
                    "–ù–µ—Ç - –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ email/–ø–∞—Ä–æ–ª—å\n"
                    "–û—Ç–º–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
                )
                
                if auth_method is None:  # –û—Ç–º–µ–Ω–∞
                    return False
                elif auth_method:  # –î–∞ - Google
                    return await self._login_with_google(google_button)
                # –ù–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            
            # –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ email/–ø–∞—Ä–æ–ª—å
            return await self._login_with_email_password()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Daft.ie: {e}")
            return False
    
    async def _login_with_google(self, google_button) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google"""
        try:
            print("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ Google –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            choice = messagebox.askyesnocancel(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google",
                "Google –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã.\n\n"
                "–î–∞ - –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n"
                "–ù–µ—Ç - –û—Ç–∫—Ä—ã—Ç—å –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ\n"
                "–û—Ç–º–µ–Ω–∞ - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
            )
            
            if choice is None:  # –û—Ç–º–µ–Ω–∞
                return False
            elif choice is False:  # –ù–µ—Ç - –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
                return await self._login_with_external_browser()
            
            # –î–∞ - –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await google_button.click()
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await self.page.wait_for_timeout(3000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ Google
            page_content = await self.page.content()
            if "–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω" in page_content.lower() or "unsafe" in page_content.lower() or "blocked" in page_content.lower():
                print("‚ùå Google –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä")
                messagebox.showwarning(
                    "Google –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                    "Google –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä.\n"
                    "–ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥..."
                )
                return await self._login_with_external_browser()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            messagebox.showinfo(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google",
                "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n\n"
                "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ OK."
            )
            
            # –ñ–¥–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ Daft.ie
            max_attempts = 60  # 60 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
            for attempt in range(max_attempts):
                await self.page.wait_for_timeout(1000)
                
                current_url = self.page.url
                if 'daft.ie' in current_url:
                    if await self.page.locator('[data-testid="user-menu"]').count() > 0:
                        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google")
                        await self.save_cookies()
                        return True
            
            print("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google: {e}")
            return await self._login_with_external_browser()
    
    async def _login_with_external_browser(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä"""
        try:
            print("üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ...")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
            import webbrowser
            webbrowser.open('https://www.daft.ie/login')
            
            messagebox.showinfo(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                "1. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Daft.ie –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±—Ä–∞—É–∑–µ—Ä–µ\n"
                "2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ cookies\n"
                "3. –ù–∞–∂–º–∏—Ç–µ OK –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã"
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º–ø–æ—Ä—Ç cookies –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            import_cookies = messagebox.askyesno(
                "–ò–º–ø–æ—Ä—Ç cookies",
                "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å cookies –∏–∑ Chrome/Firefox?"
            )
            
            if import_cookies:
                success = await self._import_system_cookies()
                if success:
                    return True
            
            # –†—É—á–Ω–æ–π –≤–≤–æ–¥ cookies
            cookie_string = simpledialog.askstring(
                "–í–≤–æ–¥ cookies",
                "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞\n"
                "(F12 -> Application -> Cookies -> daft.ie):",
                show='*'
            )
            
            if cookie_string:
                success = await self._parse_and_set_cookies(cookie_string)
                if success:
                    print("‚úÖ Cookies —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
                    return True
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å cookies")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä: {e}")
            return False
    
    async def _import_system_cookies(self) -> bool:
        """–ò–º–ø–æ—Ä—Ç cookies –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Chrome
            import sqlite3
            import os
            from pathlib import Path
            
            chrome_paths = [
                Path.home() / ".config/google-chrome/Default/Cookies",
                Path.home() / ".config/chromium/Default/Cookies",
                Path.home() / "snap/chromium/common/chromium/Default/Cookies"
            ]
            
            for chrome_path in chrome_paths:
                if chrome_path.exists():
                    try:
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª cookies (Chrome –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø)
                        temp_cookies = "/tmp/temp_cookies.db"
                        import shutil
                        shutil.copy2(chrome_path, temp_cookies)
                        
                        conn = sqlite3.connect(temp_cookies)
                        cursor = conn.cursor()
                        
                        cursor.execute("""
                            SELECT name, value, domain, path, expires_utc, is_secure, is_httponly
                            FROM cookies 
                            WHERE host_key LIKE '%daft.ie%'
                        """)
                        
                        rows = cursor.fetchall()
                        if rows:
                            cookies = []
                            for row in rows:
                                cookie = {
                                    'name': row[0],
                                    'value': row[1],
                                    'domain': row[2],
                                    'path': row[3],
                                    'expires': row[4],
                                    'secure': bool(row[5]),
                                    'httpOnly': bool(row[6])
                                }
                                cookies.append(cookie)
                            
                            await self.page.context.add_cookies(cookies)
                            conn.close()
                            os.remove(temp_cookies)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                            await self.page.goto('https://www.daft.ie')
                            await self.page.wait_for_load_state('networkidle')
                            
                            if await self.page.locator('[data-testid="user-menu"]').count() > 0:
                                await self.save_cookies()
                                return True
                        
                        conn.close()
                        os.remove(temp_cookies)
                        
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ {chrome_path}: {e}")
                        continue
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö cookies: {e}")
            return False
    
    async def _parse_and_set_cookies(self, cookie_string: str) -> bool:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ cookies –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ cookies –≤ —Ñ–æ—Ä–º–∞—Ç–µ "name=value; name2=value2"
            cookies = []
            
            for cookie_pair in cookie_string.split(';'):
                cookie_pair = cookie_pair.strip()
                if '=' in cookie_pair:
                    name, value = cookie_pair.split('=', 1)
                    cookies.append({
                        'name': name.strip(),
                        'value': value.strip(),
                        'domain': '.daft.ie',
                        'path': '/'
                    })
            
            if cookies:
                await self.page.context.add_cookies(cookies)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                await self.page.goto('https://www.daft.ie')
                await self.page.wait_for_load_state('networkidle')
                
                if await self.page.locator('[data-testid="user-menu"]').count() > 0:
                    await self.save_cookies()
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cookies: {e}")
            return False
    
    async def _login_with_email_password(self) -> bool:
        """–û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ email/–ø–∞—Ä–æ–ª—å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞
            email_selectors = [
                '[data-testid="email"]',
                'input[type="email"]',
                'input[name="email"]',
                'input[placeholder*="email" i]'
            ]
            
            password_selectors = [
                '[data-testid="password"]',
                'input[type="password"]',
                'input[name="password"]',
                'input[placeholder*="password" i]'
            ]
            
            submit_selectors = [
                '[data-testid="sign-in"]',
                'button[type="submit"]',
                'button:has-text("Sign in")',
                'button:has-text("Login")',
                'button:has-text("Log in")'
            ]
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            email_field = None
            for selector in email_selectors:
                if await self.page.locator(selector).count() > 0:
                    email_field = self.page.locator(selector).first
                    break
            
            password_field = None
            for selector in password_selectors:
                if await self.page.locator(selector).count() > 0:
                    password_field = self.page.locator(selector).first
                    break
            
            submit_button = None
            for selector in submit_selectors:
                if await self.page.locator(selector).count() > 0:
                    submit_button = self.page.locator(selector).first
                    break
            
            if not email_field or not password_field:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ email/–ø–∞—Ä–æ–ª—è")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            credentials = self.load_credentials()
            if not credentials:
                email = simpledialog.askstring("–í—Ö–æ–¥ –≤ Daft.ie", "–í–≤–µ–¥–∏—Ç–µ email:")
                password = simpledialog.askstring("–í—Ö–æ–¥ –≤ Daft.ie", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", show='*')
                if not email or not password:
                    return False
                self.save_credentials(email, password)
                credentials = {"email": email, "password": password}
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
            await email_field.fill(credentials['email'])
            await password_field.fill(credentials['password'])
            
            if submit_button:
                await submit_button.click()
            else:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter
                await password_field.press('Enter')
            
            # –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            user_menu_selectors = [
                '[data-testid="user-menu"]',
                '.user-menu',
                '[data-testid="account-menu"]',
                'button:has-text("Account")',
                'button:has-text("Profile")'
            ]
            
            for selector in user_menu_selectors:
                try:
                    await self.page.wait_for_selector(selector, timeout=5000)
                    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ email/–ø–∞—Ä–æ–ª—å")
                    await self.save_cookies()
                    return True
                except:
                    continue
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ email/–ø–∞—Ä–æ–ª—å: {e}")
            return False
    
    async def open_property_listing(self, url: str) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            await self.page.goto(url)
            await self.page.wait_for_load_state('networkidle')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            title_selector = '[data-testid="address"]'
            if await self.page.locator(title_selector).count() > 0:
                print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ: {url}")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {url}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_application(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Contact Agent" –∏–ª–∏ "Apply"
            contact_selectors = [
                '[data-testid="contact-agent-button"]',
                'button:has-text("Contact")',
                'button:has-text("Apply")',
                'button:has-text("Get in touch")',
                '[data-testid="email-agent"]'
            ]
            
            contact_button = None
            for selector in contact_selectors:
                if await self.page.locator(selector).count() > 0:
                    contact_button = self.page.locator(selector).first
                    break
            
            if not contact_button:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏")
                return False
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
            await contact_button.click()
            await self.page.wait_for_timeout(2000)
            
            # –ò—â–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_selectors = [
                '[data-testid="message-textarea"]',
                'textarea[name="message"]',
                'textarea[placeholder*="message"]',
                'textarea'
            ]
            
            message_field = None
            for selector in message_selectors:
                if await self.page.locator(selector).count() > 0:
                    message_field = self.page.locator(selector).first
                    break
            
            if message_field:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                default_message = """Hello,

I am very interested in this property and would like to arrange a viewing at your earliest convenience. I am a reliable tenant with good references.

Please let me know when would be a good time for a viewing.

Best regards"""
                
                await message_field.fill(default_message)
                await self.page.wait_for_timeout(1000)
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                send_selectors = [
                    'button:has-text("Send")',
                    'button:has-text("Submit")',
                    'button[type="submit"]',
                    '[data-testid="send-message"]'
                ]
                
                for selector in send_selectors:
                    if await self.page.locator(selector).count() > 0:
                        await self.page.locator(selector).first.click()
                        await self.page.wait_for_timeout(3000)
                        print("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                        return True
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
            return False

class TelegramScanner:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, chat_name: str = "–ò—Ä–ª–∞–Ω–¥–∏—è –ø–æ–ª–Ω–∞—è —Ö—É–π–Ω—è, —É–µ–∑–∂–∞–π—Ç–µ –æ—Ç —Å—é–¥–∞"):
        self.chat_name = chat_name
        self.property_pattern = re.compile(
            r'üè†\s+(.+?)\n\nüìç\s+–ê–¥—Ä–µ—Å:\s+(.+?)\nüí∞\s+–¶–µ–Ω–∞:\s+(.+?)\nüõèÔ∏è\s+–°–ø–∞–ª—å–Ω–∏:\s+(.+?)\n\nüîó\s+.*?\((https://www\.daft\.ie/[^)]+)\)\s*\n\nüë§\s+–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\s+(.+)',
            re.MULTILINE | re.DOTALL
        )
    
    def parse_property_message(self, text: str) -> Optional[PropertyListing]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º"""
        match = self.property_pattern.search(text)
        if match:
            return PropertyListing(
                title=match.group(1).strip(),
                address=match.group(2).strip(),
                price=match.group(3).strip(),
                bedrooms=match.group(4).strip(),
                url=match.group(5).strip(),
                user=match.group(6).strip()
            )
        return None
    
    def get_selected_text(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Telegram"""
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            pyautogui.hotkey('ctrl', 'c')
            time.sleep(0.5)
            return pyperclip.paste()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return None

class PropertyConfirmationDialog:
    """–î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"""
    
    def __init__(self, property_listing: PropertyListing):
        self.property = property_listing
        self.result = False
        self.root = None
    
    def show_confirmation(self) -> bool:
        """–ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        self.root = tk.Tk()
        self.root.title("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏")
        self.root.geometry("600x500")
        self.root.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.root.geometry("+{}+{}".format(
            (self.root.winfo_screenwidth() // 2) - 300,
            (self.root.winfo_screenheight() // 2) - 250
        ))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
        info_frame = tk.Frame(self.root, bg='white', relief='ridge', bd=2)
        info_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        tk.Label(info_frame, text="üè† –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", 
                font=('Arial', 16, 'bold'), bg='white').pack(pady=10)
        
        # –î–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        details = [
            ("üè† –ù–∞–∑–≤–∞–Ω–∏–µ:", self.property.title),
            ("üìç –ê–¥—Ä–µ—Å:", self.property.address),
            ("üí∞ –¶–µ–Ω–∞:", self.property.price),
            ("üõèÔ∏è –°–ø–∞–ª—å–Ω–∏:", self.property.bedrooms),
            ("üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", self.property.user),
            ("üîó URL:", self.property.url)
        ]
        
        for label, value in details:
            frame = tk.Frame(info_frame, bg='white')
            frame.pack(fill='x', padx=20, pady=5)
            
            tk.Label(frame, text=label, font=('Arial', 10, 'bold'), 
                    bg='white', anchor='w').pack(side='left')
            tk.Label(frame, text=value, font=('Arial', 10), 
                    bg='white', anchor='w', wraplength=400).pack(side='left', padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=20)
        
        tk.Button(button_frame, text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", 
                 command=self._on_yes, bg='#4CAF50', fg='white',
                 font=('Arial', 12, 'bold'), padx=20, pady=10).pack(side='left', padx=10)
        
        tk.Button(button_frame, text="‚ùå –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
                 command=self._on_no, bg='#f44336', fg='white',
                 font=('Arial', 12, 'bold'), padx=20, pady=10).pack(side='left', padx=10)
        
        tk.Button(button_frame, text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", 
                 command=self._open_browser, bg='#2196F3', fg='white',
                 font=('Arial', 12, 'bold'), padx=20, pady=10).pack(side='left', padx=10)
        
        # –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞
        self.root.protocol("WM_DELETE_WINDOW", self._on_no)
        self.root.mainloop()
        
        return self.result
    
    def _on_yes(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∞'"""
        self.result = True
        self.root.destroy()
    
    def _on_no(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–µ—Ç'"""
        self.result = False
        self.root.destroy()
    
    def _open_browser(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        import webbrowser
        webbrowser.open(self.property.url)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Daft.ie")
    print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —á–∞—Ç")
    print("2. –í—ã–¥–µ–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º")
    print("3. –ù–∞–∂–º–∏—Ç–µ Enter –≤ —ç—Ç–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
    print("4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–Ω–∞—Ö")
    print("-" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    scanner = TelegramScanner()
    automation = DaftAutomation()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        await automation.init_browser()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç
        print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        login_success = await automation.login_to_daft()
        if not login_success:
            print("‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            print("üí° –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
            
            continue_without_login = messagebox.askyesno(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?",
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?\n"
                "(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞)"
            )
            
            if not continue_without_login:
                return
        else:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        while True:
            input("\nüîç –í—ã–¥–µ–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Telegram
            text = scanner.get_selected_text()
            if not text:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                continue
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            property_listing = scanner.parse_property_message(text)
            if not property_listing:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
                print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                print(text[:200] + "..." if len(text) > 200 else text)
                continue
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {property_listing.title}")
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            if not await automation.open_property_listing(property_listing.url):
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
                continue
            
            # –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            dialog = PropertyConfirmationDialog(property_listing)
            if dialog.show_confirmation():
                print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...")
                
                if await automation.send_application():
                    print("üéâ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
            else:
                print("‚è≠Ô∏è –ó–∞—è–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
            continue_work = messagebox.askyesno("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?")
            if not continue_work:
                break
    
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await automation.close_browser()
        print("üëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import pyautogui
        import pyperclip
        import tkinter
        from playwright.async_api import async_playwright
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("pip install playwright pyautogui pyperclip pillow requests")
        print("playwright install chromium")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
