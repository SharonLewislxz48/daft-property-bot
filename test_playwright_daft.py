#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–∞ daft.ie —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright
"""

import asyncio
from playwright.async_api import async_playwright
import re

async def test_daft_with_playwright():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–∞ daft.ie —Å –±—Ä–∞—É–∑–µ—Ä–æ–º"""
    
    async with async_playwright() as p:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        browser = await p.chromium.launch(headless=True)  # headless=False –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        page = await browser.new_page()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º User-Agent
        await page.set_extra_http_headers({
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ 3+ —Å–ø–∞–ª—å–Ω–∏ –¥–æ ‚Ç¨2500 —Å Playwright")
        print("="*60)
        
        # URL —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        url = "https://www.daft.ie/property-for-rent/dublin?rentalPrice_to=2500&numBeds_from=3"
        print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: {url}")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto(url, wait_until='networkidle')
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await page.wait_for_timeout(3000)  # 3 —Å–µ–∫—É–Ω–¥—ã
            
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title = await page.title()
            print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            page_text = await page.inner_text('body')
            
            # –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_patterns = [
                r'(\d+)\s+propert(?:y|ies)\s+found',
                r'(\d+)\s+result',
                r'showing\s+(\d+)',
                r'(\d+)\s+properties\s+to\s+rent'
            ]
            
            for pattern in result_patterns:
                matches = re.findall(pattern, page_text, re.IGNORECASE)
                if matches:
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {matches[0]}")
                    break
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            
            # –°–ø–æ—Å–æ–± 1: –ü–æ href —Å–æ–¥–µ—Ä–∂–∞—â–∏–º for-rent
            links1 = await page.evaluate('''() => {
                const links = Array.from(document.querySelectorAll('a[href*="for-rent"]'));
                return links
                    .map(link => link.href)
                    .filter(href => href.includes('/for-rent/') && href.split('/').length >= 6)
                    .slice(0, 10);
            }''')
            
            print(f"\nüîó –°–ø–æ—Å–æ–± 1 - —Å—Å—ã–ª–∫–∏ —Å 'for-rent': {len(links1)}")
            for i, link in enumerate(links1[:3]):
                print(f"  {i+1}. {link}")
            
            # –°–ø–æ—Å–æ–± 2: –ü–æ data-testid
            links2 = await page.evaluate('''() => {
                const elements = document.querySelectorAll('[data-testid*="property"], [data-testid*="listing"], [data-testid*="card"]');
                const links = [];
                elements.forEach(el => {
                    const link = el.querySelector('a') || el.closest('a');
                    if (link && link.href.includes('for-rent')) {
                        links.push(link.href);
                    }
                });
                return [...new Set(links)].slice(0, 10);
            }''')
            
            print(f"\nüîó –°–ø–æ—Å–æ–± 2 - —á–µ—Ä–µ–∑ data-testid: {len(links2)}")
            for i, link in enumerate(links2[:3]):
                print(f"  {i+1}. {link}")
            
            # –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º
            links3 = await page.evaluate('''() => {
                const selectors = [
                    '[class*="card"] a[href*="for-rent"]',
                    '[class*="property"] a[href*="for-rent"]', 
                    '[class*="listing"] a[href*="for-rent"]',
                    '[class*="item"] a[href*="for-rent"]'
                ];
                
                const links = [];
                selectors.forEach(selector => {
                    const elements = document.querySelectorAll(selector);
                    elements.forEach(el => {
                        if (el.href && el.href.includes('/for-rent/')) {
                            links.push(el.href);
                        }
                    });
                });
                
                return [...new Set(links)].slice(0, 10);
            }''')
            
            print(f"\nüîó –°–ø–æ—Å–æ–± 3 - —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å—ã: {len(links3)}")
            for i, link in enumerate(links3[:3]):
                print(f"  {i+1}. {link}")
            
            # –°–ø–æ—Å–æ–± 4: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
            all_property_links = await page.evaluate('''() => {
                const allLinks = document.querySelectorAll('a');
                const propertyLinks = [];
                
                allLinks.forEach(link => {
                    const href = link.href;
                    if (href && href.includes('/for-rent/') && href.split('/').length >= 6) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
                        if (!href.includes('?') || href.includes('/property-for-rent/')) {
                            propertyLinks.push(href);
                        }
                    }
                });
                
                return [...new Set(propertyLinks)];
            }''')
            
            print(f"\nüîó –°–ø–æ—Å–æ–± 4 - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π: {len(all_property_links)}")
            for i, link in enumerate(all_property_links[:5]):
                print(f"  {i+1}. {link}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            if all_property_links:
                test_link = all_property_links[0]
                print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:")
                print(f"üîó {test_link}")
                
                await page.goto(test_link, wait_until='networkidle')
                await page.wait_for_timeout(2000)
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                property_title = await page.title()
                print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {property_title}")
                
                # –ò—â–µ–º —Ü–µ–Ω—É
                price_text = await page.evaluate('''() => {
                    const priceElements = document.querySelectorAll('*');
                    for (let el of priceElements) {
                        const text = el.textContent;
                        if (text && text.includes('‚Ç¨') && text.includes('month')) {
                            return text.trim();
                        }
                    }
                    return '–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
                }''')
                
                print(f"üí∞ –¶–µ–Ω–∞: {price_text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                if '3 bed' in property_title.lower() or '3 bedroom' in property_title.lower():
                    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: 3+ —Å–ø–∞–ª—å–Ω–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
                elif 'bed' in property_title.lower():
                    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–ø–∞–ª–µ–Ω: {property_title}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(test_daft_with_playwright())
