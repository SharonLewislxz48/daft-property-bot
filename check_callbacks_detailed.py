#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
"""

import os
import sys
import re
from pathlib import Path

def get_callback_data_from_keyboards():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ callback_data –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    keyboard_file = Path("bot/enhanced_keyboards.py")
    if not keyboard_file.exists():
        return set()
    
    callback_data = set()
    
    with open(keyboard_file, 'r', encoding='utf-8') as f:
        content = f.read()
        
        # –ò—â–µ–º –≤—Å–µ callback_data –≤ InlineKeyboardButton
        pattern = r'callback_data=["\']([^"\']+)["\']'
        matches = re.findall(pattern, content)
        
        for match in matches:
            callback_data.add(match)
            
    return callback_data

def get_registered_patterns():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ enhanced_main.py"""
    main_file = Path("enhanced_main.py")
    if not main_file.exists():
        return []
    
    patterns = []
    
    with open(main_file, 'r', encoding='utf-8') as f:
        content = f.read()
        
        # –ò—â–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        exact_pattern = r'F\.data\s*==\s*["\']([^"\']+)["\']'
        exact_matches = re.findall(exact_pattern, content)
        
        for match in exact_matches:
            patterns.append(('exact', match))
        
        # –ò—â–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å startswith
        startswith_pattern = r'F\.data\.startswith\(["\']([^"\']+)["\']'
        startswith_matches = re.findall(startswith_pattern, content)
        
        for match in startswith_matches:
            patterns.append(('startswith', match))
    
    return patterns

def check_coverage(callback_data, patterns):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ callback_data –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
    covered = set()
    uncovered = set()
    
    for data in callback_data:
        is_covered = False
        
        for pattern_type, pattern in patterns:
            if pattern_type == 'exact' and data == pattern:
                is_covered = True
                break
            elif pattern_type == 'startswith' and data.startswith(pattern):
                is_covered = True
                break
        
        if is_covered:
            covered.add(data)
        else:
            uncovered.add(data)
    
    return covered, uncovered

def main():
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê CALLBACK-–û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    callback_data = get_callback_data_from_keyboards()
    patterns = get_registered_patterns()
    
    print(f"üìä –í—Å–µ–≥–æ callback_data –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö: {len(callback_data)}")
    print(f"üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    print("üéØ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
    print("-" * 30)
    for pattern_type, pattern in patterns:
        if pattern_type == 'exact':
            print(f"  ‚úì {pattern} (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)")
        else:
            print(f"  ‚úì {pattern}* (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å)")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    covered, uncovered = check_coverage(callback_data, patterns)
    
    print(f"‚úÖ –ü–æ–∫—Ä—ã—Ç—ã–µ callback_data: {len(covered)}")
    print(f"‚ùå –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ callback_data: {len(uncovered)}")
    print()
    
    if uncovered:
        print("‚ö†Ô∏è –ù–ï–ü–û–ö–†–´–¢–´–ï CALLBACK_DATA:")
        print("-" * 30)
        for data in sorted(uncovered):
            print(f"   ‚Ä¢ {data}")
        print()
    
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
    print("-" * 30)
    for data in sorted(callback_data):
        is_covered = data in covered
        status = "‚úÖ" if is_covered else "‚ùå"
        print(f"  {status} {data}")
    
    print()
    if uncovered:
        print("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ - –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
        return False
    else:
        print("üéâ –í–°–ï CALLBACK_DATA –ü–û–ö–†–´–¢–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê–ú–ò!")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
