#!/usr/bin/env python3
"""
–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å 3 —Å–ø–∞–ª—å–Ω—è–º–∏
"""

import asyncio
import aiohttp
from bs4 import BeautifulSoup
import re

async def check_specific_property():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å 3 —Å–ø–∞–ª—å–Ω—è–º–∏"""
    
    # URL –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∏–¥–µ–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–µ—Å—Ç–µ
    url = "https://www.daft.ie/for-rent/apartment-3-bedroom-apartment-occu-hayfield-churchview-road-killiney-co-dublin/5900759"
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å 3 —Å–ø–∞–ª—å–Ω—è–º–∏:")
    print(f"üîó {url}")
    print("="*80)
    
    async with aiohttp.ClientSession(headers=headers) as session:
        try:
            async with session.get(url) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    content = await response.text()
                    soup = BeautifulSoup(content, 'html.parser')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    title_elem = soup.find('title')
                    title = title_elem.get_text().strip() if title_elem else "No title"
                    print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∞–ª—å–Ω–∏ –Ω–∞—à–∏–º —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
                    bedrooms = extract_bedrooms_advanced(title, soup.get_text())
                    print(f"üõèÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–ø–∞–ª–µ–Ω: {bedrooms}")
                    
                    # –ò—â–µ–º —Ü–µ–Ω—É
                    price_elements = soup.find_all(string=lambda text: text and '‚Ç¨' in text and 'month' in text)
                    if price_elements:
                        price_text = price_elements[0].strip()
                        print(f"üí∞ –¶–µ–Ω–∞: {price_text}")
                    
                elif response.status == 404:
                    print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ (404)")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {response.status}")
                    
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def extract_bedrooms_advanced(title: str, page_text: str) -> int:
    """–¢–æ—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∞–ª–µ–Ω"""
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    bedroom_count = extract_from_title_advanced(title)
    if bedroom_count is not None:
        return bedroom_count
    
    # –ï—Å–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏—â–µ–º –≤ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
    meta_patterns = [
        r'<meta[^>]*(?:name="description"|property="og:description")[^>]*content="([^"]*)"',
        r'<meta[^>]*content="([^"]*)"[^>]*(?:name="description"|property="og:description")'
    ]
    
    for pattern in meta_patterns:
        matches = re.findall(pattern, page_text, re.IGNORECASE)
        for meta_content in matches:
            bedroom_count = extract_from_title_advanced(meta_content)
            if bedroom_count is not None:
                return bedroom_count
    
    return 1

def extract_from_title_advanced(title: str) -> int:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    title_lower = title.lower()
    
    print(f"   üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {title_lower}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Studio
    if 'studio' in title_lower or 'bedsit' in title_lower:
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: Studio (0 —Å–ø–∞–ª–µ–Ω)")
        return 0
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ daft.ie (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    title_patterns = [
        (r'(\d+)\s+double\s+bedroom', "Double Bedroom"),
        (r'(\d+)\s+single\s+bedroom', "Single Bedroom"),
        (r'(\d+)\s+twin\s+bedroom', "Twin Bedroom"),
        (r'(\d+)\s+bedroom(?!s)', "Bedroom (singular)"),
        (r'(\d+)\s+bed\s+(?:apartment|house|flat|property)', "Bed + type"),
        (r'(\d+)-bed\s+(?:apartment|house|flat|property)', "X-bed + type"),
        (r'(\d+)-bedroom', "X-bedroom"),
    ]
    
    for pattern, description in title_patterns:
        matches = re.findall(pattern, title_lower)
        if matches:
            try:
                bedroom_count = int(matches[0])
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {description} = {bedroom_count}")
                # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã (–æ—Ç 0 –¥–æ 10 —Å–ø–∞–ª–µ–Ω)
                if 0 <= bedroom_count <= 10:
                    return bedroom_count
            except ValueError:
                continue
    
    print("   ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return None

if __name__ == "__main__":
    asyncio.run(check_specific_property())
