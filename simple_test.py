#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

async def test_simple_fetch():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        print("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã daft.ie...")
        
        from parser.daft_parser import DaftParser
        
        async with DaftParser() as parser:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            url = "https://www.daft.ie"
            print(f"   –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º: {url}")
            
            html = await parser._fetch_page(url)
            
            if html:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                if "daft" in html.lower():
                    print("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ (–Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç 'daft')")
                else:
                    print("‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º")
                    
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
                search_url = "https://www.daft.ie/property-for-rent"
                print(f"\n   –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞: {search_url}")
                
                search_html = await parser._fetch_page(search_url)
                if search_html:
                    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {len(search_html)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    from bs4 import BeautifulSoup
                    soup = BeautifulSoup(search_html, 'html.parser')
                    
                    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    links = soup.find_all("a", href=True)
                    property_links = [link for link in links if "for-rent" in str(link.get("href", ""))]
                    
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {len(property_links)}")
                    
                    if property_links:
                        print("   –ü–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏:")
                        for i, link in enumerate(property_links[:3], 1):
                            href = link.get("href", "")
                            text = link.get_text(strip=True)[:50]
                            print(f"   {i}. {text}... -> {href}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_simple_fetch())
