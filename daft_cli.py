#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –ø–∞—Ä—Å–µ—Ä–∞ daft.ie
"""

import argparse
import asyncio
import sys
from production_daft_parser import ProductionDaftParser

def create_parser():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='–ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ daft.ie',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python daft_cli.py --min-bedrooms 3 --max-price 2500 --location dublin
  python daft_cli.py --min-bedrooms 2 --max-price 3000 --location cork --max-pages 5
  python daft_cli.py --help
        """
    )
    
    parser.add_argument(
        '--min-bedrooms',
        type=int,
        default=3,
        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)'
    )
    
    parser.add_argument(
        '--max-price',
        type=int,
        default=2500,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ –µ–≤—Ä–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2500)'
    )
    
    parser.add_argument(
        '--location',
        type=str,
        default='dublin',
        help='–õ–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: dublin)'
    )
    
    parser.add_argument(
        '--property-type',
        choices=['all', 'houses', 'apartments'],
        default='all',
        help='–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all)'
    )
    
    parser.add_argument(
        '--max-pages',
        type=int,
        default=5,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ö–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)'
    )
    
    parser.add_argument(
        '--log-level',
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
        default='INFO',
        help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: INFO)'
    )
    
    parser.add_argument(
        '--output-format',
        choices=['summary', 'detailed'],
        default='summary',
        help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: summary)'
    )
    
    return parser

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser = create_parser()
    args = parser.parse_args()
    
    print("üöÄ DAFT.IE PARSER CLI")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    daft_parser = ProductionDaftParser(log_level=args.log_level)
    
    # –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    print(f"üéØ –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–ò–°–ö–ê:")
    print(f"   –ú–∏–Ω–∏–º—É–º —Å–ø–∞–ª–µ–Ω: {args.min_bedrooms}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ‚Ç¨{args.max_price}")
    print(f"   –õ–æ–∫–∞—Ü–∏—è: {args.location}")
    print(f"   –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {args.property_type}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: {args.max_pages}")
    print(f"   –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: {args.log_level}")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    try:
        results = await daft_parser.search_all_properties(
            min_bedrooms=args.min_bedrooms,
            max_price=args.max_price,
            location=args.location,
            property_type=args.property_type,
            max_pages=args.max_pages
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 50)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 50)
        
        if args.output_format == 'summary':
            summary = daft_parser.format_results_summary(results)
            print(summary)
        else:
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
            for i, prop in enumerate(results, 1):
                print(f"\n{i}. {prop.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"   üí∞ –¶–µ–Ω–∞: ‚Ç¨{prop['price']}" if prop.get('price') else "   üí∞ –¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                print(f"   üõèÔ∏è  –°–ø–∞–ª—å–Ω–∏: {prop['bedrooms']}" if prop.get('bedrooms') else "   üõèÔ∏è  –°–ø–∞–ª—å–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                print(f"   üè† –¢–∏–ø: {prop.get('property_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"   üìç –õ–æ–∫–∞—Ü–∏—è: {prop.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                if prop.get('description'):
                    print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {prop['description'][:100]}...")
                print(f"   üîó URL: {prop['url']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        search_params = {
            'min_bedrooms': args.min_bedrooms,
            'max_price': args.max_price,
            'location': args.location,
            'property_type': args.property_type,
            'max_pages': args.max_pages
        }
        
        filename = daft_parser.save_results(results, search_params)
        print(f"\nüíæ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
