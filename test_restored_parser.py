#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ production_parser.py
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from production_parser import ProductionDaftParser

async def test_production_parser():
    """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ production_parser.py...")
    
    try:
        async with ProductionDaftParser() as parser:
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ –±–æ—Ç–µ
            properties = await parser.search_properties(
                min_bedrooms=3,
                max_price=2500,
                location='dublin-city',
                limit=5,
                max_pages=1
            )
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            if properties:
                print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
                for i, prop in enumerate(properties[:3], 1):
                    print(f"  {i}. {prop['title']}")
                    print(f"     üí∞ ‚Ç¨{prop['price']}/–º–µ—Å | üõèÔ∏è {prop['bedrooms']} —Å–ø–∞–ª–µ–Ω")
                    print(f"     üîó {prop['url']}")
                    print()
                
                print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø—Ä–æ–±–ª–µ–º–∞ '0 –æ–±—ä—è–≤–ª–µ–Ω–∏–π' —Ä–µ—à–µ–Ω–∞!")
                return True
            else:
                print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    success = await test_production_parser()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        print("üìä –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        print("üöÄ –ú–æ–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        print("üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

if __name__ == "__main__":
    asyncio.run(main())
