#!/usr/bin/env python3
"""
–ò–¢–û–ì–û–í–´–ô –¢–ï–°–¢ - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –ø–∞—Ä—Å–µ—Ä daft.ie
–¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∞–ª–µ–Ω
"""

import asyncio
from parser.daft_parser import DaftParser
from parser.models import SearchFilters

async def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    
    print("üéâ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ - –ü–∞—Ä—Å–µ—Ä daft.ie")
    print("="*60)
    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –†–ï–ê–õ–¨–ù–´–ï (–±–µ–∑ —Ñ–∞–ª—å—à–∏–≤—ã—Ö)")
    print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∞–ª–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–û")
    print("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è daft.ie —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è —Ç–æ—á–Ω–æ")
    print()
    
    parser = DaftParser()
    
    # –¢–µ—Å—Ç 1: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    print("üîç –¢–ï–°–¢ 1: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (1+ —Å–ø–∞–ª—å–Ω—è, –¥–æ ‚Ç¨3000)")
    print("-" * 60)
    
    filters = SearchFilters(
        city="Dublin",
        max_price=3000,
        min_bedrooms=1
    )
    
    properties = await parser.search_properties(filters)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    for i, prop in enumerate(properties[:5], 1):
        print(f"{i}. üè† {prop.title[:55]}...")
        print(f"   üí∞ ‚Ç¨{prop.price:,}/month | üõèÔ∏è {prop.bedrooms} —Å–ø–∞–ª–µ–Ω")
        print(f"   üìç {prop.address}")
        print(f"   üîó {prop.url}")
        print()
    
    if len(properties) > 5:
        print(f"... –∏ –µ—â—ë {len(properties) - 5} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    print("\n" + "="*60)
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ 2+ —Å–ø–∞–ª–µ–Ω
    print("üîç –¢–ï–°–¢ 2: 2+ —Å–ø–∞–ª—å–Ω–∏ –¥–æ ‚Ç¨3500")
    print("-" * 60)
    
    filters.min_bedrooms = 2
    filters.max_price = 3500
    
    properties = await parser.search_properties(filters)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å 2+ —Å–ø–∞–ª—å–Ω—è–º–∏")
    
    for i, prop in enumerate(properties, 1):
        print(f"{i}. {prop.title[:50]}...")
        print(f"   üí∞ ‚Ç¨{prop.price:,} | üõèÔ∏è {prop.bedrooms} —Å–ø–∞–ª–µ–Ω")
        print()
    
    print("\n" + "="*60)
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∞–ª–µ–Ω
    print("üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–´–• –ö–í–ê–†–¢–ò–†")
    print("-" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    all_filters = SearchFilters(city="Dublin", max_price=10000, min_bedrooms=0)
    all_properties = await parser.search_properties(all_filters)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ø–∞–ª—å–Ω—è–º
    bedroom_groups = {}
    for prop in all_properties:
        bedrooms = prop.bedrooms
        if bedrooms not in bedroom_groups:
            bedroom_groups[bedrooms] = []
        bedroom_groups[bedrooms].append(prop)
    
    for bedrooms in sorted(bedroom_groups.keys()):
        props = bedroom_groups[bedrooms]
        prices = [p.price for p in props]
        min_price = min(prices)
        max_price = max(prices)
        
        print(f"üõèÔ∏è {bedrooms} —Å–ø–∞–ª–µ–Ω: {len(props)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        print(f"   üí∞ –¶–µ–Ω—ã: ‚Ç¨{min_price:,} - ‚Ç¨{max_price:,}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ ‚Ç¨2500
        affordable = [p for p in props if p.price <= 2500]
        if affordable:
            print(f"   üü¢ –î–æ ‚Ç¨2,500: {len(affordable)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 2 –ø—Ä–∏–º–µ—Ä–∞
            for example in affordable[:2]:
                print(f"      ‚Ä¢ {example.title[:40]}... - ‚Ç¨{example.price:,}")
        else:
            print(f"   üî¥ –î–æ ‚Ç¨2,500: –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        print()
    
    await parser.close()
    
    print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("="*60)
    print("‚Ä¢ ‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏")
    print("‚Ä¢ ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¢–û–ß–ù–û")
    print("‚Ä¢ ‚úÖ –í—Å–µ URL –≤–µ–¥—É—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è daft.ie")
    print("‚Ä¢ ‚úÖ –§–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚Ä¢ ‚úÖ –¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è daft.ie (Bedroom, Bed, Studio) —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è")
    print()
    print("üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if bedroom_groups.get(1, []):
        affordable_1bed = [p for p in bedroom_groups[1] if p.price <= 2500]
        print(f"‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä —Å 1 —Å–ø–∞–ª—å–Ω–µ–π –¥–æ ‚Ç¨2,500: {len(affordable_1bed)}")
    
    if bedroom_groups.get(2, []):
        affordable_2bed = [p for p in bedroom_groups[2] if p.price <= 2500]
        print(f"‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä —Å 2 —Å–ø–∞–ª—å–Ω—è–º–∏ –¥–æ ‚Ç¨2,500: {len(affordable_2bed)}")
    
    three_plus = sum(len(props) for bedrooms, props in bedroom_groups.items() if bedrooms >= 3)
    if three_plus > 0:
        print(f"‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏: {three_plus} (–Ω–æ –≤—Å–µ –¥–æ—Ä–æ–∂–µ ‚Ç¨2,500)")
    else:
        print("‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏: —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")

if __name__ == "__main__":
    asyncio.run(main())
