#!/usr/bin/env python3
"""
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
"""
import asyncio
import logging
import signal
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from bot.handlers import TelegramBot
from database.database import Database
from parser.daft_parser import DaftParser
from parser.demo_parser import DemoParser  # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º!
from config.settings import settings
from utils.helpers import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging(settings.LOG_LEVEL)
logger = logging.getLogger(__name__)

class StrictDaftBot:
    """Daft.ie Telegram Bot - –°–¢–†–û–ì–ò–ô –†–ï–ñ–ò–ú (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
    
    def __init__(self):
        self.bot = None
        self.database = None
        self.parser = None
        self.is_running = False
        
        # –°–¢–†–û–ì–ò–ô –†–ï–ñ–ò–ú
        self.strict_mode = True
        self.demo_mode_disabled = True
        
        logger.info("üéØ StrictDaftBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            logger.info("=" * 50)
            logger.info("üéØ Daft.ie Telegram Bot - –°–¢–†–û–ì–ò–ô –†–ï–ñ–ò–ú")
            logger.info("üö´ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –û–¢–ö–õ–Æ–ß–ï–ù–´")
            logger.info("üåê –†–∞–±–æ—Ç–∞–µ–º –¢–û–õ–¨–ö–û —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            logger.info("=" * 50)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not settings.validate():
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞")
            
            logger.info("Bot configuration:")
            logger.info(f"- Chat ID: {settings.CHAT_ID}")
            logger.info(f"- Admin User ID: {settings.ADMIN_USER_ID}")
            logger.info(f"- Update Interval: {settings.UPDATE_INTERVAL} seconds")
            logger.info(f"- Database Path: {settings.DB_PATH}")
            logger.info("üéØ - STRICT MODE: –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.database = Database(settings.DB_PATH)
            await self.database.init_database()
            
            # –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä, –¥–µ–º–æ –æ—Ç–∫–ª—é—á–µ–Ω
            self.parser = DaftParser()
            logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä (–¥–µ–º–æ –æ—Ç–∫–ª—é—á–µ–Ω)")
            
            self.bot = TelegramBot(
                token=settings.TELEGRAM_BOT_TOKEN,
                chat_id=settings.CHAT_ID,
                admin_user_id=settings.ADMIN_USER_ID,
                database=self.database,
                parser=self.parser,
                demo_parser=None,  # –ù–ï –ø–µ—Ä–µ–¥–∞—ë–º –¥–µ–º–æ-–ø–∞—Ä—Å–µ—Ä!
                update_interval=settings.UPDATE_INTERVAL
            )
            
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.bot.start()
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–ø—É—Å–∫–∞: {e}")
            logger.error("üö´ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤ —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        self.is_running = False
        
        if self.bot:
            await self.bot.stop()
        
        if self.parser and hasattr(self.parser, 'close'):
            await self.parser.close()
        
        if self.database and hasattr(self.database, 'close'):
            await self.database.close()
        
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
daft_bot = None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global daft_bot
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        daft_bot = StrictDaftBot()
        await daft_bot.start()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while daft_bot.is_running:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if daft_bot:
            await daft_bot.stop()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    if daft_bot:
        daft_bot.is_running = False

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Daft.ie Telegram Bot –≤ –°–¢–†–û–ì–û–ú –†–ï–ñ–ò–ú–ï...")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚úã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        logger.info("üëã Application shutdown complete")
