#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –ø–∞—Ä—Å–µ—Ä–µ –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from production_parser import ProductionDaftParser
from database.enhanced_database import EnhancedDatabase

async def test_duplicate_removal():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö"""
    
    print("üß™ –¢–ï–°–¢ –£–î–ê–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    test_properties = [
        {
            "url": "https://www.daft.ie/for-rent/house-1-test-street-dublin/123456",
            "title": "1 Test Street, Dublin",
            "price": 2000,
            "bedrooms": 3,
            "location": "Dublin",
            "property_type": "House"
        },
        {
            "url": "https://www.daft.ie/for-rent/house-1-test-street-dublin/123456",  # –î—É–±–ª–∏–∫–∞—Ç –ø–æ URL
            "title": "1 Test Street, Dublin", 
            "price": 2000,
            "bedrooms": 3,
            "location": "Dublin",
            "property_type": "House"
        },
        {
            "url": "https://www.daft.ie/for-rent/house-2-test-street-dublin/123457",
            "title": "2 Test Street, Dublin",
            "price": 2100,
            "bedrooms": 3,
            "location": "Dublin",
            "property_type": "House"
        },
        {
            # –î—É–±–ª–∏–∫–∞—Ç –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–Ω–µ—Ç URL)
            "title": "2 Test Street, Dublin",
            "price": 2100,
            "bedrooms": 3,
            "location": "Dublin",
            "property_type": "House"
        },
        {
            "url": "https://www.daft.ie/for-rent/house-3-test-street-dublin/123458",
            "title": "3 Test Street, Dublin",
            "price": 2200,
            "bedrooms": 4,
            "location": "Dublin",
            "property_type": "House"
        }
    ]
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(test_properties)}")
    print("   - 2 –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ URL")
    print("   - 1 –¥—É–±–ª–∏–∫–∞—Ç –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º")
    print("   - –û–∂–∏–¥–∞–µ–º: 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö\n")
    
    # –¢–µ—Å—Ç 1: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –ø–∞—Ä—Å–µ—Ä–µ
    print("üîß –¢–ï–°–¢ 1: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –ø–∞—Ä—Å–µ—Ä–µ")
    parser = ProductionDaftParser()
    unique_properties = parser._remove_duplicates(test_properties)
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(unique_properties)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    for i, prop in enumerate(unique_properties, 1):
        print(f"   {i}. {prop['title']} - ‚Ç¨{prop['price']} - {prop['bedrooms']} —Å–ø–∞–ª–µ–Ω")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print("\nüóÑÔ∏è –¢–ï–°–¢ 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    db = EnhancedDatabase("data/test_duplicates.db")
    await db.init_database()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ
    test_user_id = 12345
    search_params = {"min_bedrooms": 3, "max_price": 2500, "regions": ["dublin-city"]}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    await db.add_property_to_history(test_user_id, unique_properties[0], search_params)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    filtered_properties = await db.filter_recent_duplicates(unique_properties, hours=24)
    
    print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(filtered_properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_properties = await db.get_new_properties(test_user_id, filtered_properties, search_params)
    
    print(f"‚úÖ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(new_properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    print("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    for i, prop in enumerate(new_properties, 1):
        print(f"   {i}. {prop['title']} - ‚Ç¨{prop['price']} - {prop['bedrooms']} —Å–ø–∞–ª–µ–Ω")
    
    print(f"\nüéØ –ò–¢–û–ì–û: –ò–∑ {len(test_properties)} –∏—Å—Ö–æ–¥–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—É—á–∏–ª–∏ {len(new_properties)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏ –Ω–æ–≤—ã—Ö")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã
    import os
    if os.path.exists("data/test_duplicates.db"):
        os.remove("data/test_duplicates.db")
        print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(test_duplicate_removal())
