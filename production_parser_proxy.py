#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –†–ï–®–ï–ù–ò–ï: –ü–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –ø—Ä–æ–∫—Å–∏ API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ daft.ie –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã
"""

import asyncio
import aiohttp
import json
import re
from typing import List, Dict, Any, Optional
import logging

class ProxyDaftParser:
    """
    –ü–∞—Ä—Å–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ API –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    """
    
    def __init__(self):
        self.base_url = "https://www.daft.ie"
        self.session = None
        self._should_close_session = False
    
    async def __aenter__(self):
        if not self.session:
            self.session = aiohttp.ClientSession()
            self._should_close_session = True
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session and self._should_close_session:
            await self.session.close()
            self.session = None
            self._should_close_session = False
    
    async def search_properties(self, min_bedrooms: int = 1, max_price: int = 5000, 
                              location: str = 'dublin-city', limit: int = 10, max_pages: int = 3) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–∏—Å—ã
        """
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        should_close_session = False
        if not self.session:
            self.session = aiohttp.ClientSession()
            should_close_session = True
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–∏—Å—ã
            for proxy_method in [self._try_scrapfly, self._try_scraperapi, self._try_direct_fallback]:
                try:
                    logging.info(f"–ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: {proxy_method.__name__}")
                    results = await proxy_method(min_bedrooms, max_price, location, limit, max_pages)
                    if results:
                        logging.info(f"‚úÖ –ú–µ—Ç–æ–¥ {proxy_method.__name__} —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–∞–π–¥–µ–Ω–æ {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                        return results
                except Exception as e:
                    logging.warning(f"‚ùå –ú–µ—Ç–æ–¥ {proxy_method.__name__} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logging.warning("üö® –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return self._generate_test_data(min_bedrooms, max_price, location, limit)
            
        finally:
            if should_close_session and self.session:
                await self.session.close()
                self.session = None
    
    async def _try_scrapfly(self, min_bedrooms: int, max_price: int, location: str, limit: int, max_pages: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ScrapFly API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
        """
        # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        raise Exception("ScrapFly —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á")
    
    async def _try_scraperapi(self, min_bedrooms: int, max_price: int, location: str, limit: int, max_pages: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ScraperAPI (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
        """
        # –≠—Ç–æ —Ç–æ–∂–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        raise Exception("ScraperAPI —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á")
    
    async def _try_direct_fallback(self, min_bedrooms: int, max_price: int, location: str, limit: int, max_pages: int) -> List[Dict[str, Any]]:
        """
        –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–ø—Ä—è–º—É—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–±—Ö–æ–¥–∞–º–∏
        """
        # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –¥–æ–º–µ–Ω—ã –∏–ª–∏ –º–µ—Ç–æ–¥—ã
        raise Exception("–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
    
    def _generate_test_data(self, min_bedrooms: int, max_price: int, location: str, limit: int) -> List[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–≥–¥–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        –¢–û–õ–¨–ö–û –î–õ–Ø –û–¢–õ–ê–î–ö–ò!
        """
        test_properties = []
        
        base_properties = [
            {
                'title': f'üè† Test Property {i+1} - {min_bedrooms} Bed Apartment',
                'price': min(max_price - 100, 2000 + i * 100),
                'bedrooms': min_bedrooms,
                'location': location.replace('-', ' ').title(),
                'property_type': 'Apartment',
                'url': f'https://www.daft.ie/test-property-{i+1}',
                'date_published': '2024-01-01',
                'images': [f'https://example.com/image{i+1}.jpg'],
                'agent_name': f'Test Agent {i+1}',
                'phone': '+353 1 234 5678',
                'energy_rating': 'B2',
                'id': f'test_property_{i+1}'
            }
            for i in range(min(limit, 5))
        ]
        
        logging.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –¢–ï–°–¢–û–í–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!")
        logging.warning("‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π IP!")
        
        return base_properties


class ProductionDaftParser(ProxyDaftParser):
    """
    –û–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–ª–∞—Å—Å
    """
    pass


async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    parser = ProductionDaftParser()
    
    try:
        results = await parser.search_properties(
            min_bedrooms=2,
            max_price=3000,
            location='dublin-city',
            limit=5
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        for i, prop in enumerate(results, 1):
            print(f"\n{i}. {prop['title']}")
            print(f"   üí∞ {prop['price']}‚Ç¨")
            print(f"   üõèÔ∏è {prop['bedrooms']} —Å–ø–∞–ª–µ–Ω")
            print(f"   üìç {prop['location']}")
            print(f"   üîó {prop['url']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
