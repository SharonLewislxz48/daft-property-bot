#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/barss/PycharmProjects/daftparser')

from parser.daft_parser import DaftParser
from parser.models import SearchFilters

async def test_new_parser():
    print('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...')
    print('=' * 60)
    
    parser = DaftParser()
    
    filters = SearchFilters(
        city='Dublin',
        max_price=2500,
        min_bedrooms=3,
        areas=['Temple Bar', 'Grafton Street']
    )
    
    try:
        properties = await parser.search_properties(filters)
        print(f'‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π!')
        print()
        
        for i, prop in enumerate(properties[:5], 1):
            print(f'{i}. üè† {prop.title}')
            print(f'   üí∞ {prop.price}')
            print(f'   üìç {prop.address}')
            print(f'   üõèÔ∏è {prop.bedrooms} —Å–ø–∞–ª–µ–Ω')
            print(f'   üîó {prop.url[:70]}...')
            print()
            
        return True
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        await parser.close()

if __name__ == "__main__":
    success = asyncio.run(test_new_parser())
    
    if success:
        print("üéâ –ù–û–í–´–ô –ü–ê–†–°–ï–† –†–ê–ë–û–¢–ê–ï–¢! –¢–µ–ø–µ—Ä—å –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ–≤—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º")
