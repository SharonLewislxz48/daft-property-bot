#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä daft.ie —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
"""

import asyncio
import re
from typing import List, Dict, Any
from playwright.async_api import async_playwright
import json
import datetime
import aiohttp
from bs4 import BeautifulSoup

class DaftPlaywrightParser:
    def __init__(self):
        self.base_url = "https://www.daft.ie"
        self.session = None
        
    async def __aenter__(self):
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def get_search_results(self, min_bedrooms: int = 3, max_price: int = 2500, location: str = "dublin") -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright –¥–ª—è –æ–±—Ö–æ–¥–∞ JavaScript
        """
        print(f"üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {min_bedrooms}+ —Å–ø–∞–ª–µ–Ω, –¥–æ ‚Ç¨{max_price} –≤ {location}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        search_url = f"{self.base_url}/property-for-rent/{location}?rentalPrice_to={max_price}&numBeds_from={min_bedrooms}"
        print(f"üåê URL –ø–æ–∏—Å–∫–∞: {search_url}")
        
        results = []
        
        async with async_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ headless —Ä–µ–∂–∏–º–µ
            browser = await p.chromium.launch(headless=True)
            context = await browser.new_context(
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
            )
            page = await context.new_page()
            
            try:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
                await page.goto(search_url, wait_until='networkidle', timeout=30000)
                await page.wait_for_timeout(2000)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ JavaScript
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                try:
                    results_count_element = await page.wait_for_selector('h1[data-testid="search-h1"]', timeout=5000)
                    results_text = await results_count_element.text_content()
                    results_count = re.search(r'(\d+)', results_text)
                    total_results = int(results_count.group(1)) if results_count else 0
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_results}")
                except:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    total_results = 0

                # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
                property_links = await page.query_selector_all('a[href*="/for-rent/"]')
                print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {len(property_links)}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                unique_links = set()
                for link in property_links:
                    href = await link.get_attribute('href')
                    if href and '/for-rent/' in href and href not in unique_links:
                        if href.startswith('/'):
                            href = self.base_url + href
                        unique_links.add(href)
                
                print(f"üè† –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(unique_links)}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                for i, url in enumerate(list(unique_links)[:10]):
                    print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i+1}/10: {url}")
                    property_data = await self.parse_property_details(url, page)
                    if property_data:
                        results.append(property_data)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {property_data['title']} - ‚Ç¨{property_data.get('price', 'N/A')}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
                
            finally:
                await browser.close()
        
        return results

    async def parse_property_details(self, url: str, page) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        """
        try:
            await page.goto(url, wait_until='networkidle', timeout=20000)
            await page.wait_for_timeout(1000)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = ""
            try:
                title_element = await page.query_selector('h1')
                if title_element:
                    title = await title_element.text_content()
                    title = title.strip()
            except:
                pass
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            property_data = {
                'url': url,
                'title': title,
                'price': None,
                'bedrooms': None,
                'property_type': None,
                'location': None,
                'description': None,
                'parsed_at': datetime.datetime.now().isoformat()
            }
            
            # –ò—â–µ–º JSON –¥–∞–Ω–Ω—ã–µ –≤ —Å–∫—Ä–∏–ø—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                script_content = await page.content()
                # –ò—â–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                json_match = re.search(r'"listing":\s*({.*?"nonFormatted".*?})', script_content, re.DOTALL)
                if json_match:
                    json_str = json_match.group(1)
                    # –û—á–∏—â–∞–µ–º JSON –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
                    json_str = re.sub(r'("price":\s*)"([^"]*)"', r'\1\2', json_str)  # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ —É —Ü–µ–Ω—ã
                    
                    try:
                        listing_data = json.loads(json_str)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                        if 'nonFormatted' in listing_data and 'price' in listing_data['nonFormatted']:
                            property_data['price'] = listing_data['nonFormatted']['price']
                        elif 'price' in listing_data:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
                            price_str = listing_data['price']
                            price_match = re.search(r'‚Ç¨([\d,]+)', price_str)
                            if price_match:
                                property_data['price'] = int(price_match.group(1).replace(',', ''))
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
                        if 'numBedrooms' in listing_data:
                            bedrooms_str = listing_data['numBedrooms']
                            if bedrooms_str:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "1, 2 & 3 bed"
                                bed_numbers = re.findall(r'(\d+)', bedrooms_str)
                                if bed_numbers:
                                    property_data['bedrooms'] = max([int(x) for x in bed_numbers])
                        
                        # –î—Ä—É–≥–∏–µ –ø–æ–ª—è
                        property_data['property_type'] = listing_data.get('propertyType', '')
                        property_data['description'] = listing_data.get('description', '')[:500]  # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                        
                        # –õ–æ–∫–∞—Ü–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        if title:
                            location_match = re.search(r'Dublin\s+\d+|Dublin\s+\w+', title)
                            if location_match:
                                property_data['location'] = location_match.group()
                                
                    except json.JSONDecodeError as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            return property_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
            return None

    def format_results(self, results: List[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
        """
        if not results:
            return "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        output = [f"üè† –ù–∞–π–¥–µ–Ω–æ {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n"]
        
        for i, prop in enumerate(results, 1):
            price_str = f"‚Ç¨{prop['price']}" if prop['price'] else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            bedrooms_str = f"{prop['bedrooms']} —Å–ø–∞–ª–µ–Ω" if prop['bedrooms'] else "–°–ø–∞–ª—å–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
            
            output.append(f"{i}. {prop['title']}")
            output.append(f"   üí∞ {price_str} | üõèÔ∏è {bedrooms_str}")
            output.append(f"   üìç {prop.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            output.append(f"   üîó {prop['url']}")
            output.append("")
        
        return "\n".join(output)

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Daft.ie —Å Playwright")
    print("=" * 60)
    
    async with DaftPlaywrightParser() as parser:
        # –ò—â–µ–º 3+ —Å–ø–∞–ª—å–Ω–∏ –¥–æ ‚Ç¨2500 –≤ –î—É–±–ª–∏–Ω–µ
        results = await parser.get_search_results(
            min_bedrooms=3,
            max_price=2500,
            location="dublin"
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_output = parser.format_results(results)
        print("\n" + "=" * 60)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê")
        print("=" * 60)
        print(formatted_output)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open('daft_results_playwright.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ daft_results_playwright.json")

if __name__ == "__main__":
    asyncio.run(main())
