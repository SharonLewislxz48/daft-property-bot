#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

async def test_complete_system():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    try:
        print("ü§ñ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç Daft.ie Telegram Bot —Å–∏—Å—Ç–µ–º—ã")
        print("=" * 50)
        
        # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        from config.settings import settings
        print(f"   ‚úÖ Base URL: {settings.BASE_URL}")
        print(f"   ‚úÖ Update interval: {settings.UPDATE_INTERVAL}s")
        print(f"   ‚úÖ Database path: {settings.DB_PATH}")
        
        # –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        from database.database import Database
        from parser.models import BotSettings, Property
        
        db = Database("./data/test_system.db")
        await db.init_database()
        print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        test_settings = BotSettings(
            chat_id="test_system_chat",
            city="Dublin",
            max_price=2500,
            min_bedrooms=2,
            areas=["Dublin 1", "Dublin 2", "Dublin 4"]
        )
        
        await db.save_bot_settings(test_settings)
        print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –¢–µ—Å—Ç 3: –î–µ–º–æ-–ø–∞—Ä—Å–µ—Ä
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–º–æ-–ø–∞—Ä—Å–µ—Ä...")
        from parser.demo_parser import DemoParser
        from parser.models import SearchFilters
        
        filters = SearchFilters(
            city="Dublin",
            max_price=2500,
            min_bedrooms=2,
            areas=["Dublin 2", "Dublin 4"]
        )
        
        async with DemoParser() as parser:
            properties = await parser.search_properties(filters)
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(properties)}")
            
            if properties:
                print("   üìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
                for i, prop in enumerate(properties[:3], 1):
                    print(f"      {i}. {prop.title}")
                    print(f"         üí∞ {prop.format_price()}")
                    print(f"         üõèÔ∏è {prop.format_bedrooms()}")
                    print(f"         üìç {prop.address}")
        
        # –¢–µ—Å—Ç 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
        if properties:
            saved_count = await db.save_properties(properties)
            print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {saved_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            new_properties = await db.get_new_properties("test_system_chat")
            print(f"   ‚úÖ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞: {len(new_properties)}")
        
        # –¢–µ—Å—Ç 5: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞...")
        from bot.keyboards import (
            get_main_menu_keyboard, get_settings_keyboard, 
            get_dublin_areas_keyboard
        )
        
        main_keyboard = get_main_menu_keyboard()
        settings_keyboard = get_settings_keyboard()
        areas_keyboard = get_dublin_areas_keyboard()
        
        print(f"   ‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {len(main_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
        print(f"   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {len(settings_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
        print(f"   ‚úÖ –†–∞–π–æ–Ω—ã: {len(areas_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
        
        # –¢–µ—Å—Ç 6: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        if properties:
            test_property = properties[0]
            
            message_text = (
                f"üè† <b>{test_property.title}</b>\n\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {test_property.address}\n"
                f"üõèÔ∏è <b>–°–ø–∞–ª—å–Ω–∏:</b> {test_property.format_bedrooms()}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {test_property.format_price()}\n"
                f"üîó <a href='{test_property.url}'>–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>"
            )
            
            print("   ‚úÖ –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:")
            print("   " + "‚îÄ" * 40)
            print(f"   üè† {test_property.title}")
            print(f"   üìç –ê–¥—Ä–µ—Å: {test_property.address}")
            print(f"   üõèÔ∏è –°–ø–∞–ª—å–Ω–∏: {test_property.format_bedrooms()}")
            print(f"   üí∞ –¶–µ–Ω–∞: {test_property.format_price()}")
            print(f"   üîó URL: {test_property.url}")
            print("   " + "‚îÄ" * 40)
        
        # –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        stats = await db.get_statistics("test_system_chat")
        print(f"   ‚úÖ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats.get('total_properties', 0)}")
        print(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {stats.get('sent_properties', 0)}")
        
        # –¢–µ—Å—Ç 8: –£—Ç–∏–ª–∏—Ç—ã
        print("\n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã...")
        from utils.helpers import (
            extract_price_from_text, extract_dublin_area, 
            format_price, truncate_text
        )
        
        test_price = extract_price_from_text("Rent ‚Ç¨2,500 per month")
        test_area = extract_dublin_area("Beautiful apartment in Dublin 4")
        formatted_price = format_price(2500)
        truncated = truncate_text("Very long description text that should be truncated", 30)
        
        print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã: ‚Ç¨{test_price}")
        print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞: {test_area}")
        print(f"   ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã: {formatted_price}")
        print(f"   ‚úÖ –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞: {truncated}")
        
        print("\n" + "=" * 50)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("=" * 50)
        
        print("\nüìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏ Telegram")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = asyncio.run(test_complete_system())
    sys.exit(0 if success else 1)
