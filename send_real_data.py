#!/usr/bin/env python3
"""
–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/barss/PycharmProjects/daftparser')

async def send_test_message():
    print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    from aiogram import Bot
    from parser.final_daft_parser import FinalDaftParser
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    bot = Bot(token="8219994646:AAEJMZGow2b_F4OcTQBqGqZp0-8baLVnatQ")
    chat_id = "-1002819366953"
    
    parser = FinalDaftParser()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–∞—à –ø–∞—Ä—Å–µ—Ä —Å –æ–±—Ö–æ–¥–æ–º
        print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        properties = await parser.search_with_bypass("Dublin", 2500, 3)
        
        if properties:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π!")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üè† *–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –î—É–±–ª–∏–Ω–µ* ({datetime.now().strftime('%H:%M')})\n"
            message += f"üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: ‚Ç¨2,500\n"
            message += f"üõèÔ∏è –ú–∏–Ω–∏–º—É–º —Å–ø–∞–ª–µ–Ω: 3\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            for i, prop in enumerate(properties[:5], 1):
                message += f"*{i}. {prop['title']}*\n"
                message += f"üí∞ {prop['price']}\n"
                message += f"üìç {prop['address']}\n"
                if prop.get('bedrooms'):
                    message += f"üõèÔ∏è {prop['bedrooms']} —Å–ø–∞–ª–µ–Ω\n"
                message += f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({prop['url']})\n\n"
            
            message += f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            message += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            message += f"‚úÖ *–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å daft.ie*"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
            print(f"üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(properties[:5])} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ {len(properties)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö")
            
        else:
            await bot.send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ä—Å–µ—Ä...",
                parse_mode="Markdown"
            )
            print("‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            parse_mode="Markdown"
        )
        import traceback
        traceback.print_exc()
        
    finally:
        await parser.close()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(send_test_message())
