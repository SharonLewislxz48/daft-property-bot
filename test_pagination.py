#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ª–∏ –±–æ—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
"""

import asyncio
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from production_parser import ProductionDaftParser

async def test_pagination():
    """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    
    print("üìÑ –¢–ï–°–¢ –ü–ê–ì–ò–ù–ê–¶–ò–ò")
    print("=" * 40)
    
    parser = ProductionDaftParser()
    
    # –¢–µ—Å—Ç 1: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    print("üîç –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    results_1_page = await parser.search_properties(
        min_bedrooms=3,
        max_price=2500,
        location='dublin-city',
        limit=5,
        max_pages=1
    )
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(results_1_page)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    print("\nüîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –Ω–∞ 3 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö")
    results_3_pages = await parser.search_properties(
        min_bedrooms=3,
        max_price=2500,
        location='dublin-city',
        limit=30,  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç
        max_pages=3
    )
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞ 3 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö: {len(results_3_pages)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç 3: –û—á–µ–Ω—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (5 —Å—Ç—Ä–∞–Ω–∏—Ü)
    print("\nüîç –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –Ω–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö")
    results_5_pages = await parser.search_properties(
        min_bedrooms=2,  # –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫
        max_price=3000,
        location='dublin-city',
        limit=50,
        max_pages=5
    )
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö: {len(results_5_pages)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìà –ê–ù–ê–õ–ò–ó –ü–ê–ì–ò–ù–ê–¶–ò–ò:")
    print(f"   1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞:  {len(results_1_page)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    print(f"   3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã:  {len(results_3_pages)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    print(f"   5 —Å—Ç—Ä–∞–Ω–∏—Ü:   {len(results_5_pages)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    ids_1 = {prop['id'] for prop in results_1_page}
    ids_3 = {prop['id'] for prop in results_3_pages}
    ids_5 = {prop['id'] for prop in results_5_pages}
    
    print(f"\nüîó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–¨:")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤ 1 —Å—Ç—Ä:  {len(ids_1)}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤ 3 —Å—Ç—Ä:  {len(ids_3)}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤ 5 —Å—Ç—Ä:  {len(ids_5)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    new_on_page_3 = ids_3 - ids_1
    new_on_page_5 = ids_5 - ids_3
    
    print(f"\nüìÑ –ù–û–í–´–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:")
    print(f"   –ù–æ–≤—ã—Ö –Ω–∞ —Å—Ç—Ä 2-3:    {len(new_on_page_3)}")
    print(f"   –ù–æ–≤—ã—Ö –Ω–∞ —Å—Ç—Ä 4-5:    {len(new_on_page_5)}")
    
    if len(results_3_pages) > len(results_1_page):
        print("‚úÖ –ü–ê–ì–ò–ù–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢: –ø–∞—Ä—Å–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö")
        return True
    elif len(results_3_pages) == len(results_1_page):
        print("‚ö†Ô∏è –ü–ê–ì–ò–ù–ê–¶–ò–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ê: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return True
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô")
        return False

async def test_bot_pagination_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ"""
    
    print("\nü§ñ –¢–ï–°–¢ –ù–ê–°–¢–†–û–ï–ö –ë–û–¢–ê")
    print("=" * 30)
    
    # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    bot_settings = {
        "regions": ["dublin-city"],
        "min_bedrooms": 3,
        "max_price": 2500,
        "max_results_per_search": 10
    }
    
    parser = ProductionDaftParser()
    
    # –ü–æ–∏—Å–∫ –∫–∞–∫ –≤ –±–æ—Ç–µ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è max_pages - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    print("üîç –ü–æ–∏—Å–∫ –∫–∞–∫ –≤ –±–æ—Ç–µ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):")
    
    all_results = []
    for region in bot_settings["regions"]:
        region_results = await parser.search_properties(
            min_bedrooms=bot_settings["min_bedrooms"],
            max_price=bot_settings["max_price"],
            location=region,
            limit=bot_settings["max_results_per_search"] // len(bot_settings["regions"])
        )
        all_results.extend(region_results)
        print(f"   üìç {region}: {len(region_results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    print(f"   üìä –ò—Ç–æ–≥–æ: {len(all_results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ max_pages –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    import inspect
    sig = inspect.signature(parser.search_properties)
    default_max_pages = sig.parameters['max_pages'].default
    print(f"   üìÑ max_pages –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_max_pages}")
    
    if default_max_pages >= 3:
        print("‚úÖ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é (max_pages >= 3)")
        return True
    else:
        print("‚ö†Ô∏è –ë–æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.WARNING)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
    
    # –¢–µ—Å—Ç—ã
    test1 = await test_pagination()
    test2 = await test_bot_pagination_settings()
    
    print("\n" + "=" * 50)
    print("üèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–ê–ì–ò–ù–ê–¶–ò–ò")
    print("=" * 50)
    
    if test1 and test2:
        print("‚úÖ –ü–ê–ì–ò–ù–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
        print("üìÑ –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("üîç –ù–∞—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô")
        if not test1:
            print("   üìÑ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏")
        if not test2:
            print("   ü§ñ –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main())
