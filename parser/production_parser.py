#!/usr/bin/env python3
"""
–ì–æ—Ç–æ–≤—ã–π –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –ø–∞—Ä—Å–µ—Ä daft.ie —Å JSON –ø–æ–¥—Ö–æ–¥–æ–º –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
"""

import asyncio
import re
import json
import aiohttp
from typing import List, Dict, Any, Optional
from datetime import datetime
import logging

class ProductionDaftParser:
    """
    –ü—Ä–æ–¥–∞–∫—à–µ–Ω-–≥–æ—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è daft.ie —Å JSON –ø–æ–¥—Ö–æ–¥–æ–º
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ async context manager, —Ç–∞–∫ –∏ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
    """
    
    def __init__(self):
        self.base_url = "https://www.daft.ie"
        self.session = None
        self._should_close_session = False
        
    async def __aenter__(self):
        if not self.session:
            self.session = aiohttp.ClientSession()
            self._should_close_session = True
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session and self._should_close_session:
            await self.session.close()
            self.session = None
            self._should_close_session = False
    
    def extract_json_data(self, html_content: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–∏—Å–∫ script —ç–ª–µ–º–µ–Ω—Ç–∞ —Å __NEXT_DATA__
            pattern = r'<script id="__NEXT_DATA__"[^>]*>([^<]+)</script>'
            match = re.search(pattern, html_content)
            
            if not match:
                logging.error("__NEXT_DATA__ script –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
            
            json_str = match.group(1)
            data = json.loads(json_str)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º listings –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            listings = data.get('props', {}).get('pageProps', {}).get('listings', [])
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ JSON: {len(listings)}")
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            properties = []
            for item in listings:
                listing = item.get('listing', {})
                if not listing:
                    continue
                    
                property_data = self.parse_listing(listing)
                if property_data:
                    properties.append(property_data)
            
            return properties
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return []
    
    def parse_listing(self, listing: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ JSON"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            property_id = str(listing.get('id', ''))
            title = listing.get('title', '')
            price = listing.get('price', '')
            bedrooms_str = listing.get('numBedrooms', '')
            property_type = listing.get('propertyType', '')
            
            # URL –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            seo_path = listing.get('seoFriendlyPath', '')
            url = f"https://www.daft.ie{seo_path}" if seo_path else ""
            
            # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
            location_parts = title.split(',')
            if len(location_parts) >= 2:
                location = ', '.join(location_parts[-2:]).strip()
            else:
                location = title
            
            # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            publish_date = listing.get('publishDate')
            date_published = None
            if publish_date:
                try:
                    date_published = datetime.fromtimestamp(publish_date / 1000).strftime('%Y-%m-%d')
                except:
                    pass
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            media = listing.get('media', {})
            images = media.get('images', [])
            image_urls = []
            for img in images[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if 'size720x480' in img:
                    image_urls.append(img['size720x480'])
            
            # –ü—Ä–æ–¥–∞–≤–µ—Ü
            seller = listing.get('seller', {})
            agent_name = seller.get('name', '')
            phone = seller.get('phone', '')
            
            # –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            ber = listing.get('ber', {})
            energy_rating = ber.get('rating', '') if ber else ''
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
            bedrooms = self._parse_bedrooms_from_json(bedrooms_str)
            
            # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
            monthly_rent = self._parse_price(price)
            
            property_data = {
                'id': property_id,
                'title': title,
                'url': url,
                'price': monthly_rent,
                'bedrooms': bedrooms,
                'property_type': property_type,
                'location': location,
                'date_published': date_published,
                'images': image_urls,
                'agent_name': agent_name,
                'phone': phone,
                'energy_rating': energy_rating
            }
            
            logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {title} - {price}")
            return property_data
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ JSON: {e}")
            return None
    
    def _parse_bedrooms_from_json(self, bedrooms_str: str) -> int:
        """–ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∏–ø–∞ "1, 2, 3 & 5 bed" –∏–ª–∏ "3 Bed"
            numbers = re.findall(r'\d+', bedrooms_str)
            if numbers:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
                return int(numbers[0])
        except (ValueError, AttributeError):
            pass
        return 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _parse_price(self, price_str: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            price_clean = re.sub(r'[^\d]', '', price_str)
            if price_clean:
                return int(price_clean)
        except (ValueError, AttributeError):
            pass
        return 0
    
    async def search_properties(
        self, 
        min_bedrooms: int = 3, 
        max_price: int = 2500, 
        location: str = "dublin-city", 
        limit: int = 20,
        max_pages: int = 3
    ) -> List[Dict[str, Any]]:
        """
        –ò—â–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ daft.ie —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å context manager, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–µ–≥–æ
        
        Args:
            min_bedrooms: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
            max_price: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ –µ–≤—Ä–æ
            location: –õ–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (dublin-city, cork, etc.)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        """
        logging.info(f"üîç –ü–û–ò–°–ö: {min_bedrooms}+ —Å–ø–∞–ª–µ–Ω, –¥–æ ‚Ç¨{max_price}, {location} (–¥–æ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü)")
        
        properties = []
        seen_ids = set()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π - —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –∑–¥–µ—Å—å
        should_close_session = False
        if not self.session:
            self.session = aiohttp.ClientSession()
            should_close_session = True
        
        try:
            for page in range(1, max_pages + 1):
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º URL
                    url = self._build_search_url(min_bedrooms, max_price, location, page)
                    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {url}")
                    
                    # –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.9',
                        'Accept-Encoding': 'gzip, deflate, br',
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache',
                        'Sec-Ch-Ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
                        'Sec-Ch-Ua-Mobile': '?0',
                        'Sec-Ch-Ua-Platform': '"Linux"',
                        'Sec-Fetch-Dest': 'document',
                        'Sec-Fetch-Mode': 'navigate',
                        'Sec-Fetch-Site': 'none',
                        'Sec-Fetch-User': '?1',
                        'Upgrade-Insecure-Requests': '1'
                    }
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    await asyncio.sleep(1)
                    
                    async with self.session.get(url, headers=headers) as response:
                        if response.status != 200:
                            logging.error(f"HTTP –æ—à–∏–±–∫–∞ {response.status} –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
                            continue
                        
                        html_content = await response.text()
                        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤ HTML –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
                        page_properties = self.extract_json_data(html_content)
                        
                        if not page_properties:
                            logging.info(f"–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                            break
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                        new_properties = []
                        for prop in page_properties:
                            if (prop and prop['id'] not in seen_ids and 
                                self._matches_criteria(prop, min_bedrooms, max_price)):
                                seen_ids.add(prop['id'])
                                new_properties.append(prop)
                        
                        properties.extend(new_properties)
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_properties)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                        if len(properties) >= limit:
                            properties = properties[:limit]
                            break
                        
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
                    continue
        
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –µ—ë –∑–¥–µ—Å—å
            if should_close_session and self.session:
                await self.session.close()
                self.session = None
        
        logging.info(f"JSON –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        return properties
    
    def _build_search_url(self, min_bedrooms: int, max_price: int, location: str, page: int = 1) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        base_url = f"{self.base_url}/property-for-rent/{location}/houses"
        
        params = [
            f"rentalPrice_to={max_price}",
            f"numBeds_from={min_bedrooms}"
        ]
        
        if page > 1:
            params.append(f"page={page}")
        
        return f"{base_url}?{'&'.join(params)}"
    
    def _matches_criteria(self, property_data: Dict[str, Any], min_bedrooms: int, max_price: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–ª–µ–Ω
            bedrooms = property_data.get('bedrooms', 0)
            if bedrooms < min_bedrooms:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
            price = property_data.get('price', 0)
            if price > max_price:
                return False
            
            return True
        except Exception:
            return False

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class DaftParser:
    """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self):
        self._parser = ProductionDaftParser()
    
    async def search_properties(self, **kwargs):
        return await self._parser.search_properties(**kwargs)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞"""
    # –¢–µ—Å—Ç 1: –° context manager
    print("üß™ –¢–µ—Å—Ç 1: –° async context manager")
    async with ProductionDaftParser() as parser:
        properties = await parser.search_properties(
            min_bedrooms=3,
            max_price=2500,
            location='dublin-city',
            limit=3,
            max_pages=1
        )
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç 2: –ë–µ–∑ context manager (–∫–∞–∫ –≤ –±–æ—Ç–µ)
    print("\nüß™ –¢–µ—Å—Ç 2: –ë–µ–∑ context manager (—Ä–µ–∂–∏–º –±–æ—Ç–∞)")
    parser = ProductionDaftParser()
    properties = await parser.search_properties(
        min_bedrooms=3,
        max_price=2500,
        location='dublin-city',
        limit=3,
        max_pages=1
    )
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    if properties:
        print("\nüìã –ü—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        prop = properties[0]
        print(f"  üìç {prop['title']}")
        print(f"  üí∞ ‚Ç¨{prop['price']}/–º–µ—Å | üõèÔ∏è {prop['bedrooms']} —Å–ø–∞–ª–µ–Ω")
        print(f"  üîó {prop['url']}")

if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
