#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Daft.ie
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ Google OAuth, —Ç–∞–∫ –∏ –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import asyncio
from telegram_daft_automation import DaftAutomation

async def test_login():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Daft.ie")
    print("-" * 50)
    
    automation = DaftAutomation()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        print("üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
        await automation.init_browser()
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        print("üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
        await automation.page.goto('https://www.daft.ie/login')
        await automation.page.wait_for_load_state('networkidle')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google –∫–Ω–æ–ø–∫—É
        google_selectors = [
            'button:has-text("Google")',
            'button:has-text("Continue with Google")',
            '[data-testid="google-login"]',
            'button[class*="google"]',
            '.google-signin-button',
            'a[href*="google"]'
        ]
        
        google_found = False
        for selector in google_selectors:
            count = await automation.page.locator(selector).count()
            if count > 0:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Google: {selector}")
                google_found = True
        
        if not google_found:
            print("‚ùå –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        email_selectors = [
            '[data-testid="email"]',
            'input[type="email"]',
            'input[name="email"]',
            'input[placeholder*="email" i]'
        ]
        
        email_found = False
        for selector in email_selectors:
            count = await automation.page.locator(selector).count()
            if count > 0:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email: {selector}")
                email_found = True
        
        if not email_found:
            print("‚ùå –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot_path = "daft_login_page.png"
        await automation.page.screenshot(path=screenshot_path)
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
        
        # –ü–∞—É–∑–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        success = await automation.login_to_daft()
        
        if success:
            print("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            await automation.page.goto('https://www.daft.ie')
            await automation.page.wait_for_load_state('networkidle')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_indicators = [
                '[data-testid="user-menu"]',
                '.user-menu',
                'button:has-text("Account")',
                'button:has-text("Profile")',
                'a:has-text("My Account")'
            ]
            
            for selector in user_indicators:
                if await automation.page.locator(selector).count() > 0:
                    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {selector}")
                    break
            else:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        else:
            print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
        input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        await automation.close_browser()
        print("üëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(test_login())
