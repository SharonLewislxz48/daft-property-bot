#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from parser.daft_parser import DaftParser
from parser.models import SearchFilters

async def test_improved_bedroom_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∞–ª–µ–Ω"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = DaftParser()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ 3+ —Å–ø–∞–ª–µ–Ω
    test_filters = [
        # –í—ã—Å–æ–∫–∏–π –±—é–¥–∂–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–æ–ª—å—à–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä
        SearchFilters(max_price=4000, min_bedrooms=3, max_bedrooms=5),
        SearchFilters(max_price=3500, min_bedrooms=3, max_bedrooms=4),
        SearchFilters(max_price=5000, min_bedrooms=2, max_bedrooms=5),  # –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    ]
    
    for i, filters in enumerate(test_filters, 1):
        print(f"\n--- –¢–ï–°–¢ {i}: ‚Ç¨{filters.max_price}, {filters.min_bedrooms}-{filters.max_bedrooms} —Å–ø–∞–ª–µ–Ω ---")
        
        try:
            properties = await parser.search_properties(filters)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(properties)}")
            
            if properties:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                for j, prop in enumerate(properties[:5], 1):
                    print(f"\n{j}. {prop.title}")
                    print(f"   üí∞ –¶–µ–Ω–∞: ‚Ç¨{prop.price}/–º–µ—Å—è—Ü")
                    print(f"   üõèÔ∏è –°–ø–∞–ª–µ–Ω: {prop.bedrooms}")
                    print(f"   üöø –í–∞–Ω–Ω—ã—Ö: {prop.bathrooms}")
                    print(f"   üìç –ê–¥—Ä–µ—Å: {prop.address}")
                    print(f"   üîó URL: {prop.url}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–∞–ª—å–Ω—è–º
                bedroom_stats = {}
                for prop in properties:
                    bedrooms = prop.bedrooms
                    bedroom_stats[bedrooms] = bedroom_stats.get(bedrooms, 0) + 1
                
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–∞–ª—å–Ω—è–º:")
                for bedrooms in sorted(bedroom_stats.keys()):
                    count = bedroom_stats[bedrooms]
                    print(f"   {bedrooms} —Å–ø–∞–ª–µ–Ω: {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏
                three_plus = [p for p in properties if p.bedrooms >= 3]
                if three_plus:
                    print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(three_plus)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏!")
                    for prop in three_plus[:3]:
                        print(f"   - {prop.title} (‚Ç¨{prop.price}, {prop.bedrooms} —Å–ø–∞–ª–µ–Ω)")
                else:
                    print(f"\n‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_improved_bedroom_parsing())
