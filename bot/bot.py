#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ Daft.ie
"""

import asyncio
import logging
from typing import Dict, Any, List
from datetime import datetime
import time

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage

from database.database import EnhancedDatabase
from parser.production_parser import ProductionDaftParser
from config.regions import ALL_LOCATIONS, DEFAULT_SETTINGS, LIMITS
from bot.keyboards import (
    get_main_menu_keyboard, get_settings_menu_keyboard, get_regions_menu_keyboard,
    get_region_categories_keyboard, get_category_regions_keyboard, 
    get_popular_combinations_keyboard, get_user_regions_keyboard, 
    get_bedrooms_keyboard, get_price_keyboard, get_interval_keyboard, 
    get_confirmation_keyboard, get_back_to_main_keyboard, get_statistics_keyboard
)

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BotStates(StatesGroup):
    waiting_custom_price = State()
    waiting_custom_interval = State()

class EnhancedPropertyBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.db = EnhancedDatabase()
        self.parser = ProductionDaftParser()
        
        # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {user_id: task}
        self.monitoring_tasks: Dict[int, asyncio.Task] = {}
        
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_status, Command("status"))
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.dp.callback_query.register(self.callback_main_menu, F.data == "main_menu")
        self.dp.callback_query.register(self.callback_settings, F.data == "settings")
        self.dp.callback_query.register(self.callback_statistics, F.data == "statistics")
        self.dp.callback_query.register(self.callback_help, F.data == "help")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.dp.callback_query.register(self.callback_start_monitoring, F.data == "start_monitoring")
        self.dp.callback_query.register(self.callback_stop_monitoring, F.data == "stop_monitoring")
        self.dp.callback_query.register(self.callback_single_search, F.data == "single_search")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.dp.callback_query.register(self.callback_manage_regions, F.data == "manage_regions")
        self.dp.callback_query.register(self.callback_set_bedrooms, F.data == "set_bedrooms")
        self.dp.callback_query.register(self.callback_set_max_price, F.data == "set_max_price")
        self.dp.callback_query.register(self.callback_set_interval, F.data == "set_interval")
        self.dp.callback_query.register(self.callback_show_settings, F.data == "show_settings")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        self.dp.callback_query.register(self.callback_add_region, F.data == "add_region")
        self.dp.callback_query.register(self.callback_remove_region, F.data == "remove_region")
        self.dp.callback_query.register(self.callback_show_regions, F.data == "show_regions")
        self.dp.callback_query.register(self.callback_list_all_regions, F.data == "list_all_regions")
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
        self.dp.callback_query.register(
            self.callback_region_page,
            F.data.startswith("region_page_")
        )
        
        # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        self.dp.callback_query.register(
            self.callback_select_region,
            F.data.startswith("select_region_")
        )
        self.dp.callback_query.register(
            self.callback_remove_specific_region,
            F.data.startswith("remove_region_")
        )
        self.dp.callback_query.register(
            self.callback_select_bedrooms,
            F.data.startswith("bedrooms_")
        )
        self.dp.callback_query.register(
            self.callback_select_price,
            F.data.startswith("price_")
        )
        self.dp.callback_query.register(
            self.callback_select_interval,
            F.data.startswith("interval_")
        )
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.dp.callback_query.register(self.callback_custom_price, F.data == "custom_price")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.dp.callback_query.register(
            self.callback_show_stats,
            F.data.startswith("stats_")
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
        self.dp.message.register(
            self.process_custom_price,
            StateFilter(BotStates.waiting_custom_price)
        )
        self.dp.message.register(
            self.process_custom_interval,
            StateFilter(BotStates.waiting_custom_interval)
        )
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.db.init_database()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await self.dp.start_polling(self.bot)
    
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for task in self.monitoring_tasks.values():
            task.cancel()
        self.monitoring_tasks.clear()
        
        await self.bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # === –ö–û–ú–ê–ù–î–´ ===
    
    async def cmd_start(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await state.clear()
        
        user = await self.db.get_or_create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        welcome_text = "üè† **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ Daft.ie!**\n\n"
        
        if not user["exists"]:
            welcome_text += "üéâ –í—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã.\n\n"
        
        welcome_text += (
            "‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**\n"
            "üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "‚öôÔ∏è –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ (—Ä–µ–≥–∏–æ–Ω—ã, —Ü–µ–Ω–∞, —Å–ø–∞–ª—å–Ω–∏)\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
            "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    async def cmd_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**\n"
            "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å - –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫\n"
            "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "üîç –†–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å\n\n"
            "**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            "üèòÔ∏è –†–µ–≥–∏–æ–Ω—ã - –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "üõèÔ∏è –°–ø–∞–ª—å–Ω–∏ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "üí∞ –¶–µ–Ω–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç\n"
            "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª - —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
            "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
        )
        
        await message.answer(
            help_text,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
    
    async def cmd_status(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = message.from_user.id
        settings = await self.db.get_user_settings(user_id)
        
        if not settings:
            await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        is_monitoring = user_id in self.monitoring_tasks and not self.monitoring_tasks[user_id].done()
        status_emoji = "‚úÖ" if is_monitoring else "‚è∏Ô∏è"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if is_monitoring else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        regions_text = ", ".join([
            ALL_LOCATIONS.get(region, region) for region in settings["regions"]
        ])
        
        interval_text = self._format_interval(settings["monitoring_interval"])
        
        status_msg = (
            f"üìä **–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {status_emoji} {status_text}\n\n"
            f"‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            f"üèòÔ∏è –†–µ–≥–∏–æ–Ω—ã: {regions_text}\n"
            f"üõèÔ∏è –ú–∏–Ω–∏–º—É–º —Å–ø–∞–ª–µ–Ω: {settings['min_bedrooms']}\n"
            f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ‚Ç¨{settings['max_price']}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval_text}\n"
            f"üìä –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {settings['max_results_per_search']}"
        )
        
        await message.answer(
            status_msg,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    # === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
    
    async def callback_main_menu(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.message.edit_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_settings(self, callback: CallbackQuery):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await callback.message.edit_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=get_settings_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_statistics(self, callback: CallbackQuery):
        """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_properties = await self.db.get_user_properties_count(user_id)
        
        stats_text = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.first_name}\n"
            f"üè† –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_properties}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
        )
        
        try:
            await callback.message.edit_text(
                stats_text,
                reply_markup=get_statistics_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
            await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return
            
        await callback.answer()
    
    async def callback_help(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
        help_text = (
            "‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
            "**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**\n"
            "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å - –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫\n"
            "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "üîç –†–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å\n\n"
            "**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            "üèòÔ∏è –†–µ–≥–∏–æ–Ω—ã - –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "üõèÔ∏è –°–ø–∞–ª—å–Ω–∏ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "üí∞ –¶–µ–Ω–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç\n"
            "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª - —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        )
        
        await callback.message.edit_text(
            help_text,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    # === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
    
    async def callback_start_monitoring(self, callback: CallbackQuery):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if user_id in self.monitoring_tasks and not self.monitoring_tasks[user_id].done():
            await callback.message.edit_text(
                "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await self.db.get_user_settings(user_id)
        if not settings:
            await callback.message.edit_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –ë–î
        await self.db.update_user_settings(user_id, is_monitoring_active=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        task = asyncio.create_task(self._monitoring_loop(user_id, settings))
        self.monitoring_tasks[user_id] = task
        
        interval_text = self._format_interval(settings["monitoring_interval"])
        
        await callback.message.edit_text(
            f"‚úÖ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!**\n\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval_text}\n"
            f"üîç –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
    
    async def callback_stop_monitoring(self, callback: CallbackQuery):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if user_id not in self.monitoring_tasks or self.monitoring_tasks[user_id].done():
            await callback.message.edit_text(
                "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
        self.monitoring_tasks[user_id].cancel()
        del self.monitoring_tasks[user_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await self.db.update_user_settings(user_id, is_monitoring_active=False)
        
        await callback.message.edit_text(
            "‚èπÔ∏è **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    async def callback_single_search(self, callback: CallbackQuery):
        """–†–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫"""
        user_id = callback.from_user.id
        settings = await self.db.get_user_settings(user_id)
        
        if not settings:
            await callback.message.edit_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "üîç **–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            parse_mode="Markdown"
        )
        await callback.answer()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        try:
            start_time = time.time()
            results = await self._perform_search(settings)
            execution_time = time.time() - start_time
            
            if results:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                search_params = self._get_search_params(settings)
                new_properties = await self.db.get_new_properties(user_id, results, search_params)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await self.db.log_monitoring_session(
                    user_id, search_params, len(results), len(new_properties), execution_time
                )
                
                if new_properties:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    await self._send_new_properties(user_id, new_properties)
                    
                    await callback.message.edit_text(
                        f"‚úÖ **–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                        f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(results)}\n"
                        f"üÜï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(new_properties)}\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f}—Å",
                        reply_markup=get_main_menu_keyboard(),
                        parse_mode="Markdown"
                    )
                else:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏–µ–π –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ", callback_data="show_all_results")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                    
                    await callback.message.edit_text(
                        f"‚úÖ **–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                        f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(results)}\n"
                        f"üîÑ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f}—Å\n\n"
                        f"üí° –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?",
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à –¥–ª—è –ø–æ–∫–∞–∑–∞
                    await self.db.cache_search_results(user_id, results)
            else:
                await callback.message.edit_text(
                    "‚ùå **–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–æ–≤–æ–º –ø–æ–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ**\n\n{str(e)[:100]}...",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _format_interval(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds} —Å–µ–∫"
        elif seconds < 3600:
            return f"{seconds // 60} –º–∏–Ω"
        elif seconds < 86400:
            return f"{seconds // 3600} —á"
        else:
            return f"{seconds // 86400} –¥–Ω"
    
    def _get_search_params(self, settings: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        return {
            "regions": settings["regions"],
            "min_bedrooms": settings["min_bedrooms"],
            "max_price": settings["max_price"],
            "max_results": settings["max_results_per_search"]
        }
    
    async def _perform_search(self, settings: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        all_results = []
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–≥–∏–æ–Ω—É
        for region in settings["regions"]:
            try:
                region_results = await self.parser.search_properties(
                    min_bedrooms=settings["min_bedrooms"],
                    max_price=settings["max_price"],
                    location=region,
                    limit=settings["max_results_per_search"] // len(settings["regions"])
                )
                all_results.extend(region_results)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ {region}: {e}")
                continue
        
        return all_results
    
    async def _monitoring_loop(self, user_id: int, settings: Dict[str, Any]):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        while True:
            try:
                start_time = time.time()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                results = await self._perform_search(settings)
                execution_time = time.time() - start_time
                
                if results:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    search_params = self._get_search_params(settings)
                    new_properties = await self.db.get_new_properties(user_id, results, search_params)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await self.db.log_monitoring_session(
                        user_id, search_params, len(results), len(new_properties), execution_time
                    )
                    
                    if new_properties:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await self._send_new_properties(user_id, new_properties)
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                        await self.bot.send_message(
                            user_id,
                            f"üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** –Ω–∞–π–¥–µ–Ω–æ {len(new_properties)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!",
                            parse_mode="Markdown"
                        )
                    else:
                        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(settings["monitoring_interval"])
                
            except asyncio.CancelledError:
                logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                await self.db.log_monitoring_session(
                    user_id, self._get_search_params(settings), 0, 0, 0, "error", str(e)
                )
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(settings["monitoring_interval"])
    
    async def _send_new_properties(self, user_id: int, properties: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        sent_urls = []
        
        for i, prop in enumerate(properties):
            try:
                message = self._format_property_message(prop)
                await self.bot.send_message(user_id, message, parse_mode="Markdown")
                sent_urls.append(prop["url"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < len(properties) - 1:
                    await asyncio.sleep(1.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(2.0)
        
        # –û—Ç–º–µ—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if sent_urls:
            await self.db.mark_properties_as_sent(user_id, sent_urls)
    
    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
        if not text:
            return text
        
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown
        chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in chars_to_escape:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    def _format_property_message(self, prop: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        title = self._escape_markdown(prop.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        price = f"‚Ç¨{prop['price']}" if prop.get('price') else '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        bedrooms = f"{prop['bedrooms']} —Å–ø–∞–ª–µ–Ω" if prop.get('bedrooms') else '–°–ø–∞–ª—å–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã'
        location = self._escape_markdown(prop.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'))
        property_type = self._escape_markdown(prop.get('property_type', '–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω'))
        url = prop.get('url', '')
        
        message = (
            f"üè† **{title}**\n\n"
            f"üí∞ {price}\n"
            f"üõèÔ∏è {bedrooms}\n"
            f"üìç {location}\n"
            f"üè† {property_type}\n\n"
        )
        
        if prop.get('description'):
            desc = self._escape_markdown(prop['description'])
            desc = desc[:150] + "..." if len(desc) > 150 else desc
            message += f"üìù {desc}\n\n"
        
        if url:
            message += f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({url})"
        
        return message


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏...
