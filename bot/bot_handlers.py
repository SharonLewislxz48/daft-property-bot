#!/usr/bin/env python3
"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ (—á–∞—Å—Ç—å 2)
"""

import asyncio
import logging
from typing import List, Dict, Any

from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

from config.regions import ALL_LOCATIONS, LIMITS
from bot.keyboards import (
    get_settings_menu_keyboard, get_regions_menu_keyboard,
    get_region_categories_keyboard, get_category_regions_keyboard,
    get_popular_combinations_keyboard, get_user_regions_keyboard, get_bedrooms_keyboard,
    get_price_keyboard, get_interval_keyboard, get_main_menu_keyboard,
    get_statistics_keyboard, get_replace_regions_keyboard
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BotStates(StatesGroup):
    waiting_custom_price = State()
    waiting_custom_interval = State()
    waiting_region_search = State()

class EnhancedPropertyBotHandlers:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞"""
    
    # === –ù–ê–°–¢–†–û–ô–ö–ò ===
    
    async def callback_show_settings(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        user_id = callback.from_user.id
        settings = await self.db.get_user_settings(user_id)
        
        if not settings:
            await callback.message.edit_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        regions_text = ", ".join([
            ALL_LOCATIONS.get(region, region) for region in settings["regions"]
        ])
        interval_text = self._format_interval(settings["monitoring_interval"])
        
        settings_text = (
            f"‚öôÔ∏è **–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
            f"üèòÔ∏è **–†–µ–≥–∏–æ–Ω—ã –ø–æ–∏—Å–∫–∞:**\n{regions_text}\n\n"
            f"üõèÔ∏è **–ú–∏–Ω–∏–º—É–º —Å–ø–∞–ª–µ–Ω:** {settings['min_bedrooms']}\n"
            f"üí∞ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:** ‚Ç¨{settings['max_price']}\n"
            f"‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {interval_text}\n"
            f"üìä **–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:** {settings['max_results_per_search']}"
        )
        
        try:
            await callback.message.edit_text(
                settings_text,
                reply_markup=get_settings_menu_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
            if "message is not modified" in str(e):
                await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã ‚úÖ")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await callback.answer()
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ì–ò–û–ù–ê–ú–ò ===
    
    async def callback_manage_regions(self, callback: CallbackQuery):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–º–∏"""
        await callback.message.edit_text(
            "üèòÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –ø–æ–∏—Å–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_regions_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_add_region(self, callback: CallbackQuery):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        await callback.message.edit_text(
            "‚ûï **–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤:",
            reply_markup=get_region_categories_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_add_region(self, callback: CallbackQuery):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
        await callback.message.edit_text(
            "‚ûï **–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤:",
            reply_markup=get_region_categories_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def callback_remove_region(self, callback: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"""
        user_id = callback.from_user.id
        settings = await self.db.get_user_settings(user_id)
        
        if not settings or not settings["regions"]:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.",
                reply_markup=get_regions_menu_keyboard()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "‚ûñ **–£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=get_user_regions_keyboard(settings["regions"]),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_show_regions(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = callback.from_user.id
        settings = await self.db.get_user_settings(user_id)
        
        if not settings or not settings["regions"]:
            await callback.message.edit_text(
                "üìã **–í–∞—à–∏ —Ä–µ–≥–∏–æ–Ω—ã:** –ø—É—Å—Ç–æ\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.",
                reply_markup=get_regions_menu_keyboard(),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        regions_list = "\n".join([
            f"‚Ä¢ {ALL_LOCATIONS.get(region, region)}"
            for region in settings["regions"]
        ])
        
        await callback.message.edit_text(
            f"üìã **–í–∞—à–∏ —Ä–µ–≥–∏–æ–Ω—ã:**\n\n{regions_list}\n\n"
            f"–í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(settings['regions'])}",
            reply_markup=get_regions_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_list_all_regions(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã"""
        regions_text = "\n".join([
            f"‚Ä¢ {name}" for name in sorted(ALL_LOCATIONS.values())
        ])
        
        await callback.message.edit_text(
            f"üóÇÔ∏è **–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:**\n\n{regions_text}\n\n"
            f"–í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(ALL_LOCATIONS)}",
            reply_markup=get_regions_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_region_page(self, callback: CallbackQuery):
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        data_parts = callback.data.split("_")
        if len(data_parts) >= 4:
            category = data_parts[2]
            page = int(data_parts[3])
            
            await callback.message.edit_reply_markup(
                reply_markup=get_category_regions_keyboard(category, page)
            )
        await callback.answer()
    
    async def callback_category_page(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        data_parts = callback.data.split("_")
        category = data_parts[2]
        page = int(data_parts[3])
        
        await callback.message.edit_reply_markup(
            reply_markup=get_category_regions_keyboard(category, page)
        )
        await callback.answer()
    
    async def callback_select_region(self, callback: CallbackQuery):
        """–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        region_key = callback.data.replace("select_region_", "")
        user_id = callback.from_user.id
        
        settings = await self.db.get_user_settings(user_id)
        if not settings:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–≥–∏–æ–Ω –ø–æ—Å–ª–µ "–∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ" - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É —Ñ–ª–∞–≥—É –≤ callback data –∏–ª–∏ –¥—Ä—É–≥–æ–º—É —Å–ø–æ—Å–æ–±—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤
        if len(settings["regions"]) >= LIMITS["max_regions"]:
            await callback.answer(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤ ({LIMITS['max_regions']})",
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ä–µ–≥–∏–æ–Ω
        if region_key in settings["regions"]:
            await callback.answer("‚ö†Ô∏è –†–µ–≥–∏–æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
        new_regions = settings["regions"] + [region_key]
        await self.db.update_user_settings(user_id, regions=new_regions)
        
        region_name = ALL_LOCATIONS.get(region_key, region_key)
        
        await callback.message.edit_text(
            f"‚úÖ **–†–µ–≥–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"üèòÔ∏è {region_name}\n\n"
            f"–í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(new_regions)}",
            reply_markup=get_regions_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {region_name}")
    
    async def callback_replace_select_region(self, callback: CallbackQuery):
        """–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–º–µ–Ω—ã"""
        region_key = callback.data.replace("replace_select_region_", "")
        user_id = callback.from_user.id
        
        settings = await self.db.get_user_settings(user_id)
        if not settings:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
        
        # –í —Ä–µ–∂–∏–º–µ –∑–∞–º–µ–Ω—ã –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –∫ —É–∂–µ –æ—á–∏—â–µ–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É
        new_regions = settings["regions"] + [region_key]
        await self.db.update_user_settings(user_id, regions=new_regions)
        
        region_name = ALL_LOCATIONS.get(region_key, region_key)
        
        await callback.message.edit_text(
            f"üîÑ **–†–µ–≥–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫!**\n\n"
            f"üèòÔ∏è {region_name}\n\n"
            f"–ù–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(new_regions)}\n\n"
            f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
            reply_markup=get_regions_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω –Ω–∞: {region_name}")

    async def callback_remove_specific_region(self, callback: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
        region_key = callback.data.replace("remove_region_", "")
        user_id = callback.from_user.id
        
        settings = await self.db.get_user_settings(user_id)
        if not settings:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–≥–∏–æ–Ω
        if len(settings["regions"]) <= 1:
            await callback.answer(
                "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–≥–∏–æ–Ω",
                show_alert=True
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
        new_regions = [r for r in settings["regions"] if r != region_key]
        await self.db.update_user_settings(user_id, regions=new_regions)
        
        region_name = ALL_LOCATIONS.get(region_key, region_key)
        
        await callback.message.edit_text(
            f"‚úÖ **–†–µ–≥–∏–æ–Ω —É–¥–∞–ª–µ–Ω!**\n\n"
            f"üèòÔ∏è {region_name}\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(new_regions)}",
            reply_markup=get_regions_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer(f"‚ùå –£–¥–∞–ª–µ–Ω: {region_name}")
    
    async def callback_replace_all_regions(self, callback: CallbackQuery):
        """–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã - –æ—á–∏—Å—Ç–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ"""
        await callback.message.edit_text(
            "üîÑ **–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã**\n\n"
            "–í—Å–µ —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤:",
            reply_markup=get_replace_regions_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_replace_category_selection(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–º–µ–Ω—ã —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        category = callback.data.replace("replace_category_", "")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        await self.db.clear_user_regions(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º replace_
        await callback.message.edit_text(
            f"üîÑ **–ó–∞–º–µ–Ω–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤**\n\n"
            f"–°—Ç–∞—Ä—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –æ—á–∏—â–µ–Ω—ã.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:",
            reply_markup=get_category_regions_keyboard(category, 0, "replace_select_region_"),
            parse_mode="Markdown"
        )
        await callback.answer("‚úÖ –†–µ–≥–∏–æ–Ω—ã –æ—á–∏—â–µ–Ω—ã")

    # === –ù–ê–°–¢–†–û–ô–ö–ê –°–ü–ê–õ–ï–ù ===
    
    async def callback_set_bedrooms(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω"""
        await callback.message.edit_text(
            "üõèÔ∏è **–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=get_bedrooms_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_select_bedrooms(self, callback: CallbackQuery):
        """–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω"""
        bedrooms = int(callback.data.replace("bedrooms_", ""))
        user_id = callback.from_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if bedrooms < LIMITS["min_bedrooms"]["min"] or bedrooms > LIMITS["min_bedrooms"]["max"]:
            await callback.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω ({LIMITS['min_bedrooms']['min']}-{LIMITS['min_bedrooms']['max']})",
                show_alert=True
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.db.update_user_settings(user_id, min_bedrooms=bedrooms)
        
        bedrooms_text = "–°—Ç—É–¥–∏—è" if bedrooms == 0 else f"{bedrooms} —Å–ø–∞–ª–µ–Ω"
        
        await callback.message.edit_text(
            f"‚úÖ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            f"üõèÔ∏è –ú–∏–Ω–∏–º—É–º: {bedrooms_text}",
            reply_markup=get_settings_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {bedrooms_text}")
    
    # === –ù–ê–°–¢–†–û–ô–ö–ê –¶–ï–ù–´ ===
    
    async def callback_set_max_price(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
        await callback.message.edit_text(
            "üí∞ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
            reply_markup=get_price_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_select_price(self, callback: CallbackQuery):
        """–í—ã–±–æ—Ä —Ü–µ–Ω—ã"""
        price = int(callback.data.replace("price_", ""))
        user_id = callback.from_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if price < LIMITS["max_price"]["min"] or price > LIMITS["max_price"]["max"]:
            await callback.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ (‚Ç¨{LIMITS['max_price']['min']}-‚Ç¨{LIMITS['max_price']['max']})",
                show_alert=True
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.db.update_user_settings(user_id, max_price=price)
        
        await callback.message.edit_text(
            f"‚úÖ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"üí∞ –î–æ ‚Ç¨{price}",
            reply_markup=get_settings_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ‚Ç¨{price}")
    
    async def callback_custom_price(self, callback: CallbackQuery, state: FSMContext):
        """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–Ω—ã"""
        await state.set_state(BotStates.waiting_custom_price)
        
        await callback.message.edit_text(
            f"‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É**\n\n"
            f"–î–∏–∞–ø–∞–∑–æ–Ω: ‚Ç¨{LIMITS['max_price']['min']} - ‚Ç¨{LIMITS['max_price']['max']}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def process_custom_price(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–Ω—ã"""
        try:
            price = int(message.text.strip())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if price < LIMITS["max_price"]["min"] or price > LIMITS["max_price"]["max"]:
                await message.answer(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –î–∏–∞–ø–∞–∑–æ–Ω: ‚Ç¨{LIMITS['max_price']['min']} - ‚Ç¨{LIMITS['max_price']['max']}"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_id = message.from_user.id
            await self.db.update_user_settings(user_id, max_price=price)
            
            await message.answer(
                f"‚úÖ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                f"üí∞ –î–æ ‚Ç¨{price}",
                reply_markup=get_settings_menu_keyboard(),
                parse_mode="Markdown"
            )
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
            return
        
        await state.clear()
    
    # === –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–í–ê–õ–ê ===
    
    async def callback_set_interval(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        await callback.message.edit_text(
            "‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞**\n\n"
            "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_interval_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def callback_select_interval(self, callback: CallbackQuery):
        """–í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        interval = int(callback.data.replace("interval_", ""))
        user_id = callback.from_user.id
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if interval < LIMITS["monitoring_interval"]["min"] or interval > LIMITS["monitoring_interval"]["max"]:
            await callback.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                show_alert=True
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.db.update_user_settings(user_id, monitoring_interval=interval)
        
        interval_text = self._format_interval(interval)
        
        await callback.message.edit_text(
            f"‚úÖ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"‚è∞ –ö–∞–∂–¥—ã–µ {interval_text}",
            reply_markup=get_settings_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {interval_text}")
    
    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    
    async def callback_show_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        days = int(callback.data.replace("stats_", ""))
        user_id = callback.from_user.id
        
        stats = await self.db.get_user_statistics(user_id, days)
        
        stats_text = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π**\n\n"
            f"**üè† –û–±—ä—è–≤–ª–µ–Ω–∏—è:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {stats['properties']['total']}\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['properties']['sent']}\n"
        )
        
        if stats['properties']['total'] > 0:
            stats_text += (
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ‚Ç¨{stats['properties']['avg_price']}\n"
                f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ‚Ç¨{stats['properties']['min_price']} - ‚Ç¨{stats['properties']['max_price']}\n\n"
            )
        else:
            stats_text += "\n"
        
        stats_text += (
            f"**üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['monitoring']['total_sessions']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['monitoring']['successful_sessions']}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['monitoring']['avg_execution_time']}—Å\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['monitoring']['total_new_properties']}"
        )
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_statistics_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def process_custom_interval(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            interval_minutes = int(message.text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç - 24 —á–∞—Å–∞)
            if interval_minutes < 5:
                await message.reply(
                    "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 5 –º–∏–Ω—É—Ç"
                )
                return
            
            if interval_minutes > 1440:  # 24 —á–∞—Å–∞
                await message.reply(
                    "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç)"
                )
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
            interval_seconds = interval_minutes * 60
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_id = message.from_user.id
            await self.db.update_user_settings(
                user_id,
                monitoring_interval=interval_seconds
            )
            
            await message.reply(
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval_minutes} –º–∏–Ω—É—Ç",
                reply_markup=get_main_menu_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except ValueError:
            await message.reply(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç)\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 60"
            )
    
    async def callback_category_selection(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        category = callback.data.replace("category_", "")
        
        if category == "popular":
            await callback.message.edit_text(
                "‚≠ê **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤:",
                reply_markup=get_popular_combinations_keyboard(),
                parse_mode="Markdown"
            )
        else:
            # –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_names = {
                "dublin_areas": "üèôÔ∏è –†–∞–π–æ–Ω—ã –î—É–±–ª–∏–Ω–∞",
                "main_cities": "üåÜ –û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞",
                "republic_counties": "üó∫Ô∏è –ì—Ä–∞—Ñ—Å—Ç–≤–∞ –ò—Ä–ª–∞–Ω–¥–∏–∏", 
                "northern_counties": "üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø –°–µ–≤–µ—Ä–Ω–∞—è –ò—Ä–ª–∞–Ω–¥–∏—è"
            }
            
            title = category_names.get(category, "–†–µ–≥–∏–æ–Ω—ã")
            await callback.message.edit_text(
                f"{title}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                reply_markup=get_category_regions_keyboard(category, page=0),
                parse_mode="Markdown"
            )
        
        await callback.answer()
    
    async def callback_select_combo(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"""
        from config.regions import POPULAR_COMBINATIONS
        
        combo_key = callback.data.replace("select_combo_", "")
        user_id = callback.from_user.id
        
        if combo_key in POPULAR_COMBINATIONS:
            regions = POPULAR_COMBINATIONS[combo_key]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.db.update_user_settings(
                user_id,
                regions=regions
            )
            
            combo_names = {
                "dublin_central": "üèõÔ∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –î—É–±–ª–∏–Ω",
                "dublin_south": "üå≥ –Æ–∂–Ω—ã–π –î—É–±–ª–∏–Ω",
                "dublin_north": "üè¢ –°–µ–≤–µ—Ä–Ω—ã–π –î—É–±–ª–∏–Ω", 
                "dublin_west": "üèòÔ∏è –ó–∞–ø–∞–¥–Ω—ã–π –î—É–±–ª–∏–Ω",
                "major_cities": "üåÜ –ö—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞",
                "student_areas": "üéì –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ä–∞–π–æ–Ω—ã"
            }
            
            combo_name = combo_names.get(combo_key, combo_key)
            regions_text = ", ".join(regions[:3])
            if len(regions) > 3:
                regions_text += f" –∏ –µ—â–µ {len(regions) - 3}"
            
            await callback.message.edit_text(
                f"‚úÖ **–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {combo_name}**\n\n"
                f"üìç –†–µ–≥–∏–æ–Ω—ã: {regions_text}\n"
                f"üìä –í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(regions)}",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=get_main_menu_keyboard()
            )
        
        await callback.answer()

    async def callback_search_region(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        await callback.message.edit_text(
            "üîç **–ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: Dublin, Cork, Galway)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_regions")]
            ]),
            parse_mode="Markdown"
        )
        await state.set_state(BotStates.waiting_region_search)
        await callback.answer()

    async def process_region_search(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
        from config.regions import ALL_REGIONS
        from bot.keyboards import get_main_menu_keyboard
        
        search_term = message.text.lower().strip()
        
        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º
        found_regions = []
        for region_id, region_name in ALL_REGIONS.items():
            if search_term in region_name.lower():
                found_regions.append((region_id, region_name))
        
        if found_regions:
            if len(found_regions) == 1:
                # –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                region_id, region_name = found_regions[0]
                user_id = message.from_user.id
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
                success = self.db.add_user_region(user_id, region_id)
                
                if success:
                    await message.answer(
                        f"‚úÖ **–†–µ–≥–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω**\n\n"
                        f"üìç {region_name}\n\n"
                        "–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ –ø–æ–∏—Å–∫.",
                        reply_markup=get_main_menu_keyboard(),
                        parse_mode="Markdown"
                    )
                else:
                    await message.answer(
                        f"‚ö†Ô∏è **–†–µ–≥–∏–æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω**\n\n"
                        f"üìç {region_name}",
                        reply_markup=get_main_menu_keyboard(),
                        parse_mode="Markdown"
                    )
            else:
                # –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤
                text = f"üîç **–ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(found_regions)}**\n\n"
                for i, (region_id, region_name) in enumerate(found_regions[:10], 1):
                    text += f"{i}. {region_name}\n"
                
                if len(found_regions) > 10:
                    text += f"\n... –∏ –µ—â–µ {len(found_regions) - 10} —Ä–µ–≥–∏–æ–Ω–æ–≤"
                
                text += "\n\n–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."
                
                await message.answer(
                    text,
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
        else:
            await message.answer(
                f"‚ùå **–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )
        
        await state.clear()

    async def callback_noop(self, callback: CallbackQuery):
        """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        await callback.answer()

    async def callback_current_page(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–±—ã—á–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞)"""
        await callback.answer("üìç –í—ã —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

    async def callback_recent_searches(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∏—Å–∫–æ–≤"""
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recent_searches = self.db.get_user_recent_searches(user_id, limit=5)
        
        if recent_searches:
            text = "üìã **–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–∏**\n\n"
            for i, search in enumerate(recent_searches, 1):
                text += f"{i}. {search['regions']} | "
                text += f"üí∞ –¥–æ {search['max_price']}‚Ç¨ | "
                text += f"üõèÔ∏è {search['bedrooms']} –∫–æ–º–Ω.\n"
            
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ]),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "üìã **–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–∏**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∏—Å–∫–æ–≤.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ]),
                parse_mode="Markdown"
            )
        
        await callback.answer()

    async def callback_show_all_results(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞"""
        user_id = callback.from_user.id
        
        results = await self.db.get_cached_search_results(user_id)
        
        if not results:
            await callback.message.edit_text(
                "‚ùå **–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤**\n\n"
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="single_search")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"üìã **–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(results)})**\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
        try:
            await callback.answer("üì§ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ timeout –¥–ª—è callback
            logger.warning(f"Callback timeout: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await self._send_all_properties(user_id, results)

    async def _send_all_properties(self, user_id: int, properties: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not properties:
            return
        
        count = 0
        for prop in properties:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self._format_property_message(prop)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                await self.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode="Markdown",
                    disable_web_page_preview=False
                )
                
                count += 1
                
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                await asyncio.sleep(1.2)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(2.0)
                continue
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
        if not text:
            return str(text) if text is not None else ""
        
        text = str(text)
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown
        chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in chars_to_escape:
            text = text.replace(char, f'\\{char}')
        
        return text

    def _format_property_message(self, prop: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        title = self._escape_markdown(prop.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        price = self._escape_markdown(prop.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'))
        bedrooms = self._escape_markdown(prop.get('bedrooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
        location = self._escape_markdown(prop.get('location', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'))
        url = prop.get('url', '')
        
        message = f"üè† **{title}**\n\n"
        message += f"üí∞ **–¶–µ–Ω–∞:** {price}\n"
        message += f"üõèÔ∏è **–°–ø–∞–ª–µ–Ω:** {bedrooms}\n"
        message += f"üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {location}\n"
        
        if url:
            message += f"\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ Daft\\.ie]({url})"
        
        return message
