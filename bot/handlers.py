import asyncio
import logging
from typing import Dict, Any
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.media_group import MediaGroupBuilder

from config.settings import settings
from database.database import Database
try:
    from parser.bot_adapter import BotDaftParser as DaftParser
except ImportError:
    try:
        from parser.playwright_parser import PlaywrightDaftParser as DaftParser
    except ImportError:
        from parser.daft_parser import DaftParser
from parser.demo_parser import DemoParser
from parser.models import SearchFilters, Property
from .keyboards import (
    get_main_menu_keyboard, get_settings_keyboard, get_areas_keyboard,
    get_dublin_areas_keyboard, get_confirmation_keyboard, get_cancel_keyboard
)

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BotStates(StatesGroup):
    waiting_city = State()
    waiting_max_price = State()
    waiting_min_bedrooms = State()
    waiting_area_name = State()

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.db = Database()
        self.parser = DaftParser()
        self.monitoring_tasks: Dict[str, asyncio.Task] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_status, Command("status"))
        self.dp.message.register(self.cmd_add_area, Command("add_area"))
        self.dp.message.register(self.cmd_remove_area, Command("remove_area"))
        self.dp.message.register(self.cmd_list_areas, Command("list_areas"))
        self.dp.message.register(self.cmd_set_city, Command("set_city"))
        self.dp.message.register(self.cmd_set_max_price, Command("set_max_price"))
        self.dp.message.register(self.cmd_set_min_bedrooms, Command("set_min_bedrooms"))
        
        # –ö–æ–ª–±—ç–∫–∏
        self.dp.callback_query.register(self.callback_main_menu, F.data == "main_menu")
        self.dp.callback_query.register(self.callback_settings, F.data == "settings")
        self.dp.callback_query.register(self.callback_stats, F.data == "stats")
        self.dp.callback_query.register(self.callback_help, F.data == "help")
        self.dp.callback_query.register(self.callback_start_monitoring, F.data == "start_monitoring")
        self.dp.callback_query.register(self.callback_stop_monitoring, F.data == "stop_monitoring")
        self.dp.callback_query.register(self.callback_manage_areas, F.data == "manage_areas")
        self.dp.callback_query.register(self.callback_add_area, F.data == "add_area")
        self.dp.callback_query.register(self.callback_remove_area, F.data == "remove_area")
        self.dp.callback_query.register(self.callback_list_areas, F.data == "list_areas")
        self.dp.callback_query.register(self.callback_set_city, F.data == "set_city")
        self.dp.callback_query.register(self.callback_set_max_price, F.data == "set_max_price")
        self.dp.callback_query.register(self.callback_set_min_bedrooms, F.data == "set_min_bedrooms")
        self.dp.callback_query.register(self.callback_cancel, F.data == "cancel")
        
        # –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        self.dp.callback_query.register(
            self.callback_select_area, 
            F.data.startswith("select_area_")
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
        self.dp.message.register(self.process_city_input, StateFilter(BotStates.waiting_city))
        self.dp.message.register(self.process_max_price_input, StateFilter(BotStates.waiting_max_price))
        self.dp.message.register(self.process_min_bedrooms_input, StateFilter(BotStates.waiting_min_bedrooms))
        self.dp.message.register(self.process_area_input, StateFilter(BotStates.waiting_area_name))
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id == settings.ADMIN_USER_ID
    
    async def cmd_start(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await state.clear()
        
        welcome_text = (
            "üè† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daft.ie Property Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ –∂–∏–ª—å—è –≤ –ò—Ä–ª–∞–Ω–¥–∏–∏.\n\n"
            "üîç <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–≥–æ—Ä–æ–¥, —Ü–µ–Ω–∞, —Ä–∞–π–æ–Ω—ã)\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        
        await message.answer(
            welcome_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
    
    async def cmd_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n"
            "/add_area <i>Dublin 1</i> - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–π–æ–Ω\n"
            "/remove_area <i>Dublin 6</i> - —É–¥–∞–ª–∏—Ç—å —Ä–∞–π–æ–Ω\n"
            "/list_areas - —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤\n"
            "/set_city <i>Dublin</i> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥\n"
            "/set_max_price <i>2500</i> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞\n"
            "/set_min_bedrooms <i>3</i> - –º–∏–Ω–∏–º—É–º —Å–ø–∞–ª–µ–Ω\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "/status - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!"
        )
        
        await message.answer(help_text, parse_mode="HTML")
    
    async def cmd_status(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat_id = str(message.chat.id)
        bot_settings = await self.db.get_bot_settings(chat_id)
        stats = await self.db.get_statistics(chat_id)
        
        monitoring_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if bot_settings.is_monitoring else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        areas_text = ", ".join(bot_settings.areas) if bot_settings.areas else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        status_text = (
            f"üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
            f"üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {monitoring_status}\n"
            f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {bot_settings.city}\n"
            f"üí∞ <b>–ú–∞–∫—Å. —Ü–µ–Ω–∞:</b> ‚Ç¨{bot_settings.max_price:,}/–º–µ—Å—è—Ü\n"
            f"üõèÔ∏è <b>–ú–∏–Ω. —Å–ø–∞–ª—å–Ω–∏:</b> {bot_settings.min_bedrooms}\n"
            f"üìç <b>–†–∞–π–æ–Ω—ã:</b> {areas_text}\n\n"
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats.get('total_properties', 0)}\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {stats.get('sent_properties', 0)}\n"
        )
        
        if bot_settings.last_check:
            status_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {bot_settings.last_check.strftime('%d.%m.%Y %H:%M')}\n"
        
        await message.answer(status_text, parse_mode="HTML")
    
    async def cmd_add_area(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_area"""
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/add_area Dublin 1</code>",
                parse_mode="HTML"
            )
            return
        
        area = " ".join(args)
        chat_id = str(message.chat.id)
        
        bot_settings = await self.db.get_bot_settings(chat_id)
        if area not in bot_settings.areas:
            bot_settings.areas.append(area)
            await self.db.save_bot_settings(bot_settings)
            await message.answer(f"‚úÖ –†–∞–π–æ–Ω '{area}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–∏—Å–∫!")
        else:
            await message.answer(f"‚ÑπÔ∏è –†–∞–π–æ–Ω '{area}' —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
    
    async def cmd_remove_area(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_area"""
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/remove_area Dublin 6</code>",
                parse_mode="HTML"
            )
            return
        
        area = " ".join(args)
        chat_id = str(message.chat.id)
        
        bot_settings = await self.db.get_bot_settings(chat_id)
        if area in bot_settings.areas:
            bot_settings.areas.remove(area)
            await self.db.save_bot_settings(bot_settings)
            await message.answer(f"‚úÖ –†–∞–π–æ–Ω '{area}' —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–∏—Å–∫–∞!")
        else:
            await message.answer(f"‚ÑπÔ∏è –†–∞–π–æ–Ω '{area}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
    
    async def cmd_list_areas(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_areas"""
        chat_id = str(message.chat.id)
        bot_settings = await self.db.get_bot_settings(chat_id)
        
        if bot_settings.areas:
            areas_text = "\n".join([f"‚Ä¢ {area}" for area in bot_settings.areas])
            await message.answer(
                f"üìç <b>–†–∞–π–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>\n\n{areas_text}",
                parse_mode="HTML"
            )
        else:
            await message.answer("üìç –†–∞–π–æ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ë—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É.")
    
    async def cmd_set_city(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_city"""
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/set_city Dublin</code>",
                parse_mode="HTML"
            )
            return
        
        city = " ".join(args)
        chat_id = str(message.chat.id)
        
        bot_settings = await self.db.get_bot_settings(chat_id)
        bot_settings.city = city
        await self.db.save_bot_settings(bot_settings)
        await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
    
    async def cmd_set_max_price(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_max_price"""
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/set_max_price 2500</code>",
                parse_mode="HTML"
            )
            return
        
        try:
            max_price = int(args[0])
            if max_price <= 0:
                raise ValueError()
            
            chat_id = str(message.chat.id)
            bot_settings = await self.db.get_bot_settings(chat_id)
            bot_settings.max_price = max_price
            await self.db.save_bot_settings(bot_settings)
            await message.answer(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ‚Ç¨{max_price:,}/–º–µ—Å—è—Ü")
            
        except ValueError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
    
    async def cmd_set_min_bedrooms(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_min_bedrooms"""
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/set_min_bedrooms 3</code>",
                parse_mode="HTML"
            )
            return
        
        try:
            min_bedrooms = int(args[0])
            if min_bedrooms < 0:
                raise ValueError()
            
            chat_id = str(message.chat.id)
            bot_settings = await self.db.get_bot_settings(chat_id)
            bot_settings.min_bedrooms = min_bedrooms
            await self.db.save_bot_settings(bot_settings)
            
            bedrooms_text = "—Å—Ç—É–¥–∏–∏" if min_bedrooms == 0 else f"{min_bedrooms}+ —Å–ø–∞–ª–µ–Ω"
            await message.answer(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω: {bedrooms_text}")
            
        except ValueError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0).")
    
    # –ö–æ–ª–±—ç–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    async def callback_main_menu(self, callback: CallbackQuery, state: FSMContext):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await state.clear()
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    
    async def callback_settings(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
        await state.clear()
        chat_id = str(callback.message.chat.id)
        bot_settings = await self.db.get_bot_settings(chat_id)
        
        areas_text = ", ".join(bot_settings.areas) if bot_settings.areas else "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        
        settings_text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞</b>\n\n"
            f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {bot_settings.city}\n"
            f"üí∞ <b>–ú–∞–∫—Å. —Ü–µ–Ω–∞:</b> ‚Ç¨{bot_settings.max_price:,}/–º–µ—Å—è—Ü\n"
            f"üõèÔ∏è <b>–ú–∏–Ω. —Å–ø–∞–ª—å–Ω–∏:</b> {bot_settings.min_bedrooms}\n"
            f"üìç <b>–†–∞–π–æ–Ω—ã:</b> {areas_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        await callback.message.edit_text(
            settings_text,
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        await callback.answer()
    
    async def callback_stats(self, callback: CallbackQuery):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        chat_id = str(callback.message.chat.id)
        stats = await self.db.get_statistics(chat_id)
        bot_settings = await self.db.get_bot_settings(chat_id)
        
        monitoring_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if bot_settings.is_monitoring else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {monitoring_status}\n"
            f"üìà <b>–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:</b> {stats.get('total_properties', 0)}\n"
            f"üì§ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç:</b> {stats.get('sent_properties', 0)}\n"
        )
        
        if bot_settings.last_check:
            stats_text += f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {bot_settings.last_check.strftime('%d.%m.%Y %H:%M')}\n"
        
        if stats.get('last_parsing_run'):
            stats_text += f"üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥:</b> {stats['last_parsing_run']}\n"
        
        await callback.message.edit_text(
            stats_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    
    async def callback_help(self, callback: CallbackQuery):
        """–ü–æ–º–æ—â—å"""
        help_text = (
            "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
            "üîç <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>\n"
            "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞\n"
            "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ <b>–ì–æ—Ä–æ–¥</b> - –≥–¥–µ –∏—Å–∫–∞—Ç—å (Dublin, Cork, etc.)\n"
            "‚Ä¢ <b>–ú–∞–∫—Å. —Ü–µ–Ω–∞</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã\n"
            "‚Ä¢ <b>–ú–∏–Ω. —Å–ø–∞–ª—å–Ω–∏</b> - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω\n"
            "‚Ä¢ <b>–†–∞–π–æ–Ω—ã</b> - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n"
            "üîÑ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            "–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, "
            "–∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
            "üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã (—Å–º. /help)"
        )
        
        await callback.message.edit_text(
            help_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    
    async def callback_start_monitoring(self, callback: CallbackQuery):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        chat_id = str(callback.message.chat.id)
        
        if chat_id in self.monitoring_tasks:
            await callback.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", show_alert=True)
            return
        
        bot_settings = await self.db.get_bot_settings(chat_id)
        bot_settings.is_monitoring = True
        await self.db.save_bot_settings(bot_settings)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        task = asyncio.create_task(self._monitoring_loop(chat_id))
        self.monitoring_tasks[chat_id] = task
        
        await callback.message.edit_text(
            "‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            "üîç –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã\n"
            "üì¨ –ù–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
    
    async def callback_stop_monitoring(self, callback: CallbackQuery):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        chat_id = str(callback.message.chat.id)
        
        if chat_id not in self.monitoring_tasks:
            await callback.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!", show_alert=True)
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
        task = self.monitoring_tasks.pop(chat_id)
        task.cancel()
        
        bot_settings = await self.db.get_bot_settings(chat_id)
        bot_settings.is_monitoring = False
        await self.db.save_bot_settings(bot_settings)
        
        await callback.message.edit_text(
            "‚èπÔ∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def callback_manage_areas(self, callback: CallbackQuery):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞–º–∏"""
        await callback.message.edit_text(
            "üìç <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_areas_keyboard()
        )
        await callback.answer()
    
    async def callback_add_area(self, callback: CallbackQuery):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞"""
        await callback.message.edit_text(
            "üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>",
            parse_mode="HTML",
            reply_markup=get_dublin_areas_keyboard()
        )
        await callback.answer()
    
    async def callback_select_area(self, callback: CallbackQuery):
        """–í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        area = callback.data.replace("select_area_", "").replace("_", " ")
        chat_id = str(callback.message.chat.id)
        
        bot_settings = await self.db.get_bot_settings(chat_id)
        if area not in bot_settings.areas:
            bot_settings.areas.append(area)
            await self.db.save_bot_settings(bot_settings)
            await callback.answer(f"‚úÖ –†–∞–π–æ–Ω '{area}' –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await callback.answer(f"‚ÑπÔ∏è –†–∞–π–æ–Ω '{area}' —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–∞–π–æ–Ω–æ–≤
        await self.callback_add_area(callback)
    
    async def callback_remove_area(self, callback: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞"""
        chat_id = str(callback.message.chat.id)
        bot_settings = await self.db.get_bot_settings(chat_id)
        
        if not bot_settings.areas:
            await callback.answer("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ –ø—É—Å—Ç", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–∞–π–æ–Ω–∞–º–∏
        keyboard_rows = []
        for area in bot_settings.areas:
            keyboard_rows.append([
                InlineKeyboardButton(
                    text=f"‚ùå {area}",
                    callback_data=f"delete_area_{area.replace(' ', '_')}"
                )
            ])
        
        keyboard_rows.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_areas")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        
        await callback.message.edit_text(
            "üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.answer()
    
    async def callback_list_areas(self, callback: CallbackQuery):
        """–°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤"""
        chat_id = str(callback.message.chat.id)
        bot_settings = await self.db.get_bot_settings(chat_id)
        
        if bot_settings.areas:
            areas_text = "\n".join([f"‚Ä¢ {area}" for area in bot_settings.areas])
            text = f"üìç <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã:</b>\n\n{areas_text}"
        else:
            text = "üìç <b>–†–∞–π–æ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n–ë—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É."
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_areas_keyboard()
        )
        await callback.answer()
    
    async def callback_set_city(self, callback: CallbackQuery, state: FSMContext):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞"""
        await state.set_state(BotStates.waiting_city)
        await callback.message.edit_text(
            "üèôÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Dublin, Cork, Galway):",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        await callback.answer()
    
    async def callback_set_max_price(self, callback: CallbackQuery, state: FSMContext):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
        await state.set_state(BotStates.waiting_max_price)
        await callback.message.edit_text(
            "üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –≤ –µ–≤—Ä–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500):",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        await callback.answer()
    
    async def callback_set_min_bedrooms(self, callback: CallbackQuery, state: FSMContext):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω"""
        await state.set_state(BotStates.waiting_min_bedrooms)
        await callback.message.edit_text(
            "üõèÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω (0 –¥–ª—è —Å—Ç—É–¥–∏–π, 1, 2, 3...):",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        await callback.answer()
    
    async def callback_cancel(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await state.clear()
        await self.callback_main_menu(callback, state)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–ª—è FSM
    async def process_city_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
        city = message.text.strip()
        chat_id = str(message.chat.id)
        
        bot_settings = await self.db.get_bot_settings(chat_id)
        bot_settings.city = city
        await self.db.save_bot_settings(bot_settings)
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{city}</b>",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
    
    async def process_max_price_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
        try:
            max_price = int(message.text.strip())
            if max_price <= 0:
                raise ValueError()
            
            chat_id = str(message.chat.id)
            bot_settings = await self.db.get_bot_settings(chat_id)
            bot_settings.max_price = max_price
            await self.db.save_bot_settings(bot_settings)
            
            await state.clear()
            await message.answer(
                f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>‚Ç¨{max_price:,}/–º–µ—Å—è—Ü</b>",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)."
            )
    
    async def process_min_bedrooms_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω"""
        try:
            min_bedrooms = int(message.text.strip())
            if min_bedrooms < 0:
                raise ValueError()
            
            chat_id = str(message.chat.id)
            bot_settings = await self.db.get_bot_settings(chat_id)
            bot_settings.min_bedrooms = min_bedrooms
            await self.db.save_bot_settings(bot_settings)
            
            await state.clear()
            bedrooms_text = "—Å—Ç—É–¥–∏–∏" if min_bedrooms == 0 else f"{min_bedrooms}+ —Å–ø–∞–ª–µ–Ω"
            await message.answer(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω: <b>{bedrooms_text}</b>",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0)."
            )
    
    async def process_area_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–∞"""
        area = message.text.strip()
        chat_id = str(message.chat.id)
        
        bot_settings = await self.db.get_bot_settings(chat_id)
        if area not in bot_settings.areas:
            bot_settings.areas.append(area)
            await self.db.save_bot_settings(bot_settings)
            await message.answer(f"‚úÖ –†–∞–π–æ–Ω '{area}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–∏—Å–∫!")
        else:
            await message.answer(f"‚ÑπÔ∏è –†–∞–π–æ–Ω '{area}' —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
        
        await state.clear()
        await message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    
    async def _monitoring_loop(self, chat_id: str):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        logger.info(f"Starting monitoring loop for chat {chat_id}")
        
        while True:
            try:
                start_time = datetime.now()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                bot_settings = await self.db.get_bot_settings(chat_id)
                if not bot_settings.is_monitoring:
                    logger.info(f"Monitoring disabled for chat {chat_id}")
                    break
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                search_filters = bot_settings.get_search_filters()
                
                # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ
                properties = []
                try:
                    async with DaftParser() as parser:
                        properties = await parser.search_properties(search_filters, max_pages=2)
                except Exception as e:
                    logger.warning(f"Main parser failed: {e}, switching to demo mode")
                    async with DemoParser() as demo_parser:
                        properties = await demo_parser.search_properties(search_filters)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                await self.db.save_properties(properties)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                new_properties = await self.db.get_new_properties(chat_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                sent_count = 0
                for property_obj in new_properties:
                    if await self._send_property_message(chat_id, property_obj):
                        await self.db.mark_property_sent(property_obj.id, chat_id)
                        sent_count += 1
                        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                bot_settings.last_check = datetime.now()
                await self.db.save_bot_settings(bot_settings)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                duration = (datetime.now() - start_time).total_seconds()
                await self.db.log_parsing_run(
                    chat_id=chat_id,
                    properties_found=len(properties),
                    new_properties=sent_count,
                    filters_used=search_filters.to_url_params(),
                    duration_seconds=duration
                )
                
                logger.info(f"Monitoring cycle completed for chat {chat_id}: "
                           f"{len(properties)} found, {sent_count} sent")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(settings.UPDATE_INTERVAL)
                
            except asyncio.CancelledError:
                logger.info(f"Monitoring loop cancelled for chat {chat_id}")
                break
            except Exception as e:
                logger.error(f"Error in monitoring loop for chat {chat_id}: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _send_property_message(self, chat_id: str, property_obj: Property) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = (
                f"üè† <b>{property_obj.title}</b>\n\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {property_obj.address}\n"
                f"üõèÔ∏è <b>–°–ø–∞–ª—å–Ω–∏:</b> {property_obj.format_bedrooms()}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {property_obj.format_price()}\n"
            )
            
            if property_obj.bathrooms:
                message_text += f"üöø <b>–í–∞–Ω–Ω—ã–µ:</b> {property_obj.bathrooms}\n"
            
            if property_obj.area:
                message_text += f"üó∫Ô∏è <b>–†–∞–π–æ–Ω:</b> {property_obj.area}\n"
            
            message_text += f"\nüîó <a href='{property_obj.url}'>–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if property_obj.image_url:
                try:
                    await self.bot.send_photo(
                        chat_id=chat_id,
                        photo=property_obj.image_url,
                        caption=message_text,
                        parse_mode="HTML"
                    )
                except Exception:
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ–≥–æ
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text=message_text,
                        parse_mode="HTML",
                        disable_web_page_preview=False
                    )
            else:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode="HTML",
                    disable_web_page_preview=False
                )
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending property message: {e}")
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.init_database()
        
        logger.info("Starting Telegram bot...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await self.dp.start_polling(self.bot)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping bot...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for task in self.monitoring_tasks.values():
            task.cancel()
        
        await self.bot.session.close()
