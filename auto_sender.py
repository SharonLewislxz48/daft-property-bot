#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Telegram
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç
"""

import asyncio
import subprocess
import logging
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def run_parser(min_bedrooms: int = 3, max_price: int = 2500, limit: int = 20):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç production –ø–∞—Ä—Å–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞: {min_bedrooms}+ —Å–ø–∞–ª–µ–Ω, –¥–æ ‚Ç¨{max_price}, –ª–∏–º–∏—Ç {limit}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º production –ø–∞—Ä—Å–µ—Ä
        cmd = [
            str(Path(".venv/bin/python")),
            "production_parser.py"
        ]
        
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode == 0:
            logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"–í—ã–≤–æ–¥ –ø–∞—Ä—Å–µ—Ä–∞:\n{stdout.decode()}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {stderr.decode()}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

async def send_to_telegram():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram"""
    try:
        logger.info("üì§ –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤—â–∏–∫
        from telegram_sender import PropertySender
        
        sender = PropertySender()
        await sender.run()
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–∞—Ä—Å–∏–Ω–≥ + –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    logger.info("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö –ò –û–¢–ü–†–ê–í–ö–ê –û–ë–™–Ø–í–õ–ï–ù–ò–ô")
    logger.info("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    search_params = {
        'min_bedrooms': 3,
        'max_price': 2500,
        'limit': 15
    }
    
    logger.info("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")
    for key, value in search_params.items():
        logger.info(f"   {key}: {value}")
    
    # –®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    if await run_parser(**search_params):
        logger.info("‚úÖ –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if await send_to_telegram():
            logger.info("‚úÖ –≠—Ç–∞–ø 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            logger.info("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("‚ùå –≠—Ç–∞–ø 2: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            return 1
    else:
        logger.error("‚ùå –≠—Ç–∞–ø 1: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
