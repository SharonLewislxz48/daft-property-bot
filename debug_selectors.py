#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ daft.ie
"""

import asyncio
from playwright.async_api import async_playwright

async def debug_page_structure():
    """
    –ò—Å—Å–ª–µ–¥—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    """
    search_url = "https://www.daft.ie/property-for-rent/dublin?rentalPrice_to=2500&numBeds_from=3"
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)  # Headless –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        context = await browser.new_context(
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
        )
        page = await context.new_page()
        
        try:
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: {search_url}")
            await page.goto(search_url, wait_until='networkidle', timeout=30000)
            await page.wait_for_timeout(5000)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            
            print("üîç –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-testid...")
            testid_elements = await page.query_selector_all('[data-testid]')
            print(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-testid: {len(testid_elements)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ data-testid
            testids = []
            for elem in testid_elements:
                testid = await elem.get_attribute('data-testid')
                if testid:
                    testids.append(testid)
            
            unique_testids = sorted(set(testids))
            print("üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ data-testid:")
            for testid in unique_testids:
                print(f"  - {testid}")
            
            print("\nüîç –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
            property_links = await page.query_selector_all('a[href*="/for-rent/"]')
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(property_links)}")
            
            if property_links:
                print("üìÑ –ü–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫:")
                for i, link in enumerate(property_links[:5]):
                    href = await link.get_attribute('href')
                    text = await link.text_content()
                    print(f"  {i+1}. {href} - {text[:50]}...")
            
            print("\nüîç –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ 'card' –∏–ª–∏ 'listing'...")
            card_selectors = [
                '[class*="card"]',
                '[class*="listing"]',
                '[class*="Card"]',
                '[class*="Listing"]',
                '[class*="result"]',
                '[class*="Result"]'
            ]
            
            for selector in card_selectors:
                elements = await page.query_selector_all(selector)
                if elements:
                    print(f"  {selector}: {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            print("\nüîç –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏...")
            price_selectors = [
                '[class*="price"]',
                '[class*="Price"]',
                'span:has-text("‚Ç¨")',
                '*:has-text("‚Ç¨")'
            ]
            
            for selector in price_selectors:
                try:
                    elements = await page.query_selector_all(selector)
                    if elements:
                        print(f"  {selector}: {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        if len(elements) > 0:
                            first_text = await elements[0].text_content()
                            print(f"    –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {first_text[:30]}...")
                except:
                    pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            html_content = await page.content()
            with open('debug_page.html', 'w', encoding='utf-8') as f:
                f.write(html_content)
            print("\nüíæ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_page.html")
            
            print("\n‚è∏Ô∏è –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            await page.wait_for_timeout(10000)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(debug_page_structure())
