#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ daft.ie
"""

import asyncio
import logging
import sys
from dataclasses import dataclass
from typing import List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
@dataclass
class SearchFilters:
    city: str
    max_price: int
    min_bedrooms: int
    areas: List[str] = None

@dataclass  
class Property:
    id: str
    title: str
    address: str
    price: int
    bedrooms: int
    bathrooms: int
    property_type: str
    url: str
    image_url: str = None
    description: str = None
    area: str = None
    posted_date: str = None
    
    def format_price(self):
        return f"‚Ç¨{self.price:,}"

# –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π settings –º–æ–¥—É–ª—å
class Settings:
    SEARCH_URL = "https://www.daft.ie"

settings = Settings()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞—Ä—Å–µ—Ä—É
sys.path.append('/home/barss/PycharmProjects/daftparser')

from parser.playwright_parser import PlaywrightDaftParser

async def test_url_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL...")
    
    parser = PlaywrightDaftParser()
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    filters1 = SearchFilters(
        city="dublin",
        max_price=2500,
        min_bedrooms=3
    )
    url1 = parser._build_search_url(filters1, page=1)
    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: {url1}")
    
    # –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞  
    url2 = parser._build_search_url(filters1, page=2)
    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: {url2}")
    
    # –¢–µ—Å—Ç 3: –° —Ä–∞–π–æ–Ω–∞–º–∏
    filters2 = SearchFilters(
        city="dublin", 
        max_price=2500,
        min_bedrooms=3,
        areas=["Dublin 1", "Dublin 2"]
    )
    url3 = parser._build_search_url(filters2, page=1)
    print(f"‚úÖ –° —Ä–∞–π–æ–Ω–∞–º–∏: {url3}")

async def test_real_search():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    
    filters = SearchFilters(
        city="dublin",
        max_price=2500,
        min_bedrooms=3
    )
    
    async with PlaywrightDaftParser() as parser:
        print(f"üîç –ü–æ–∏—Å–∫: {filters.min_bedrooms}+ —Å–ø–∞–ª–µ–Ω, –¥–æ ‚Ç¨{filters.max_price}, {filters.city}")
        
        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        properties = await parser.search_properties(filters, max_pages=1)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(properties)}")
        
        if properties:
            print(f"\nüìã –ü–µ—Ä–≤—ã–µ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
            for i, prop in enumerate(properties[:3], 1):
                print(f"  {i}. {prop.title}")
                print(f"     üí∞ {prop.format_price()}/–º–µ—Å—è—Ü")
                print(f"     üõèÔ∏è {prop.bedrooms} —Å–ø–∞–ª–µ–Ω, üöø {prop.bathrooms} –≤–∞–Ω–Ω—ã—Ö")
                print(f"     üìç {prop.address}")
                print(f"     üîó {prop.url}")
                print()
        else:
            print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

async def test_manual_url():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL...")
    
    test_url = "https://www.daft.ie/property-for-rent/dublin-city/houses?rentalPrice_to=2500&numBeds_from=3"
    print(f"URL: {test_url}")
    
    async with PlaywrightDaftParser() as parser:
        html_content = await parser._get_page_content(test_url)
        
        if html_content:
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ HTML
            if "for-rent" in html_content:
                print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É –≤ HTML")
            else:
                print("‚ùå –°—Å—ã–ª–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            if "‚Ç¨" in html_content or "euro" in html_content.lower():
                print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã –≤ HTML")
            else:
                print("‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—å HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open('/tmp/daft_test.html', 'w', encoding='utf-8') as f:
                f.write(html_content)
            print("üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/daft_test.html –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ daft.ie\n")
    
    try:
        # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL
        await test_url_generation()
        
        # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await test_manual_url()
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫
        await test_real_search()
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
