#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø–∞—Ä—Å–µ—Ä daft.ie —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

import asyncio
import re
from typing import List, Dict, Any
from playwright.async_api import async_playwright
import json
import datetime

class FinalDaftParser:
    def __init__(self):
        self.base_url = "https://www.daft.ie"
        
    async def get_properties(self, min_bedrooms: int = 3, max_price: int = 2500, location: str = "dublin", limit: int = 10) -> List[Dict[str, Any]]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å daft.ie
        """
        print(f"üîç –ò—â–µ–º {min_bedrooms}+ —Å–ø–∞–ª–µ–Ω –¥–æ ‚Ç¨{max_price} –≤ {location}")
        
        search_url = f"{self.base_url}/property-for-rent/{location}?rentalPrice_to={max_price}&numBeds_from={min_bedrooms}"
        print(f"üåê URL: {search_url}")
        
        async with async_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            browser = await p.chromium.launch(
                headless=True,
                args=['--no-sandbox', '--disable-setuid-sandbox']
            )
            
            context = await browser.new_context(
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
                viewport={'width': 1920, 'height': 1080}
            )
            
            page = await context.new_page()
            
            try:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                print("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                await page.goto(search_url, wait_until='networkidle', timeout=30000)
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                await page.wait_for_timeout(3000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                try:
                    results_element = await page.wait_for_selector('h1', timeout=5000)
                    results_text = await results_element.text_content()
                    count_match = re.search(r'(\d+)', results_text or '')
                    total_count = int(count_match.group(1)) if count_match else 0
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {total_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                except:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                print("üîó –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
                property_links = await page.query_selector_all('a[href*="/for-rent/"]')
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                unique_urls = set()
                for link in property_links:
                    href = await link.get_attribute('href')
                    if href and '/for-rent/' in href:
                        if href.startswith('/'):
                            href = self.base_url + href
                        unique_urls.add(href)
                
                print(f"üè† –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(unique_urls)}")
                
                # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                results = []
                processed_urls = list(unique_urls)[:limit]
                
                for i, url in enumerate(processed_urls):
                    print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i+1}/{len(processed_urls)}: {url.split('/')[-2] if '/' in url else url}")
                    
                    try:
                        property_data = await self._parse_property_page(page, url)
                        if property_data:
                            results.append(property_data)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            title = property_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]
                            price = f"‚Ç¨{property_data['price']}" if property_data.get('price') else '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                            beds = f"{property_data['bedrooms']} —Å–ø–∞–ª–µ–Ω" if property_data.get('bedrooms') else '–°–ø–∞–ª—å–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã'
                            print(f"  ‚úÖ {title} - {price}, {beds}")
                        else:
                            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                    
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
                        continue
                
                return results
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                return []
                
            finally:
                await browser.close()

    async def _parse_property_page(self, page, url: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        """
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            await page.goto(url, wait_until='domcontentloaded', timeout=15000)
            await page.wait_for_timeout(2000)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            property_data = {
                'url': url,
                'title': None,
                'price': None,
                'bedrooms': None,
                'property_type': None,
                'location': None,
                'description': None,
                'parsed_at': datetime.datetime.now().isoformat()
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                title_element = await page.query_selector('h1')
                if title_element:
                    property_data['title'] = (await title_element.text_content()).strip()
            except:
                pass
            
            # –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            price_selectors = [
                '[data-testid="price"]',
                '.TitleBlock_price',
                'span:has-text("‚Ç¨")',
                '.price'
            ]
            
            for selector in price_selectors:
                try:
                    price_element = await page.query_selector(selector)
                    if price_element:
                        price_text = await price_element.text_content()
                        price_match = re.search(r'‚Ç¨([\d,]+)', price_text or '')
                        if price_match:
                            property_data['price'] = int(price_match.group(1).replace(',', ''))
                            break
                except:
                    continue
            
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
            try:
                page_content = await page.content()
                
                # –ò—â–µ–º –≤ JSON –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                json_match = re.search(r'"numBedrooms":\s*"([^"]*)"', page_content)
                if json_match:
                    bedrooms_text = json_match.group(1)
                    bed_numbers = re.findall(r'(\d+)', bedrooms_text)
                    if bed_numbers:
                        property_data['bedrooms'] = max([int(x) for x in bed_numbers])
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ JSON, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                if not property_data['bedrooms']:
                    bed_match = re.search(r'(\d+)\s*bed', page_content, re.IGNORECASE)
                    if bed_match:
                        property_data['bedrooms'] = int(bed_match.group(1))
            except:
                pass
            
            # –ò—â–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            try:
                type_match = re.search(r'"propertyType":\s*"([^"]*)"', await page.content())
                if type_match:
                    property_data['property_type'] = type_match.group(1)
            except:
                pass
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if property_data['title']:
                location_match = re.search(r'Dublin\s+\d+|Dublin\s+\w+', property_data['title'])
                if location_match:
                    property_data['location'] = location_match.group()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if property_data['title'] or property_data['price']:
                return property_data
            else:
                return None
                
        except Exception as e:
            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
            return None

    def format_results(self, results: List[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        """
        if not results:
            return "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        output = [f"üè† –ù–ê–ô–î–ï–ù–û {len(results)} –û–ë–™–Ø–í–õ–ï–ù–ò–ô:\n"]
        
        for i, prop in enumerate(results, 1):
            price_str = f"‚Ç¨{prop['price']}" if prop['price'] else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            bedrooms_str = f"{prop['bedrooms']} —Å–ø–∞–ª–µ–Ω" if prop['bedrooms'] else "–°–ø–∞–ª—å–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
            type_str = prop.get('property_type', '–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω')
            location_str = prop.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            
            output.append(f"{i}. {prop['title']}")
            output.append(f"   üí∞ {price_str} | üõèÔ∏è {bedrooms_str} | üè† {type_str}")
            output.append(f"   üìç {location_str}")
            output.append(f"   üîó {prop['url']}")
            output.append("")
        
        return "\n".join(output)

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
    """
    print("üöÄ DAFT.IE PARSER - –ü–û–ò–°–ö –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò")
    print("=" * 50)
    
    parser = FinalDaftParser()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    min_bedrooms = 3
    max_price = 2500
    location = "dublin"
    limit = 10
    
    print(f"üéØ –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–ò–°–ö–ê:")
    print(f"   –ú–∏–Ω–∏–º—É–º —Å–ø–∞–ª–µ–Ω: {min_bedrooms}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ‚Ç¨{max_price}")
    print(f"   –õ–æ–∫–∞—Ü–∏—è: {location}")
    print(f"   –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {limit}")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    start_time = datetime.datetime.now()
    results = await parser.get_properties(
        min_bedrooms=min_bedrooms,
        max_price=max_price,
        location=location,
        limit=limit
    )
    
    duration = (datetime.datetime.now() - start_time).total_seconds()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê")
    print("=" * 50)
    
    formatted_output = parser.format_results(results)
    print(formatted_output)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("=" * 50)
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(results)}")
    
    if results:
        valid_prices = [r['price'] for r in results if r['price']]
        if valid_prices:
            avg_price = sum(valid_prices) / len(valid_prices)
            print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ‚Ç¨{avg_price:.0f}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    filename = f'daft_search_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

if __name__ == "__main__":
    asyncio.run(main())
