#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å –±–æ—Ç–æ–º
"""

import asyncio
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from production_parser import ProductionDaftParser

async def test_bot_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞ —Å –±–æ—Ç–æ–º —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ"""
    
    print("ü§ñ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–û–¢–û–ú")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤ –±–æ—Ç–µ
    user_settings = {
        "regions": ["dublin-city"],
        "min_bedrooms": 3,
        "max_price": 2500,
        "max_results_per_search": 10
    }
    
    print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    print(f"   üè† –†–µ–≥–∏–æ–Ω—ã: {user_settings['regions']}")
    print(f"   üõèÔ∏è –ú–∏–Ω. —Å–ø–∞–ª–µ–Ω: {user_settings['min_bedrooms']}")
    print(f"   üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: ‚Ç¨{user_settings['max_price']}")
    print(f"   üìã –ú–∞–∫—Å. —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {user_settings['max_results_per_search']}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∫–∞–∫ –≤ –±–æ—Ç–µ (–±–µ–∑ context manager)
    parser = ProductionDaftParser()
    
    try:
        print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∫–∞–∫ –≤ –±–æ—Ç–µ...")
        
        all_results = []
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–≥–∏–æ–Ω—É –∫–∞–∫ –≤ –±–æ—Ç–µ
        for region in user_settings["regions"]:
            print(f"   üìç –ü–æ–∏—Å–∫ –≤ —Ä–µ–≥–∏–æ–Ω–µ: {region}")
            
            # –í—ã–∑–æ–≤ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ
            region_results = await parser.search_properties(
                min_bedrooms=user_settings["min_bedrooms"],
                max_price=user_settings["max_price"],
                location=region,
                limit=user_settings["max_results_per_search"] // len(user_settings["regions"])
            )
            
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ {region}: {len(region_results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            all_results.extend(region_results)
        
        print(f"\nüìä –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û: {len(all_results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        if all_results:
            print("\nüìã –ü–µ—Ä–≤—ã–µ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
            for i, result in enumerate(all_results[:3], 1):
                print(f"  {i}. {result['title']}")
                print(f"     üí∞ ‚Ç¨{result['price']}/–º–µ—Å | üõèÔ∏è {result['bedrooms']} —Å–ø–∞–ª–µ–Ω")
                print(f"     üîó {result['url']}")
                print()
            
            print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–º–µ—Å—Ç–æ '0 –æ–±—ä—è–≤–ª–µ–Ω–∏–π'!")
            return True
        else:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
    print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 30)
    
    import time
    
    parser = ProductionDaftParser()
    
    start_time = time.time()
    results = await parser.search_properties(
        min_bedrooms=3,
        max_price=2500,
        location='dublin-city',
        limit=5,
        max_pages=1
    )
    end_time = time.time()
    
    duration = end_time - start_time
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {duration:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {len(results)/duration:.1f} –æ–±—ä—è–≤–ª–µ–Ω–∏–π/—Å–µ–∫")
    
    if duration < 10:  # –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è")
        return True
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–¥–ª–µ–Ω–Ω–∞—è")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_ok = await test_bot_integration()
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_ok = await test_performance()
    
    print("\n" + "=" * 50)
    print("üèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    if integration_ok and performance_ok:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        print("üöÄ –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º")
        print("üìä –ü—Ä–æ–±–ª–µ–º–∞ '0 –æ–±—ä—è–≤–ª–µ–Ω–∏–π' –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
        if not integration_ok:
            print("   üîß –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
        if not performance_ok:
            print("   ‚ö° –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

if __name__ == "__main__":
    asyncio.run(main())
