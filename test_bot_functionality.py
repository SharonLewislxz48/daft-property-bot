#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram API
"""

import asyncio
import sys
import logging
from pathlib import Path
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

async def test_bot_parser_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ª–æ–≥–∏–∫–æ–π –±–æ—Ç–∞"""
    
    print("ü§ñ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ë–û–¢–ê")
    print("=" * 40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –±–æ—Ç–∞
        from bot.enhanced_bot import EnhancedPropertyBot
        from production_parser import ProductionDaftParser
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –±–æ—Ç–∞ —É—Å–ø–µ—à–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Ç–æ–∫–µ–Ω–∞
        mock_token = "mock_token"
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—Å–µ—Ä)
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–µ—Ä –∏–∑ –±–æ—Ç–∞
            parser = ProductionDaftParser()
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–∞–∫ –≤ –±–æ—Ç–µ...")
            results = await parser.search_properties(
                min_bedrooms=3,
                max_price=2500,
                location="dublin-city",
                limit=5
            )
            
            print(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            if results:
                print("üìã –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
                result = results[0]
                print(f"   üìç {result['title']}")
                print(f"   üí∞ ‚Ç¨{result['price']}/–º–µ—Å")
                print(f"   üõèÔ∏è {result['bedrooms']} —Å–ø–∞–ª–µ–Ω")
                print(f"   üîó {result['url']}")
            
            return True
            
        except Exception as e:
            if "token" in str(e).lower():
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–µ)")
                print("‚úÖ –õ–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False
                
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_bot_components():
    """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
    
    print("\nüß© –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ë–û–¢–ê")
    print("=" * 30)
    
    components_to_test = [
        ("bot.enhanced_bot", "EnhancedPropertyBot"),
        ("database.enhanced_database", "EnhancedDatabase"),
        ("config.regions", "ALL_LOCATIONS"),
        ("bot.enhanced_keyboards", "get_main_menu_keyboard"),
        ("bot.message_formatter", "MessageFormatter"),
    ]
    
    success_count = 0
    
    for module_name, component_name in components_to_test:
        try:
            module = __import__(module_name, fromlist=[component_name])
            component = getattr(module, component_name)
            print(f"‚úÖ {module_name}.{component_name}")
            success_count += 1
        except Exception as e:
            print(f"‚ùå {module_name}.{component_name}: {e}")
    
    print(f"\nüìä –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}/{len(components_to_test)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    return success_count == len(components_to_test)

async def test_search_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"""
    
    print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 30)
    
    from production_parser import ProductionDaftParser
    import time
    
    # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ
    test_cases = [
        {"min_bedrooms": 3, "max_price": 2500, "location": "dublin-city"},
        {"min_bedrooms": 2, "max_price": 2000, "location": "dublin-city"},
        {"min_bedrooms": 4, "max_price": 3000, "location": "dublin-city"}
    ]
    
    parser = ProductionDaftParser()
    
    for i, params in enumerate(test_cases, 1):
        print(f"  üîç –¢–µ—Å—Ç {i}: {params['min_bedrooms']} —Å–ø–∞–ª–µ–Ω, ‚Ç¨{params['max_price']}, {params['location']}")
        
        start_time = time.time()
        results = await parser.search_properties(
            min_bedrooms=params["min_bedrooms"],
            max_price=params["max_price"],
            location=params["location"],
            limit=3,
            max_pages=1
        )
        duration = time.time() - start_time
        
        print(f"     ‚è±Ô∏è {duration:.2f}—Å | üìä {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        if duration > 5:  # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π
            print(f"     ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
            return False
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ë–û–¢–ê")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.WARNING)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test1 = await test_bot_parser_integration()
    test2 = await test_bot_components()
    test3 = await test_search_performance()
    
    print("\n" + "=" * 50)
    print("üèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    if test1 and test2 and test3:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º")
        print("üìä –ü—Ä–æ–±–ª–µ–º–∞ '0 –æ–±—ä—è–≤–ª–µ–Ω–∏–π' –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–µ–Ω–∞")
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –î–µ–ø–ª–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω")
        print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º")
        print("   3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•")
        if not test1:
            print("   üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–∞—Ä—Å–µ—Ä–∞")
        if not test2:
            print("   üì¶ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –±–æ—Ç–∞")
        if not test3:
            print("   ‚ö° –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")

if __name__ == "__main__":
    asyncio.run(main())
