#!/usr/bin/env python3
"""
API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ daft.ie —Å –±–æ—Ç–æ–º
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑ –±–æ—Ç–∞
"""

import asyncio
import json
from typing import Dict, List, Any, Optional
from production_daft_parser import ProductionDaftParser

class DaftParserAPI:
    """API –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.parser = ProductionDaftParser(log_level="WARNING")  # –ú–µ–Ω—å—à–µ –ª–æ–≥–æ–≤ –¥–ª—è –±–æ—Ç–∞
        
    async def search_properties_for_bot(
        self,
        min_bedrooms: int = 3,
        max_price: int = 2500,
        location: str = "dublin",
        property_type: str = "all",
        max_results: int = 10
    ) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ - –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        
        Args:
            min_bedrooms: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
            max_price: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ –µ–≤—Ä–æ
            location: –õ–æ–∫–∞—Ü–∏—è (dublin, cork, etc.)
            property_type: –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (all, houses, apartments)
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏—Å—Ö–æ–¥—è –∏–∑ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            estimated_pages = min(max(max_results // 20 + 1, 1), 5)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = await self.parser.search_all_properties(
                min_bedrooms=min_bedrooms,
                max_price=max_price,
                location=location,
                property_type=property_type,
                max_pages=estimated_pages
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            limited_results = results[:max_results]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –±–æ—Ç–∞
            response = {
                'success': True,
                'found_count': len(limited_results),
                'total_available': len(results),
                'search_params': {
                    'min_bedrooms': min_bedrooms,
                    'max_price': max_price,
                    'location': location,
                    'property_type': property_type
                },
                'properties': self._format_properties_for_bot(limited_results),
                'summary': self._create_summary(limited_results),
                'statistics': self._calculate_stats(limited_results)
            }
            
            return response
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'found_count': 0,
                'properties': []
            }
    
    def _format_properties_for_bot(self, properties: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É"""
        formatted = []
        
        for prop in properties:
            formatted_prop = {
                'title': prop.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'price': prop.get('price'),
                'price_formatted': f"‚Ç¨{prop['price']}" if prop.get('price') else '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
                'bedrooms': prop.get('bedrooms'),
                'bedrooms_formatted': f"{prop['bedrooms']} —Å–ø–∞–ª–µ–Ω" if prop.get('bedrooms') else '–°–ø–∞–ª—å–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
                'location': prop.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
                'property_type': prop.get('property_type', '–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω'),
                'url': prop.get('url'),
                'description': prop.get('description', '')[:150] + '...' if prop.get('description') and len(prop.get('description', '')) > 150 else prop.get('description', ''),
                'features': prop.get('features', []),
                'ber_rating': prop.get('ber_rating'),
                'bathrooms': prop.get('bathrooms')
            }
            formatted.append(formatted_prop)
        
        return formatted
    
    def _create_summary(self, properties: List[Dict[str, Any]]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –±–æ—Ç–∞"""
        if not properties:
            return "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        count = len(properties)
        prices = [p['price'] for p in properties if p.get('price')]
        bedrooms = [p['bedrooms'] for p in properties if p.get('bedrooms')]
        
        summary_parts = [f"üè† –ù–∞–π–¥–µ–Ω–æ {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"]
        
        if prices:
            avg_price = sum(prices) // len(prices)
            min_price = min(prices)
            max_price = max(prices)
            summary_parts.append(f"üí∞ –¶–µ–Ω—ã: ‚Ç¨{min_price} - ‚Ç¨{max_price} (—Å—Ä–µ–¥–Ω—è—è ‚Ç¨{avg_price})")
        
        if bedrooms:
            min_beds = min(bedrooms)
            max_beds = max(bedrooms)
            if min_beds == max_beds:
                summary_parts.append(f"üõèÔ∏è –°–ø–∞–ª—å–Ω–∏: {min_beds}")
            else:
                summary_parts.append(f"üõèÔ∏è –°–ø–∞–ª—å–Ω–∏: {min_beds} - {max_beds}")
        
        return "\n".join(summary_parts)
    
    def _calculate_stats(self, properties: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –±–æ—Ç–∞"""
        if not properties:
            return {}
        
        prices = [p['price'] for p in properties if p.get('price')]
        bedrooms = [p['bedrooms'] for p in properties if p.get('bedrooms')]
        locations = [p['location'] for p in properties if p.get('location')]
        
        stats = {
            'total_count': len(properties),
            'with_price': len(prices),
            'with_bedrooms': len(bedrooms)
        }
        
        if prices:
            stats.update({
                'avg_price': sum(prices) // len(prices),
                'min_price': min(prices),
                'max_price': max(prices)
            })
        
        if bedrooms:
            stats.update({
                'avg_bedrooms': sum(bedrooms) / len(bedrooms),
                'min_bedrooms': min(bedrooms),
                'max_bedrooms': max(bedrooms)
            })
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        if locations:
            location_counts = {}
            for loc in locations:
                location_counts[loc] = location_counts.get(loc, 0) + 1
            stats['popular_locations'] = sorted(location_counts.items(), key=lambda x: x[1], reverse=True)[:3]
        
        return stats
    
    def format_property_for_message(self, property_data: Dict[str, Any], include_url: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
        title = property_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        price = property_data.get('price_formatted', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        bedrooms = property_data.get('bedrooms_formatted', '–°–ø–∞–ª—å–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã')
        location = property_data.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        
        message_parts = [
            f"üè† {title}",
            f"üí∞ {price}",
            f"üõèÔ∏è {bedrooms}",
            f"üìç {location}"
        ]
        
        if property_data.get('ber_rating'):
            message_parts.append(f"‚ö° BER: {property_data['ber_rating']}")
        
        if include_url and property_data.get('url'):
            message_parts.append(f"üîó {property_data['url']}")
        
        return "\n".join(message_parts)
    
    def format_multiple_properties_for_message(
        self, 
        properties: List[Dict[str, Any]], 
        max_per_message: int = 5,
        include_urls: bool = False
    ) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        messages = []
        
        for i in range(0, len(properties), max_per_message):
            batch = properties[i:i + max_per_message]
            
            message_parts = []
            for j, prop in enumerate(batch, 1):
                prop_text = self.format_property_for_message(prop, include_url=include_urls)
                message_parts.append(f"{i + j}. {prop_text}")
            
            messages.append("\n\n".join(message_parts))
        
        return messages

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
async def bot_search_properties(
    min_bedrooms: int = 3,
    max_price: int = 2500,
    location: str = "dublin",
    property_type: str = "all",
    max_results: int = 10
) -> Dict[str, Any]:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –±–æ—Ç–∞
    """
    api = DaftParserAPI()
    return await api.search_properties_for_bot(
        min_bedrooms=min_bedrooms,
        max_price=max_price,
        location=location,
        property_type=property_type,
        max_results=max_results
    )

async def bot_quick_search(user_message: str) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü–∞—Ä—Å–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    import re
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    min_bedrooms = 3
    max_price = 2500
    location = "dublin"
    property_type = "all"
    max_results = 5
    
    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_lower = user_message.lower()
    
    # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω
    bedroom_match = re.search(r'(\d+)\+?\s*(?:—Å–ø–∞–ª–µ–Ω|bedroom|bed)', message_lower)
    if bedroom_match:
        min_bedrooms = int(bedroom_match.group(1))
    
    # –ò—â–µ–º —Ü–µ–Ω—É
    price_match = re.search(r'(?:–¥–æ|–ø–æ–¥|–º–∞–∫—Å–∏–º—É–º|max)?\s*‚Ç¨?(\d+)', message_lower)
    if price_match:
        max_price = int(price_match.group(1))
    
    # –ò—â–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    if '–¥–æ–º' in message_lower or 'house' in message_lower:
        property_type = "houses"
    elif '–∫–≤–∞—Ä—Ç–∏—Ä' in message_lower or 'apartment' in message_lower:
        property_type = "apartments"
    
    # –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é
    if 'cork' in message_lower or '–∫–æ—Ä–∫' in message_lower:
        location = "cork"
    elif 'galway' in message_lower or '–≥–æ–ª—É—ç–π' in message_lower:
        location = "galway"
    
    return await bot_search_properties(
        min_bedrooms=min_bedrooms,
        max_price=max_price,
        location=location,
        property_type=property_type,
        max_results=max_results
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
async def test_bot_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º"""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BOT API")
    print("=" * 50)
    
    api = DaftParserAPI()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    result = await api.search_properties_for_bot(
        min_bedrooms=3,
        max_price=2500,
        location="dublin",
        property_type="houses",
        max_results=3
    )
    
    if result['success']:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: {result['found_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        print(f"üìä –°–≤–æ–¥–∫–∞:\n{result['summary']}")
        
        print("\nüè† –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –î–õ–Ø –ë–û–¢–ê:")
        for i, prop in enumerate(result['properties'][:2], 1):
            formatted = api.format_property_for_message(prop)
            print(f"\n{i}. {formatted}")
            
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = api.format_multiple_properties_for_message(
            result['properties'], 
            max_per_message=2, 
            include_urls=False
        )
        
        print(f"\nüì± –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ë–û–¢–ê ({len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
        for i, message in enumerate(messages, 1):
            print(f"\n–°–æ–æ–±—â–µ–Ω–∏–µ {i}:\n{message}")
            
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

if __name__ == "__main__":
    asyncio.run(test_bot_integration())
