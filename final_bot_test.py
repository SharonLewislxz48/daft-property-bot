#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
"""
import asyncio
import logging
from datetime import datetime
from typing import List
from aiogram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FinalTelegramBot:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self, token: str, chat_id: str):
        self.bot = Bot(token=token)
        self.chat_id = chat_id
        
    async def send_real_properties(self, city="Dublin", max_price=2500, min_bedrooms=3):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–µ—Ä —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            import sys
            sys.path.append('/home/barss/PycharmProjects/daftparser')
            from parser.final_daft_parser import FinalDaftParser
            
            logger.info(f"üîç Searching properties: {city}, max ‚Ç¨{max_price}, {min_bedrooms}+ beds")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä
            parser = FinalDaftParser()
            properties = await parser.search_with_bypass(city, max_price, min_bedrooms)
            
            if not properties:
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text="‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö...",
                    parse_mode="Markdown"
                )
                await parser.close()
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_time = datetime.now().strftime('%H:%M')
            current_date = datetime.now().strftime('%d.%m.%Y')
            
            message = f"üè† *–ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ {city}* ({current_time})\n\n"
            message += f"üîç *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:*\n"
            message += f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ‚Ç¨{max_price:,}\n"
            message += f"üõèÔ∏è –ú–∏–Ω–∏–º—É–º —Å–ø–∞–ª–µ–Ω: {min_bedrooms}\n"
            message += f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            message += "üìã *–¢–û–ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è:*\n\n"
            
            for i, prop in enumerate(properties[:6], 1):
                message += f"*{i}. {prop['title']}*\n"
                message += f"üí∞ {prop['price']}\n"
                message += f"üìç {prop['address']}\n"
                
                if prop.get('bedrooms'):
                    bedrooms = prop['bedrooms']
                    bathrooms = prop.get('bathrooms', 1)
                    message += f"üè† {bedrooms} —Å–ø–∞–ª–µ–Ω, {bathrooms} –≤–∞–Ω–Ω–∞—è\n"
                
                message += f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({prop['url']})\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            message += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            message += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_date} {current_time}\n"
            message += f"‚úÖ *–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ*\n"
            message += f"üîì *–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ*\n"
            message += f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ daft.ie"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
            logger.info(f"‚úÖ Sent {len(properties[:6])} properties out of {len(properties)} found")
            
            await parser.close()
            return True
            
        except Exception as e:
            logger.error(f"Error sending properties: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö*\n\n"
            error_message += f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n"
            error_message += f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: {str(e)[:100]}...\n"
            error_message += f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=error_message,
                parse_mode="Markdown"
            )
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞"""
        await self.bot.session.close()

# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
async def test_final_bot():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
    logger.info("üöÄ Starting FINAL bot test with bypass...")
    
    bot = FinalTelegramBot(
        token="8219994646:AAEJMZGow2b_F4OcTQBqGqZp0-8baLVnatQ",
        chat_id="-1002819366953"
    )
    
    try:
        success = await bot.send_real_properties("Dublin", 2500, 3)
        
        if success:
            logger.info("üéâ FINAL BOT TEST SUCCESSFUL!")
            print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!")
            print("‚úÖ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø—É")
            print("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–æ–π–¥–µ–Ω–∞")
            print("üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å daft.ie")
        else:
            logger.warning("‚ö†Ô∏è Final bot test had issues")
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–æ–º")
            
    except Exception as e:
        logger.error(f"Final bot test failed: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        await bot.close()

if __name__ == "__main__":
    asyncio.run(test_final_bot())
