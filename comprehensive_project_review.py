#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–µ–≤–∏–∑–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ daft-property-bot
"""

import asyncio
import sys
import os
import logging
from pathlib import Path
import json
import time
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

class ProjectReviewer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.results = {}
        
    async def check_parser_functionality(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –ü–ê–†–°–ï–†–ê")
        print("=" * 30)
        
        results = {
            "status": "unknown",
            "tests": {},
            "performance": {},
            "issues": []
        }
        
        try:
            from production_parser import ProductionDaftParser
            
            # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            parser = ProductionDaftParser()
            start_time = time.time()
            
            properties = await parser.search_properties(
                min_bedrooms=3,
                max_price=2500,
                location='dublin-city',
                limit=5,
                max_pages=1
            )
            
            search_time = time.time() - start_time
            
            results["tests"]["basic_search"] = {
                "passed": len(properties) > 0,
                "count": len(properties),
                "time": round(search_time, 2)
            }
            
            # –¢–µ—Å—Ç 2: –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            properties_multi = await parser.search_properties(
                min_bedrooms=2,
                max_price=3000,
                location='dublin-city',
                limit=20,
                max_pages=3
            )
            
            results["tests"]["pagination"] = {
                "passed": len(properties_multi) > len(properties),
                "single_page": len(properties),
                "multi_page": len(properties_multi)
            }
            
            # –¢–µ—Å—Ç 3: –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            if properties:
                sample_prop = properties[0]
                data_quality = {
                    "has_id": 'id' in sample_prop and sample_prop['id'],
                    "has_title": 'title' in sample_prop and sample_prop['title'],
                    "has_price": 'price' in sample_prop and sample_prop['price'] > 0,
                    "has_bedrooms": 'bedrooms' in sample_prop and sample_prop['bedrooms'] > 0,
                    "has_url": 'url' in sample_prop and sample_prop['url'].startswith('http')
                }
                
                results["tests"]["data_quality"] = {
                    "passed": all(data_quality.values()),
                    "details": data_quality
                }
            
            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            results["performance"] = {
                "search_time": round(search_time, 2),
                "properties_per_second": round(len(properties) / search_time, 1),
                "acceptable": search_time < 5
            }
            
            all_tests_passed = all(
                test.get("passed", False) 
                for test in results["tests"].values()
            )
            
            results["status"] = "success" if all_tests_passed else "partial"
            
            print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫: {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ {search_time:.2f}—Å")
            print(f"   ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: {len(properties_multi)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–º—É–ª—å—Ç–∏-—Å—Ç—Ä–∞–Ω–∏—Ü–∞)")
            print(f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {all(data_quality.values())}")
            
        except Exception as e:
            results["status"] = "failed"
            results["error"] = str(e)
            results["issues"].append(f"Parser error: {e}")
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        
        return results
    
    async def check_bot_components(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        print("\nü§ñ –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ë–û–¢–ê")
        print("=" * 35)
        
        results = {
            "status": "unknown",
            "components": {},
            "issues": []
        }
        
        components_to_check = [
            ("bot.enhanced_bot", "EnhancedPropertyBot"),
            ("database.enhanced_database", "EnhancedDatabase"),
            ("config.regions", "ALL_LOCATIONS"),
            ("bot.enhanced_keyboards", "get_main_menu_keyboard"),
            ("bot.message_formatter", "MessageFormatter"),
            ("production_parser", "ProductionDaftParser"),
        ]
        
        successful_imports = 0
        
        for module_name, component_name in components_to_check:
            try:
                module = __import__(module_name, fromlist=[component_name])
                component = getattr(module, component_name)
                results["components"][f"{module_name}.{component_name}"] = "success"
                print(f"   ‚úÖ {module_name}.{component_name}")
                successful_imports += 1
            except Exception as e:
                results["components"][f"{module_name}.{component_name}"] = f"failed: {e}"
                results["issues"].append(f"Import error {module_name}.{component_name}: {e}")
                print(f"   ‚ùå {module_name}.{component_name}: {e}")
        
        results["status"] = "success" if successful_imports == len(components_to_check) else "partial"
        results["success_rate"] = f"{successful_imports}/{len(components_to_check)}"
        
        return results
    
    def check_project_structure(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
        print("=" * 40)
        
        results = {
            "status": "unknown",
            "files": {},
            "issues": []
        }
        
        critical_files = [
            "production_parser.py",
            "bot/enhanced_bot.py",
            "database/enhanced_database.py",
            "config/regions.py",
            "requirements.txt",
            "README.md"
        ]
        
        optional_files = [
            ".env.example",
            "bot_config.json",
            "docker-compose.yml",
            "Dockerfile"
        ]
        
        existing_critical = 0
        existing_optional = 0
        
        print("   üìã –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã:")
        for file_path in critical_files:
            full_path = self.project_root / file_path
            exists = full_path.exists()
            results["files"][file_path] = "exists" if exists else "missing"
            
            if exists:
                existing_critical += 1
                print(f"      ‚úÖ {file_path}")
            else:
                print(f"      ‚ùå {file_path}")
                results["issues"].append(f"Missing critical file: {file_path}")
        
        print("   üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in optional_files:
            full_path = self.project_root / file_path
            exists = full_path.exists()
            results["files"][file_path] = "exists" if exists else "missing"
            
            if exists:
                existing_optional += 1
                print(f"      ‚úÖ {file_path}")
            else:
                print(f"      ‚ö†Ô∏è {file_path}")
        
        results["critical_files"] = f"{existing_critical}/{len(critical_files)}"
        results["optional_files"] = f"{existing_optional}/{len(optional_files)}"
        results["status"] = "success" if existing_critical == len(critical_files) else "partial"
        
        return results
    
    def check_configuration(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("=" * 30)
        
        results = {
            "status": "unknown",
            "configs": {},
            "issues": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ bot_config.json
        bot_config_path = self.project_root / "bot_config.json"
        if bot_config_path.exists():
            try:
                with open(bot_config_path, 'r', encoding='utf-8') as f:
                    bot_config = json.load(f)
                
                required_keys = ["default_search", "bot_settings"]
                config_valid = all(key in bot_config for key in required_keys)
                
                results["configs"]["bot_config"] = "valid" if config_valid else "invalid"
                print(f"   ‚úÖ bot_config.json: –≤–∞–ª–∏–¥–Ω—ã–π" if config_valid else "   ‚ùå bot_config.json: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π")
                
            except Exception as e:
                results["configs"]["bot_config"] = f"error: {e}"
                results["issues"].append(f"bot_config.json error: {e}")
                print(f"   ‚ùå bot_config.json: –æ—à–∏–±–∫–∞ {e}")
        else:
            results["configs"]["bot_config"] = "missing"
            print("   ‚ö†Ô∏è bot_config.json: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
        env_path = self.project_root / ".env"
        env_example_path = self.project_root / ".env.example"
        
        if env_path.exists():
            results["configs"]["env_file"] = "exists"
            print("   ‚úÖ .env: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        elif env_example_path.exists():
            results["configs"]["env_file"] = "example_only"
            print("   ‚ö†Ô∏è .env: —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä (.env.example)")
        else:
            results["configs"]["env_file"] = "missing"
            results["issues"].append("No .env or .env.example file found")
            print("   ‚ùå .env: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        results["status"] = "success" if not results["issues"] else "partial"
        return results
    
    async def check_integration(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        print("\nüîó –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 30)
        
        results = {
            "status": "unknown",
            "integrations": {},
            "issues": []
        }
        
        try:
            # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å –±–æ—Ç–æ–º
            from production_parser import ProductionDaftParser
            
            # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∏–∑ –±–æ—Ç–∞
            parser = ProductionDaftParser()
            bot_settings = {
                "regions": ["dublin-city"],
                "min_bedrooms": 3,
                "max_price": 2500,
                "max_results_per_search": 5
            }
            
            # –¢–µ—Å—Ç –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ
            region_results = await parser.search_properties(
                min_bedrooms=bot_settings["min_bedrooms"],
                max_price=bot_settings["max_price"],
                location=bot_settings["regions"][0],
                limit=bot_settings["max_results_per_search"]
            )
            
            integration_success = len(region_results) > 0
            results["integrations"]["parser_bot"] = "success" if integration_success else "failed"
            
            print(f"   {'‚úÖ' if integration_success else '‚ùå'} –ü–∞—Ä—Å–µ—Ä ‚Üî –ë–æ—Ç: {len(region_results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            if not integration_success:
                results["issues"].append("Parser-Bot integration failed")
            
        except Exception as e:
            results["integrations"]["parser_bot"] = f"error: {e}"
            results["issues"].append(f"Integration test error: {e}")
            print(f"   ‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ {e}")
        
        results["status"] = "success" if not results["issues"] else "failed"
        return results
    
    def generate_summary(self, all_results: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        summary = {
            "overall_status": "unknown",
            "readiness": "unknown",
            "critical_issues": [],
            "recommendations": [],
            "statistics": {}
        }
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        successful_components = 0
        total_components = 0
        
        for category, result in all_results.items():
            if result.get("status") == "success":
                successful_components += 1
            total_components += 1
        
        success_rate = successful_components / total_components if total_components > 0 else 0
        
        # –°–±–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        for category, result in all_results.items():
            if "issues" in result:
                summary["critical_issues"].extend(result["issues"])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if success_rate >= 0.8:
            summary["overall_status"] = "excellent"
            summary["readiness"] = "production_ready"
        elif success_rate >= 0.6:
            summary["overall_status"] = "good"
            summary["readiness"] = "mostly_ready"
        elif success_rate >= 0.4:
            summary["overall_status"] = "partial"
            summary["readiness"] = "needs_fixes"
        else:
            summary["overall_status"] = "poor"
            summary["readiness"] = "not_ready"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if len(summary["critical_issues"]) == 0:
            summary["recommendations"].append("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
            summary["recommendations"].append("üöÄ –ú–æ–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
        else:
            summary["recommendations"].append("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
            if any("parser" in issue.lower() for issue in summary["critical_issues"]):
                summary["recommendations"].append("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–∞")
            if any("import" in issue.lower() for issue in summary["critical_issues"]):
                summary["recommendations"].append("üì¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∏–º–ø–æ—Ä—Ç—ã")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary["statistics"] = {
            "success_rate": f"{success_rate:.1%}",
            "successful_components": f"{successful_components}/{total_components}",
            "critical_issues_count": len(summary["critical_issues"])
        }
        
        return summary
    
    async def run_full_review(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –†–ï–í–ò–ó–ò–Ø –ü–†–û–ï–ö–¢–ê daft-property-bot")
        print("=" * 60)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.ERROR)  # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        parser_results = await self.check_parser_functionality()
        bot_results = await self.check_bot_components()
        structure_results = self.check_project_structure()
        config_results = self.check_configuration()
        integration_results = await self.check_integration()
        
        all_results = {
            "parser": parser_results,
            "bot_components": bot_results,
            "project_structure": structure_results,
            "configuration": config_results,
            "integration": integration_results
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ
        summary = self.generate_summary(all_results)
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï –ü–†–û–ï–ö–¢–ê")
        print("=" * 60)
        
        print(f"üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {summary['overall_status'].upper()}")
        print(f"üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {summary['readiness'].replace('_', ' ').upper()}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['statistics']['success_rate']}")
        print(f"üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {summary['statistics']['successful_components']}")
        
        if summary["critical_issues"]:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(summary['critical_issues'])}):")
            for issue in summary["critical_issues"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {issue}")
        else:
            print("\n‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú –ù–ï–¢")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in summary["recommendations"]:
            print(f"   ‚Ä¢ {rec}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for category, result in all_results.items():
            status_emoji = "‚úÖ" if result.get("status") == "success" else "‚ö†Ô∏è" if result.get("status") == "partial" else "‚ùå"
            print(f"   {status_emoji} {category.replace('_', ' ').title()}: {result.get('status', 'unknown')}")
        
        self.results = {
            "summary": summary,
            "detailed_results": all_results,
            "timestamp": time.time()
        }
        
        return self.results

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≤–∏–∑–∏–∏"""
    reviewer = ProjectReviewer()
    results = await reviewer.run_full_review()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_file = Path(__file__).parent / "project_review_results.json"
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")

if __name__ == "__main__":
    asyncio.run(main())
