#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ü–æ–∏—Å–∫ 3+ —Å–ø–∞–ª—å–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞
"""

import asyncio
from parser.daft_parser import DaftParser
from parser.models import SearchFilters

async def final_search_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ 3+ —Å–ø–∞–ª—å–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä"""
    
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ü–æ–∏—Å–∫ 3+ —Å–ø–∞–ª—å–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
    print("–ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ daft.ie")
    print("="*70)
    
    parser = DaftParser()
    
    # –¢–µ—Å—Ç 1: –ò—â–µ–º 3+ —Å–ø–∞–ª—å–Ω–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–µ
    print("üîç –¢–ï–°–¢ 1: 3+ —Å–ø–∞–ª—å–Ω–∏, –ª—é–±–∞—è —Ü–µ–Ω–∞")
    print("-" * 50)
    
    filters = SearchFilters(
        city="Dublin",
        max_price=10000,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        min_bedrooms=3
    )
    
    properties = await parser.search_properties(filters)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏")
    
    if properties:
        for i, prop in enumerate(properties, 1):
            print(f"{i}. üè† {prop.title}")
            print(f"   üí∞ ‚Ç¨{prop.price:,}/month")
            print(f"   üõèÔ∏è {prop.bedrooms} —Å–ø–∞–ª–µ–Ω")
            print(f"   üìç {prop.address}")
            print(f"   üîó {prop.url}")
            print()
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏")
    
    print("\n" + "="*70)
    
    # –¢–µ—Å—Ç 2: 3+ —Å–ø–∞–ª—å–Ω–∏ –¥–æ ‚Ç¨2500 (–∫–∞–∫ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    print("üîç –¢–ï–°–¢ 2: 3+ —Å–ø–∞–ª—å–Ω–∏ –¥–æ ‚Ç¨2500 (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    print("-" * 50)
    
    filters.max_price = 2500
    
    properties = await parser.search_properties(filters)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (3+ —Å–ø–∞–ª—å–Ω–∏, –¥–æ ‚Ç¨2500)")
    
    if properties:
        print("üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:")
        for i, prop in enumerate(properties, 1):
            print(f"{i}. üè† {prop.title}")
            print(f"   üí∞ ‚Ç¨{prop.price:,}/month ‚úÖ")
            print(f"   üõèÔ∏è {prop.bedrooms} —Å–ø–∞–ª–µ–Ω ‚úÖ")
            print(f"   üìç {prop.address}")
            print(f"   üîó {prop.url}")
            print()
    else:
        print("‚ùå –ü–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏ –¥–æ ‚Ç¨2500")
        print("   –ù–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤ - —Ç–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")
        print("   –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–∞–≤–Ω–æ")
    
    print("\n" + "="*70)
    
    # –¢–µ—Å—Ç 3: –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
    print("üîç –¢–ï–°–¢ 3: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    print("-" * 50)
    
    all_filters = SearchFilters(city="Dublin", max_price=10000, min_bedrooms=0)
    all_properties = await parser.search_properties(all_filters)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ø–∞–ª—å–Ω—è–º
    bedroom_stats = {}
    for prop in all_properties:
        bedrooms = prop.bedrooms
        if bedrooms not in bedroom_stats:
            bedroom_stats[bedrooms] = []
        bedroom_stats[bedrooms].append(prop)
    
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê ({len(all_properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π):")
    for bedrooms in sorted(bedroom_stats.keys()):
        props = bedroom_stats[bedrooms]
        count = len(props)
        prices = [p.price for p in props]
        min_price = min(prices) if prices else 0
        max_price = max(prices) if prices else 0
        
        print(f"üõèÔ∏è {bedrooms} —Å–ø–∞–ª–µ–Ω: {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (‚Ç¨{min_price:,} - ‚Ç¨{max_price:,})")
        
        # –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        examples = [p.title[:40] + "..." for p in props[:2]]
        for example in examples:
            print(f"   ‚Ä¢ {example}")
    
    await parser.close()
    
    print(f"\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("="*50)
    print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚úÖ –¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è daft.ie —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è —Ç–æ—á–Ω–æ:")
    print("   ‚Ä¢ 'X Bed,' ‚Üí X —Å–ø–∞–ª–µ–Ω")
    print("   ‚Ä¢ 'X Bed Apartment' ‚Üí X —Å–ø–∞–ª–µ–Ω") 
    print("   ‚Ä¢ 'X Bedroom' ‚Üí X —Å–ø–∞–ª–µ–Ω")
    print("   ‚Ä¢ 'Studio' ‚Üí 0 —Å–ø–∞–ª–µ–Ω")
    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ (–±–µ–∑ —Ñ–∞–ª—å—à–∏–≤—ã—Ö)")
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤ - –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å 3+ —Å–ø–∞–ª—å–Ω—è–º–∏ –∑–∞ ‚Ç¨2500 —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    print("   (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø–æ–∏—Å–∫–∞)")

if __name__ == "__main__":
    asyncio.run(final_search_test())
