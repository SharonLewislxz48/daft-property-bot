#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

async def test_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä Daft.ie...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from parser.daft_parser import DaftParser
        from parser.models import SearchFilters
        
        print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters = SearchFilters(
            city="Dublin",
            max_price=2500,
            min_bedrooms=3,
            areas=["Dublin 1", "Dublin 2"]
        )
        
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω—ã: {filters}")
        print(f"   URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {filters.to_url_params()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        async with DaftParser() as parser:
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –°—Ç—Ä–æ–∏–º URL
            url = parser._build_search_url(filters, page=1)
            print(f"   –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π URL: {url}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("üåê –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            html = await parser._fetch_page(url)
            
            if html:
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞! –†–∞–∑–º–µ—Ä: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                print("üîç –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π)...")
                properties = await parser.search_properties(filters, max_pages=1)
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(properties)}")
                
                if properties:
                    print("\nüìã –ü–µ—Ä–≤—ã–µ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
                    for i, prop in enumerate(properties[:3], 1):
                        print(f"   {i}. {prop.title}")
                        print(f"      üí∞ {prop.format_price()}")
                        print(f"      üõèÔ∏è {prop.format_bedrooms()}")
                        print(f"      üìç {prop.address}")
                        print(f"      üîó {prop.url}")
                        print()
                else:
                    print("   ‚ÑπÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å—Ç—Ä–∞–º")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        from database.database import Database
        
        db = Database("./data/test.db")
        await db.init_database()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        from parser.models import BotSettings
        
        settings = BotSettings(
            chat_id="test_chat",
            city="Dublin",
            max_price=2000,
            min_bedrooms=2,
            areas=["Dublin 1", "Dublin 2"]
        )
        
        await db.save_bot_settings(settings)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        loaded_settings = await db.get_bot_settings("test_chat")
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {loaded_settings.city}, ‚Ç¨{loaded_settings.max_price}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 50)
    print("ü§ñ –¢–µ—Å—Ç Daft.ie Telegram Bot")
    print("=" * 50)
    
    await test_parser()
    await test_database()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 50)

if __name__ == "__main__":
    asyncio.run(main())
