#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import asyncio
import os
from unittest.mock import AsyncMock, MagicMock
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot.enhanced_keyboards import *
from enhanced_main import CombinedBot

async def test_keyboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("üéπ –¢–ï–°–¢ –ö–õ–ê–í–ò–ê–¢–£–†")
    print("=" * 30)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboards = [
        ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", get_main_menu_keyboard()),
        ("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", get_settings_menu_keyboard()),
        ("–ú–µ–Ω—é —Ä–µ–≥–∏–æ–Ω–æ–≤", get_regions_menu_keyboard()),
        ("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤", get_region_categories_keyboard()),
        ("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏", get_popular_combinations_keyboard()),
        ("–†–∞–π–æ–Ω—ã –î—É–±–ª–∏–Ω–∞", get_category_regions_keyboard("dublin_areas")),
        ("–û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", get_category_regions_keyboard("main_cities"))
    ]
    
    for name, keyboard in keyboards:
        if keyboard and keyboard.inline_keyboard:
            button_count = sum(len(row) for row in keyboard.inline_keyboard)
            print(f"  ‚úÖ {name}: {button_count} –∫–Ω–æ–ø–æ–∫")
        else:
            print(f"  ‚ùå {name}: –ù–ï–¢ –ö–ù–û–ü–û–ö")
    
    print()

async def test_bot_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞"""
    print("ü§ñ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    print("=" * 30)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–±–æ—Ç–∞
    bot_token = "TEST_TOKEN"
    if not os.getenv('TELEGRAM_BOT_TOKEN'):
        os.environ['TELEGRAM_BOT_TOKEN'] = bot_token
    
    bot = CombinedBot(bot_token)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
    methods_to_check = [
        "cmd_start", "cmd_help", "cmd_status",
        "callback_main_menu", "callback_settings", "callback_statistics",
        "callback_start_monitoring", "callback_stop_monitoring",
        "callback_single_search", "callback_help",
        "callback_show_settings", "callback_manage_regions",
        "callback_search_region", "callback_noop", "callback_current_page",
        "callback_recent_searches"
    ]
    
    for method_name in methods_to_check:
        if hasattr(bot, method_name):
            print(f"  ‚úÖ {method_name}")
        else:
            print(f"  ‚ùå {method_name}")
    
    print()

async def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã"""
    print("üì¶ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–û–í")
    print("=" * 30)
    
    imports_to_check = [
        ("config.regions", "ALL_REGIONS"),
        ("database.enhanced_database", "PropertyDatabase"),
        ("bot.enhanced_keyboards", "get_main_menu_keyboard"),
        ("bot.enhanced_bot", "PropertyBot"),
        ("bot.enhanced_bot_handlers", "EnhancedPropertyBotHandlers")
    ]
    
    for module_name, class_name in imports_to_check:
        try:
            module = __import__(module_name, fromlist=[class_name])
            if hasattr(module, class_name):
                print(f"  ‚úÖ {module_name}.{class_name}")
            else:
                print(f"  ‚ùå {module_name}.{class_name} - –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"  ‚ùå {module_name}.{class_name} - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    print()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ë–û–¢–ê")
    print("=" * 50)
    print()
    
    await test_imports()
    await test_keyboards()
    await test_bot_handlers()
    
    print("=" * 50)
    print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    asyncio.run(main())
