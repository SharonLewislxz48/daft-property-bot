#!/usr/bin/env python3
"""
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Tor –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
"""

import subprocess
import asyncio
import aiohttp
import json
import time

class TorInstaller:
    def __init__(self):
        self.tor_port = 9050
        self.control_port = 9051
        
    def install_tor(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Tor"""
        print("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Tor...")
        try:
            subprocess.run(["sudo", "apt", "update"], check=True)
            subprocess.run(["sudo", "apt", "install", "-y", "tor"], check=True)
            print("‚úÖ Tor —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor: {e}")
            return False
    
    def configure_tor(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Tor"""
        config = """
# Tor configuration for proxy
SocksPort 9050
ControlPort 9051
CookieAuthentication 1
"""
        
        try:
            with open("/tmp/torrc", "w") as f:
                f.write(config)
            
            subprocess.run([
                "sudo", "cp", "/tmp/torrc", "/etc/tor/torrc"
            ], check=True)
            
            print("‚úÖ Tor –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tor: {e}")
            return False
    
    def start_tor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Tor"""
        try:
            subprocess.run(["sudo", "systemctl", "start", "tor"], check=True)
            subprocess.run(["sudo", "systemctl", "enable", "tor"], check=True)
            time.sleep(5)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            print("‚úÖ Tor –∑–∞–ø—É—â–µ–Ω")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Tor: {e}")
            return False
    
    async def test_tor(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            connector = aiohttp.SocksConnector.from_url('socks5://127.0.0.1:9050')
            timeout = aiohttp.ClientTimeout(total=10)
            
            async with aiohttp.ClientSession(
                connector=connector,
                timeout=timeout
            ) as session:
                async with session.get('https://httpbin.org/ip') as response:
                    if response.status == 200:
                        result = await response.json()
                        print(f"‚úÖ Tor —Ä–∞–±–æ—Ç–∞–µ—Ç! IP: {result['origin']}")
                        return True
        except Exception as e:
            print(f"‚ùå Tor –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
        return False
    
    async def test_daft_through_tor(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ daft.ie —á–µ—Ä–µ–∑ Tor"""
        try:
            connector = aiohttp.SocksConnector.from_url('socks5://127.0.0.1:9050')
            timeout = aiohttp.ClientTimeout(total=15)
            
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            }
            
            async with aiohttp.ClientSession(
                connector=connector,
                timeout=timeout
            ) as session:
                async with session.get(
                    'https://www.daft.ie/',
                    headers=headers
                ) as response:
                    print(f"üåê –î–æ—Å—Ç—É–ø –∫ daft.ie —á–µ—Ä–µ–∑ Tor: {response.status}")
                    return response.status == 200
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ Tor: {e}")
        
        return False

async def setup_tor():
    """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Tor"""
    installer = TorInstaller()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
    if not installer.install_tor():
        return False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    if not installer.configure_tor():
        return False
    
    # –ó–∞–ø—É—Å–∫
    if not installer.start_tor():
        return False
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not await installer.test_tor():
        return False
    
    # –¢–µ—Å—Ç daft.ie
    if await installer.test_daft_through_tor():
        print("üéâ Tor –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å daft.ie!")
        return True
    else:
        print("‚ö†Ô∏è Tor —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ daft.ie –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return False

if __name__ == "__main__":
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tor –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫...")
    asyncio.run(setup_tor())
